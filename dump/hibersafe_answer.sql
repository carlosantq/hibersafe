-- MySQL dump 10.13  Distrib 8.0.24, for macos11 (x86_64)
--
-- Host: localhost    Database: hibersafe
-- ------------------------------------------------------
-- Server version	5.6.26

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `answer`
--

LOCK TABLES `answer` WRITE;
/*!40000 ALTER TABLE `answer` DISABLE KEYS */;
INSERT INTO `answer` VALUES (63684204,'<p>If you are using Hibernate 5 or above the GeneratedValue annotation might be creating some problem. Try removing the annotation and assign an ID to the entity from your code.</p>\n<p>Find the Entity in your code with @GeneratedValue annotation and remove the annotation.\nYou have to assign the ID value to the entity after that programatically.</p>\n','2020-09-01 08:41:29',_binary '\0','2020-09-01 09:01:12',0,63682656),(63683702,'<p>When you are having the field</p>\n<pre><code>@Column(name = &quot;date_added&quot;, nullable = false, updatable=false, columnDefinition = &quot;DATETIME DEFAULT CURRENT_TIMESTAMP&quot;)\n@Temporal(value = TemporalType.TIMESTAMP)\nprivate Date dateAdded;\n</code></pre>\n<p>not setting <code>dateAdded</code> to a proper value (and therefore leaving it <code>null</code>) causes said <code>ConstraintViolationException</code>. So, on initializing the user you need to set <code>dateAdded</code> which I usually do in a constructor or via JPA annotations but you can also do that manually:</p>\n<pre><code>[...]\nuser.getPerson().setDateAdded(new Date());\nuser.setUserGroup(userGroup); // Assign the new user this group\n[...]\n</code></pre>\n<p><em>Edit:</em></p>\n<p>Because I am lazy and I want to automate things I mostly use annotations for auto-updates of dates. I particular don\'t like vendor specific solutions so I use JPA normally:</p>\n<pre><code>public class Person {\n    // ...\n    \n    @PrePersist\n    public void prePersist() {\n        dateAdded = new Date();\n    }\n}\n</code></pre>\n<p>although there are more sophisticated solutions for Hibernate or Spring out there, but the effect is always the same: Using the annotation based mechanism you don\'t need to set <code>dateAdded</code> manually anymore.</p>\n','2020-09-01 08:07:29',_binary '','2020-09-01 08:18:07',3,63683318),(63686822,'<p>Apparently you are trying to use Oracle JDBC driver <code>ojdbc10</code> on the Java 8, which is not supported. You can either:</p>\n<ul>\n<li>switch to Java 10 or higher</li>\n<li>downgrade the JDBC driver to <code>ojdbc8</code>:</li>\n</ul>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;\n    &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;\n    &lt;version&gt;12.2.0.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n','2020-09-01 11:32:42',_binary '','2020-09-01 11:32:42',1,63686560),(63870282,'<p>I see very similar mapping in the hibernate <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#collections-map-custom-key-type\" rel=\"nofollow noreferrer\">documentation</a>, but with one important difference: <em>map key mapped to a single column</em>. I can not find proof in the documentation, but I am afraid the similar mapping with map key mapped to the several columns is not possible for the <code>@ElementCollection</code> association.</p>\n<p>However, I was able to do it for the <code>@OneToMany</code> association. So, below I will provide an example.</p>\n<p>Assuming that we have the following schema:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>create table FTT_REPORT\n(\n   REPORT_ID int not null,\n   primary key (REPORT_ID)\n);\n\ncreate table FTT_REPORT_ADJUSTMENTS\n(\n   REPADJ_ID int not null,\n   REPADJ_REPORT_ID int not null,\n   REPADJ_YEAR int,\n   REPADJ_MONTH int,\n   \n   primary key (REPADJ_ID),\n   foreign key (REPADJ_REPORT_ID) references FTT_REPORT(REPORT_ID)\n);\n</code></pre>\n<p>We can use the following mapping:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name=&quot;FTT_REPORT&quot;)\npublic class FttReport\n{\n   @Id\n   @Column(name=&quot;REPORT_ID&quot;)\n   private Long id;\n\n   @OneToMany(cascade = CascadeType.ALL)\n   @OrderBy(&quot;REPADJ_YEAR, REPADJ_MONTH&quot;)\n   @JoinColumn(name = &quot;REPADJ_REPORT_ID&quot;, updatable = false)\n   @MapKey(name = &quot;adjYearMonth&quot;)\n   private SortedMap&lt;YearMonth, FttAdjustment&gt; adjustments;\n}\n\n\n@Entity\n@Table(name = &quot;FTT_REPORT_ADJUSTMENTS&quot;)\npublic class FttAdjustment\n{\n   @Id\n   @Column(name = &quot;REPADJ_ID&quot;)\n   private Long id;\n   \n   // this needs only for adding new FttAdjustment\n   @Column(name = &quot;REPADJ_REPORT_ID&quot;)\n   private Long reportId;\n   \n   @Type(type = &quot;com.acme.FttYearMonthUserType&quot;)\n   @Columns(columns = {\n      @Column(name = &quot;REPADJ_YEAR&quot;),\n      @Column(name = &quot;REPADJ_MONTH&quot;)\n   })\n   private YearMonth adjYearMonth;\n}\n</code></pre>\n<ol>\n<li><code>@MapKey</code> annotation can be used only if the <code>FttAdjustment</code> is an entity.</li>\n<li>The <code>updatable = false</code> was added to the <code>@JoinColumn</code> to avoid extra update query during inserting new <code>FttAdjustment</code>.</li>\n<li>This mapping was tested with hibernate <code>5.4.10.Final</code>.</li>\n</ol>\n<p>P.S. And one more additional note. The <code>@AttributeOverride</code> is the JPA defined annotation for the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#embeddable-override\" rel=\"nofollow noreferrer\">overriding embeddable types</a> column names, but you try to use it for setting column names for the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#basic-custom-type\" rel=\"nofollow noreferrer\">hibernate custom basic types</a>. I am afraid that this is a mistake.</p>\n','2020-09-13 11:37:06',_binary '\0','2020-09-13 13:33:11',1,63691367),(63703268,'<p>You have to use <code>many-to-many</code> association because a <code>Role</code> can have multiple users. Hibernate will create a join table in such case.</p>\n<pre><code>@Entity\npublic class User {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    private List&lt;Role&gt; roles;\n\n}\n\n@Entity\npublic class Role {\n\n    @Id\n    private Long id;\n\n    @Column\n    private String name;\n\n}\n</code></pre>\n<p>You can create an additional entity <code>UserRoleMapping</code> with <code>@ManyToOne</code> to <code>User</code> and <code>@ManyToOne</code> to <code>Role</code>. It will be simply to add or delete <code>Role</code>. You will not need to get all roles list to remove one of them. Also you can add unique constraint <code>(User, Role)</code> to the <code>UserRoleMapping</code>.</p>\n','2020-09-02 10:06:53',_binary '\0','2020-09-02 10:14:11',1,63701602),(63718983,'<p>Here is how I have solved the issue:</p>\n<pre><code>@Entity\n@Table(name = &quot;emp_user&quot;)\npublic class UserEntity implements Serializable { // &lt;-- must implement Serializable\n    @Id\n    private String uuid;\n\n    @Column(name = &quot;\\&quot;user\\&quot;&quot;)\n    private String username;\n\n    @Column(name = &quot;id&quot;)\n    private Long identifier;\n\n    @OneToMany\n    @JoinColumn(name = &quot;emp_user_id&quot;, referencedColumnName = &quot;id&quot;) // &lt;-- both name and referencedColumnName are required\n    private List&lt;Roles&gt; rolesList;\n\n    // getters and setters\n}\n</code></pre>\n','2020-09-03 07:40:32',_binary '','2020-09-03 09:27:48',0,63701602),(63715905,'<p>There is a bug in your setter method for unit_number, it is not taking a parameter. It should be:</p>\n<pre><code>public void setUnit_number(String unit_number){\n    this.unit_number = unit_number;\n}\n</code></pre>\n','2020-09-03 02:23:34',_binary '','2020-09-03 02:23:34',1,63713969),(63772708,'<p>You can implement DTOs in a way that only maps Java properties and triggers lazy loading during conversion, but that might lead you to the infamous N + 1 lazy loading issue. It would be a lot better performance wise to load only the data that the DTO really needs.</p>\n<p>A DTO is not always just a subset of an entity but sometimes contains transformed information or information about indirectly related entities. So having a dedicated type per use case is definitely something that is IMO desirable.</p>\n<blockquote>\n<p>do I have to define a different mapping between entity A and DTO A,\nbased on the methods in the service layer that I need? In other words,\nif I have two methods that returns different info of A, should I\nhandle two kinds of DTO mapping?</p>\n</blockquote>\n<p>Yes, each use case should have it\'s own DTO. You could achieve reusability through inheritance or composition if you need it.</p>\n<p>This is a perfect use case for <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a>.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(A.class)\npublic interface ADto {\n    @IdMapping\n    Long getId();\n    String getName();\n    @Mapping(&quot;bCollection&quot;)\n    Set&lt;BDto&gt; getBs();\n\n    @EntityView(B.class)\n    interface BDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>ADto a = entityViewManager.find(entityManager, ADto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n','2020-09-07 06:56:39',_binary '','2020-09-10 06:49:12',1,63764866),(63767870,'<p>AS the error says <code>&quot;Error accessing field [private java.lang.Integer com.webapp.firstwebapp.Models.UserModel.id]</code></p>\n<p>This is related to the scope for the attributes of <code>UserModel</code> entity</p>\n<p>You have to make public access modifiers for attributes of <code>UserModel</code> Entity</p>\n','2020-09-06 19:01:45',_binary '\0','2020-09-06 19:01:45',0,63767345),(63769501,'<p>That happens because you are trying to persist and object that doesn\'t exist so you should use the CascadeType.PERSIST or persist the SwipeIdKey object first</p>\n','2020-09-06 22:43:45',_binary '\0','2020-09-06 22:43:45',0,63769468),(63769919,'<p>By default, your persistence configuration is mapping camelcase to underscore.\nTo fix that you can replace the field name strategy with:</p>\n<pre><code>spring.jpa.hibernate.naming.implicit-strategy\nspring.jpa.hibernate.naming.physical-strategy\n</code></pre>\n<p>You have an explanation here: <a href=\"https://www.baeldung.com/hibernate-field-naming-spring-boot\" rel=\"nofollow noreferrer\">https://www.baeldung.com/hibernate-field-naming-spring-boot</a></p>\n<p>Or you could just rename to column to ogrid. It will imply to amend the script to create the table and the name in the column annotation.</p>\n','2020-09-06 23:59:17',_binary '','2020-09-06 23:59:17',2,63769794),(63776039,'<p>I managed to figure out what is the problem</p>\n<p>Service function should look like this:</p>\n<pre><code>@Override\npublic void saveTodo(Todo todo, Long taskId) {\n    Task task = getTaskById(taskId);\n    todo = todoRepository.saveAndFlush(todo); // This line is changed\n    TaskTodo taskTodo = new TaskTodo(task, todo);\n    taskTodoRepository.save(taskTodo);\n}\n</code></pre>\n<p>Reason is because <code>Todo</code> which was sent as parameter did not have id in itself and because of that there was an error.</p>\n<p>When I put <code>todo = todoRepository.saveAndFlush(todo);</code>, <code>saveAndFlush</code> returned object which had id in itself. Because of that <code>TaskTodo</code> could be saved.</p>\n','2020-09-07 10:45:52',_binary '','2020-09-07 10:45:52',0,63775314),(63793286,'<p>The easiest option in your case is configure <code>@Transactional</code> annotation, forcing to send database all changes in your tests (it can be used only in specific ones):</p>\n<pre><code>import org.springframework.transaction.annotation.Transactional;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n@Transactional(propagation = Propagation.NOT_SUPPORTED)\n@DataJpaTest\npublic class EmployeeRepositoryTest {\n\n  @Autowired\n  private EmployeeRepository employeeRepository;\n\n  @Test\n  public void mustNotSaveFirstNameLongerThan14() {\n    Employee employee = new Employee();\n    employee.setId(1);\n    employee.setFirstName(&quot;koraykoraykoray&quot;);  // 15 characters!\n    assertThrows(DataIntegrityViolationException.class, () -&gt; {\n        employeeRepository.save(employee);\n    });\n  }\n\n  @Test\n  public void mustSaveFirstNameShorterThan14() {\n    Employee employee = new Employee();\n    employee.setId(1);\n    employee.setFirstName(&quot;koraykor&quot;);  // 8 characters!\n    employeeRepository.save(employee);\n  }\n}\n</code></pre>\n<p><strong>PD:</strong> I have added a simple <code>Integer</code> property as PK of <code>Employee</code> entity due to your repository definition.</p>\n<p>You can see the results in the following picture:</p>\n<p><a href=\"https://i.stack.imgur.com/t7AMz.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/t7AMz.png\" alt=\"Reposity tests\" /></a></p>\n','2020-09-08 11:49:15',_binary '','2020-09-10 08:01:04',3,63782195),(63798707,'<p>You could use <code>JpaRepository&lt;T,ID&gt;</code> instead of <code>CrudRepository&lt;T,ID&gt;</code>. Something like:</p>\n<pre><code>@Repository\npublic interface EmployeeRepository extends JpaRepository&lt;Employee, Integer&gt;\n</code></pre>\n<p>Then you can use its <code>saveAndFlush()</code> method anywhere you need to send data immediately:</p>\n<pre><code>@Test\npublic void mustNotSaveFirstNameLongerThan14() {\n  Employee employee = new Employee();\n  employee.setFirstName(&quot;koraykoraykoray&quot;);  // 15 characters!\n  employeeRepository.saveAndFlush(employee);\n}\n</code></pre>\n<p>And in code where you would like to have optimization you still can use <code>save()</code> method.</p>\n','2020-09-08 17:18:18',_binary '\0','2020-09-27 01:36:29',1,63782195),(63809377,'<p>You should check is <code>messageId</code> filled in the received entity. Try this code:</p>\n<pre><code>if (entity.getId() == null) {\n    entityManager.persist(entity);\n} else {\n    entityManager.merge(entity);\n}\n</code></pre>\n<p>You should use <code>Long</code> type instead of primitive <code>long</code> to allow identificator be null.</p>\n','2020-09-09 10:08:07',_binary '\0','2020-09-09 10:08:07',0,63808729),(63828257,'<p>The problem is that your query returns list of flat relational objects <code>password-role</code>. EntityManager convert flat relations only for entities. As for <code>projection</code> results you have to convert them manually.</p>\n<p>You need <code>dto</code> class like this</p>\n<pre><code>public class PasswordRole {\n\n    private String password;\n    private Role role;\n\n    public UserAuth(String password, Role role) {\n        this.password = password;\n        this.role = role;\n    }\n\n    //getters\n}\n</code></pre>\n<p>Your query</p>\n<pre><code>String username = &quot;Tom&quot;;\nQUser user = QUser.user;\nQRole role = QRole.role;\n\nJPAQueryFactory queryFactory = new JPAQueryFactory(entityManager);\nList&lt;PasswordRole&gt; passwordRoles = queryFactory\n                .select(Projections.constructor(PasswordRole.class, user.password, role))\n                .from(user)\n                .join(user.roles, role)\n                .where(user.username.eq(username))\n                .fetch();\n</code></pre>\n<p>Then you have to convert <code>List&lt;PasswordRole&gt;</code> to <code>UserAuth</code></p>\n<pre><code>public UserAuth toUserAuth(List&lt;PasswordRole&gt; passwordRoles) {\n   if(passwordRoles.isEmpty()) {\n       throw new IllegalArgumentException(&quot;empty list of passwordRoles&quot;);\n   }\n\n   Set&lt;Role&gt; roles = passwordRoles.stream().map(PasswordRole::getRole)\n                                  .distinct().collect(Collectors.toSet());\n\n   return new UserAuth(passwordRoles.get(0).getPassword(), roles);\n}\n</code></pre>\n','2020-09-10 10:59:44',_binary '','2020-09-10 11:04:50',0,63820457),(63835725,'<p>I have found solution to my problem and it is that whenever you name your table or column in camel case then JPA changes it while accessing\nLike in My case\nit was <strong>customerId</strong> and JPA was accessing <strong>customer_id</strong></p>\n','2020-09-10 18:31:28',_binary '\0','2020-09-10 18:31:28',0,63824811),(63829792,'<pre><code>@Entity\n@Table(name = &quot;chain&quot;)\npublic class Chain {\n    //..\n\n    @OneToMany(mappedBy = &quot;camera_item&quot;)\n    private List&lt;CameraItem&gt; cameraItems = new ArrayList&lt;&gt;();\n\n    //..\n}\n</code></pre>\n<p><code>mappedBy</code> parameter can only be in one side of the relation. I suspect <code>camera_item</code> is database table column name. So your <code>cameraItems</code> needs <code>@JoinTable(name = &quot;camera_item&quot;...</code> annotation</p>\n','2020-09-10 12:34:49',_binary '\0','2020-09-10 12:57:27',0,63829130),(63830083,'<p>I don\'t think there is issue in <code>ConnectionPoint</code>. I think the issue is that:</p>\n<p>In <code>Chain</code> class,</p>\n<pre><code>@OneToMany(mappedBy = &quot;camera_item&quot;)  // One-to-Many defined here\nprivate List&lt;CameraItem&gt; cameraItems = new ArrayList&lt;&gt;();\n</code></pre>\n<p>while in <code>CameraItem</code> class, corresponding property is defined as follow:</p>\n<pre><code>@ManyToMany(mappedBy = &quot;cameraItems&quot;, fetch = FetchType.LAZY) // Many-To-Many\nprivate List&lt;Chain&gt; parentChainIds;\n</code></pre>\n<p>Try changing the mapping type to <code>@ManyToMany</code> in <code>Chain</code> class as well. It might work.</p>\n<p>PS: I am not entirely sure of this, but this feels like the issue[incorrect mapping type]. Wanted to add this as a comment, but due to space issues, adding it as an answer.</p>\n','2020-09-10 12:50:42',_binary '\0','2020-09-10 12:50:42',0,63829130),(63862656,'<p>Ensure that your data-source is pointing to the target database. If you\'re using MySQL and you want to use the <code>my-database</code> database, for example, you could specify it in the JDBC connection URL like the following: <code>jdbc:mysql://127.0.0.1:3306/my-database</code>.</p>\n<p>Since you mentioned you\'re using Wildfly, check your data-source settings in your <code>standalone.xml</code> or <code>domain.xml</code> file.</p>\n','2020-09-12 16:47:14',_binary '\0','2020-09-12 16:52:15',0,63855639),(63911787,'<p>OK, I sent a native query with &quot;use misc&quot; to try to force setting a database. I learned that it was trying to pick up fields that were not in the MySQL table apparently it does this for bean properties of the entity regardless of whether or not you give them a @Column annotation. Did not have this problem with native Hibernate 3.</p>\n','2020-09-16 01:09:42',_binary '\0','2020-09-16 01:09:42',0,63855639),(63889942,'<p>If you want to generate the id and at the same time using *sql files, you need define the auto_increment property to your id field in creation table.</p>\n<p>Because when you using generation strategy - Identity, hibernate believes that your columns is auto increments on a table side.</p>\n','2020-09-14 18:28:31',_binary '','2020-09-14 18:28:31',1,63863991),(63880204,'<p>The error is quite clear, it verifies that the table exists with that name and that the schema is correct. If it is not, try to write down the entity like this:</p>\n<pre><code>@Table (name = &quot;ciudad_persona&quot;, schema = &quot;your_schema&quot;)\n</code></pre>\n','2020-09-14 07:55:15',_binary '','2020-09-14 07:55:15',0,63876453),(63894515,'<p>Your <code>QuoteId</code> class is marked as <code>@Embeddable</code> which means that a database table for <code>Quote</code> pulls in all columns from <code>QuoteId</code> in addition to its own columns.</p>\n<p>Becuse you have a column with name <code>date</code> (and, by the way, <code>symbol</code> too) in both tables, you end up with a table definition which has two columns with the same name, which is not allowed.</p>\n<p>If you are trying to use a composite key for <code>Quote</code>, you need to remove <code>date</code> and <code>symbol</code> from <code>Quote</code>. Note that this is <strong>not</strong> joining two tables, as there will be no <code>QuoteId</code> as a separate table.</p>\n','2020-09-15 03:11:55',_binary '','2020-09-15 03:11:55',2,63894391),(64671054,'<p>It ended up being that the Lombok builder wasn\'t updating the Dao like I thought it was, it was replacing it, which then caused the ORM to think it was a new object</p>\n','2020-11-03 21:35:45',_binary '','2020-11-03 21:35:45',0,63925297),(63943232,'<p>I believe the problem is in Entity, if you are add ID by yourself, hibernate think that this entity already in DB and for him it is detached entity.</p>\n<p>Tip: try do not use GenerationType.AUTO, instead a better approach using SEQUENCE or IDENTITY.</p>\n<p>AUTO - we are delegating ID creation strategy to persistence provider which is not always the best approach.</p>\n<p><a href=\"https://docs.jboss.org/hibernate/jpa/2.1/api/javax/persistence/GenerationType.html\" rel=\"nofollow noreferrer\">https://docs.jboss.org/hibernate/jpa/2.1/api/javax/persistence/GenerationType.html</a> more about strategies.</p>\n','2020-09-17 17:23:59',_binary '\0','2020-09-17 17:23:59',0,63931844),(63942164,'<p>For removing entities as a cascade, the best approach is removing them with a few queries.</p>\n<p>For example:</p>\n<pre><code>em.createQuery(&quot;delete from Lap p where p.race.id = :id).setParameter(&quot;id&quot;, id).executeUpdate();\n\nem.createQuery(&quot;delete from Race r where r.id = :id).setParameter(&quot;id&quot;, id).executeUpdate();\n</code></pre>\n<p><a href=\"https://thorben-janssen.com/avoid-cascadetype-delete-many-assocations/\" rel=\"nofollow noreferrer\">https://thorben-janssen.com/avoid-cascadetype-delete-many-assocations/</a> read here for better understanding.</p>\n','2020-09-17 16:15:47',_binary '\0','2020-09-17 16:15:47',0,63938585),(63957756,'<p>The value of the <code>mappedBy</code> field on the <code>@OneToMany</code> annotation references java instance variable names, and it is case sensitive. You are setting it to <code>Visit</code>, but in the <code>directions</code> and <code>test</code> classes the variable names are <code>visit</code>.</p>\n<p>The solution is to change property <code>mappedBy</code> from <code>Visit</code> to <code>visit</code> (lower case V):</p>\n<pre><code>@OneToMany(mappedBy = &quot;visit&quot;,cascade = CascadeType.PERSIST,orphanRemoval = true,fetch=FetchType.LAZY)\nprivate List&lt;directions&gt; directions;\n\n@OneToMany(mappedBy = &quot;visit&quot;,cascade = CascadeType.PERSIST,orphanRemoval = true,fetch=FetchType.LAZY)\nprivate List&lt;Test&gt; Test;\n</code></pre>\n','2020-09-18 14:34:02',_binary '','2020-09-18 17:51:47',1,63950409),(63971716,'<p>By the error message, I assume that besides tables <code>post</code> and <code>comments</code>, you have a join table named <code>post_comments</code>.</p>\n<p>If thats the case, hibernate is not aware of it. You should use not only <code>@OneToMany</code> but <code>@JoinTable</code> annotation as well in the <code>comments</code>field of <code>Post</code> class.</p>\n','2020-09-19 17:47:59',_binary '\0','2020-09-19 17:47:59',0,63971573),(63971837,'<p>You can do it without creating bidirectional relationship but there is one caveat in doing so and I would come to that later, let\'s see how you can do that in unidirectional relationship.</p>\n<p>First you need to specify the <code>orphanRemoval=true</code> on your entity relation</p>\n<pre><code>@OneToMany(cascade = { CascadeType.ALL }, orphanRemoval = true)\nList&lt;Comment&gt; comments = new ArrayList();\n\n// Now I am assuming you have equals and hash code methods are implemented in your comment class,\n\n// So all you need to load the Comment Entity by its id and then have to call\n\nComment comment = dao.findById(id);\ncomments.remove(comment);\n\n// This will delete the comment from table and will keep all comments as it is.\n\n// Another way is to iterate the comments list and find matching Comment object (add the method in transaction)\n\n@Service\nclass PostService {\n\n    @Transactional\n    public Comment deleteComment(Integer commentId) {\n       Post post = repository.findById(id);\n       List&lt;Comment&gt; comments = post.getComments();\n       Comment comment = comments.stream().filter(c -&gt; c.getId().equals(commentId)).findAny()\n     .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Invalid comment id&quot;));\n      \n      comments.remove(comment);\n\n      return comment;\n    }\n\n}\n\n \n\n</code></pre>\n<p>Caveats:</p>\n<pre><code>1. post.getComments() // will load all comments from database\n2. comments.remove(comment) // will trigger additional INSERT statements\n</code></pre>\n<p>Why additional insert statements will be triggered?</p>\n<p>When you use uni-directional mapping, JPA provider (hibernate) will create additional junction table and your relation becomes <code>@ManyToMany</code> at the background.</p>\n<p>So it will first Delete all the entries from junction table passing associated <code>post_id</code> and then insert all the records back to junction table, leaving the record we deleted.</p>\n<p>Then it will delete the entry from comment table, so its a performance penalty you have to pay using unidirectional relation.</p>\n','2020-09-19 18:03:00',_binary '','2020-09-19 18:40:37',2,63971573),(63981102,'<blockquote>\n<p>Thus there is a many-to-one relationship between B and A, where multiple records in Table B correspond to one record of Table A.</p>\n</blockquote>\n<p>This kind of stuff in JPA entities is handled with <code>@ManyToOne</code> annotation. You usually do not refer to any <strong>id</strong> field directly but tell JPA what there should be. So in your class TableB (or should I call it... Shots?) should be something like:</p>\n<pre><code>@ManyToOne\nprivate TableA tableA;\n\n// and get rid of this\n// @Column(name = &quot;user_id&quot;)\n// private Long userId;\n</code></pre>\n<p>And optionally - so not necessarily - you could have, in your TableA:</p>\n<pre><code>@OneToMany\nprivate List&lt;TableB&gt; tableBsOrShouldICallYouShots;\n</code></pre>\n<p>I am not sure what is your actual problem but when setting and referring to id fields directly might cause your difficulties.</p>\n<p>Now if you -for example- use repository to find some <code>TableB</code> you can then after that just do</p>\n<pre><code>tableB.getTableA()\n</code></pre>\n<p>And when saving you would before that do:</p>\n<pre><code>tableB.setTableA(somSortOftableA);\n// so not tableB.setUserId(someLongIdFOrtableA);\n</code></pre>\n<p>Now the point is that there is no problem with referential integrity because you do not need to know any IDs and you cannot set any wrong ID. Unless you first need to fetch TableA by id before setting it to TableB but in that case you would still not <strong>set</strong> any IDs.</p>\n','2020-09-20 16:17:40',_binary '\0','2020-09-20 18:30:51',0,63975227),(63976122,'<p>Is Users class not supposed to have a list of items? Try the following,</p>\n<pre><code>@Entity\n@Table(name = &quot;users&quot;)\npublic class Users{\n\n    @OneToMany(mappedBy = &quot;user&quot;)\n    private List&lt;Items&gt; items;\n\n}\n\n@Entity\n@Table(name = &quot;items&quot;)\npublic class Items{\n\n    @JoinColumn(name=&quot;userid&quot;)\n    @ManyToOne\n    private User user;\n\n}\n</code></pre>\n','2020-09-20 06:21:50',_binary '\0','2020-09-20 06:21:50',0,63975617),(63997947,'<p>The exception <code>NULL not allowed for column &quot;schoolClassId&quot;</code> is clearly saying <code>schoolClassId</code> cannot be null.</p>\n<p>Its the <code>nullable = false</code> property, that would enforce the not null constraint on the column schoolClassId which can be translated to <code>schoolClassId bigint NOT NULL</code> in the student create table.</p>\n<p>The <code>insertable=true</code> on  <code>schoolClassId</code>  column would mean the column is included in the insert query. So whenever an instance of SchoolClass is persisted, the associated Student instances will be persisted too. The student entity insert will include the SchoolClassId column , its value referencing to SchoolClass id\'s instance, which is not null in this case.</p>\n<p>So in short, anytime the column schoolClassId is null, the constraint violation will be thrown, so keeping insertable=false, you would need to set nullable = true if you have to get rid of the violation.</p>\n','2020-09-21 18:23:23',_binary '\0','2020-09-22 06:36:43',1,63996012),(64026536,'<p>it you want to bind you custom select result to your non entity object then you have to do something like this</p>\n<pre><code>@Getter\n@AllArgsConstructor\nclass FullOrder {\n   private Long orderId;\n   private BigDecimal totalPrice;\n}\n\n\n@Repository\npublic interface CustomerOrderRepository extends CrudRepository&lt;CustomerOrder, Long&gt; {\n\n    @Query(query = &quot;select new full.path.to.class.FullOrder(c.orderId, c.totalPrice) from CustomeOrder c&quot;)\n    List&lt;FullOrder&gt; findALlOrders();\n}\n</code></pre>\n<p>Spring Data will invoke constuctor of <code>FullOrder</code> so property order &amp; property type if matter</p>\n','2020-09-23 11:03:33',_binary '','2020-09-23 11:03:33',0,64026001),(64038469,'<p>Fix by using this:</p>\n<pre><code>&lt;form:input path=&quot;formItemProduction.appLookup.lookupId&quot; /&gt;\n</code></pre>\n<p>Able store the value from jsp and pass to my controller model</p>\n','2020-09-24 01:53:56',_binary '\0','2020-09-24 01:53:56',0,64027141),(64030509,'<p>You have <code>itemId</code> which can\'t be <code>null</code>.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Column(name = &quot;item_id&quot;, nullable = false)\nprivate Long itemId;\n</code></pre>\n<p>and you actually set <code>itemId</code> to <code>null</code></p>\n<pre class=\"lang-java prettyprint-override\"><code>i.setItemId(null);\n</code></pre>\n<p>So this line</p>\n<pre class=\"lang-java prettyprint-override\"><code>entityManager.persist(i);\n</code></pre>\n<p>Is not able to persist your data.</p>\n','2020-09-23 14:45:55',_binary '\0','2020-09-23 14:45:55',0,64029782),(64030801,'<p>You have set cascade to ALL:</p>\n<pre><code>@OneToOne(cascade = CascadeType.ALL)\n</code></pre>\n<p>Which means you are cascading all operations down to the related field <code>AppLookup</code>.</p>\n<p>You can set cascade to none, and you will no longer get your error, but no db operations  will be executed for <code>AppLookup</code> field.</p>\n','2020-09-23 15:00:47',_binary '\0','2020-09-23 15:00:47',-1,64029782),(64038200,'<p>Fixed by changing from:</p>\n<pre><code>@OneToOne(cascade = CascadeType.ALL)\n@JoinColumn(name = &quot;shift_lookup_id&quot;, insertable = false, updatable = false)\nprivate AppLookup appLookup;\n</code></pre>\n<p>to:</p>\n<pre><code>@OneToOne\n@JoinColumn(name = &quot;shift_lookup_id&quot;, insertable = true, updatable = true)\nprivate AppLookup appLookup;\n</code></pre>\n','2020-09-24 01:08:28',_binary '\0','2020-09-24 01:08:28',0,64029782),(64078899,'<p>The problem is that the table <code>ALL_TAB_COLUMNS</code> does not have single column primary key. You should use a composite primary key based on the <code>OWNER</code>, <code>TABLE_NAME</code>, <code>COLUMN_NAME</code> columns.</p>\n<p>You can use for example the <code>@IdClass</code> <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-nonaggregated\" rel=\"nofollow noreferrer\">annotation</a> for the composite primary key mapping:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = &quot;ALL_TAB_COLUMNS&quot;)\n@IdClass(QueryTableAttModelPK.class)\npublic class QueryTableAttModel\n{\n   private String owner;\n   private String tableName;\n   private String columnName;\n   private String dataType;\n   \n   public QueryTableAttModel()\n   {\n   }\n   \n   @Id\n   @Column(name = &quot;OWNER&quot;)\n   public String getOwner()\n   {\n      return owner;\n   }\n   public void setOwner(String owner)\n   {\n      this.owner = owner;\n   }\n\n   @Id\n   @Column(name = &quot;TABLE_NAME&quot;)\n   public String getTableName()\n   {\n      return tableName;\n   }\n   public void setTableName(String tableName)\n   {\n      this.tableName = tableName;\n   }\n\n   @Id\n   @Column(name = &quot;COLUMN_NAME&quot;)\n   public String getColumnName()\n   {\n      return columnName;\n   }\n   public void setColumnName(String columnName)\n   {\n      this.columnName = columnName;\n   }\n\n   @Column(name = &quot;DATA_TYPE&quot;)\n   public String getDataType()\n   {\n      return dataType;\n   }\n   public void setDataType(String dataType)\n   {\n      this.dataType = dataType;\n   }\n}\n</code></pre>\n<p>Where <code>QueryTableAttModelPK</code> class is</p>\n<pre class=\"lang-java prettyprint-override\"><code>import java.io.Serializable;\nimport java.util.Objects;\n\npublic class QueryTableAttModelPK implements Serializable\n{\n   private String owner;\n   private String tableName;\n   private String columnName;\n   \n   public QueryTableAttModelPK()\n   {\n   }\n   \n   public QueryTableAttModelPK(String owner, String tableName, String columnName)\n   {\n      this.owner = owner;\n      this.tableName = tableName;\n      this.columnName = columnName;\n   }\n\n   public String getOwner()\n   {\n      return owner;\n   }\n   public void setOwner(String owner)\n   {\n      this.owner = owner;\n   }\n\n   public String getTableName()\n   {\n      return tableName;\n   }\n   public void setTableName(String tableName)\n   {\n      this.tableName = tableName;\n   }\n\n   public String getColumnName()\n   {\n      return columnName;\n   }\n   public void setColumnName(String columnName)\n   {\n      this.columnName = columnName;\n   }\n   \n   @Override\n   public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null) return false;\n      if (getClass() != obj.getClass()) return false;\n      \n      QueryTableAttModelPK other = (QueryTableAttModelPK) obj;\n      return Objects.equals(owner, other.owner) \n          &amp;&amp; Objects.equals(tableName, other.tableName)\n          &amp;&amp; Objects.equals(columnName, other.columnName);\n   }\n\n   @Override\n   public int hashCode() {\n      return Objects.hash(owner, tableName, columnName);\n   }\n}\n</code></pre>\n<p>and then you can use a native query:</p>\n<pre class=\"lang-java prettyprint-override\"><code>List&lt;QueryTableAttModel&gt; results = em.createNativeQuery(\n   &quot;select OWNER, TABLE_NAME, COLUMN_NAME, DATA_TYPE from ALL_TAB_COLUMNS where TABLE_NAME = :table&quot;,\n   QueryTableAttModel.class)\n.setParameter(&quot;table&quot;, &quot;ALL_TAB_COLUMNS&quot;)\n.getResultList();\n</code></pre>\n<p>a jpql/hql query:</p>\n<pre class=\"lang-java prettyprint-override\"><code>List&lt;QueryTableAttModel&gt; results = em.createQuery(\n   &quot;select q from QueryTableAttModel q where q.tableName = :table&quot;,\n   QueryTableAttModel.class)\n.setParameter(&quot;table&quot;, &quot;ALL_TAB_COLUMNS&quot;)\n.getResultList();\n</code></pre>\n<p>or find an entity by PK:</p>\n<pre class=\"lang-java prettyprint-override\"><code>QueryTableAttModel qTable = em.find(\n   QueryTableAttModel.class,\n   new QueryTableAttModelPK(&quot;SYS&quot;, &quot;ALL_TAB_COLUMNS&quot;, &quot;CHAR_LENGTH&quot;)\n);\n</code></pre>\n','2020-09-26 14:33:24',_binary '\0','2020-09-26 14:33:24',0,64057680),(64070993,'<p>You need to add mapping , so add this class</p>\n<pre><code>public class CustomerResult{\n\n    private String firstname;\n    private String lastname;\n\n    public CustomerResult(String surname, String lastname){\n       this.firstname = firstname;\n       this.lastname = lastname;\n    }\n\n    // getters / setters\n}\n</code></pre>\n<p>And add this in your repository</p>\n<pre><code>@Query(&quot;select NEW com.yourpackageClass.CustomerResult(\n            o.customer.firstname, o.customer.lastname) \n        from Customer as o&quot;) \nList&lt; CustomerResult&gt; findAllCustomer();\n</code></pre>\n<p>Hope useful</p>\n','2020-09-25 20:29:59',_binary '','2020-09-26 10:10:28',0,64070599),(64255722,'<p>I did manage to get it working with Spring 4 Hibernate 5 running within WildFly w/o customizing <code>OpenSessionInViewFilter</code> or specifying container-specific properies (like  <code>hibernate.transaction.factory_class</code> or <code>hibernate.transaction.manager_lookup_class</code>).\nKey to success was proper usage of <code>@Transactional</code> annotation and little bit of tweeking queries itself.</p>\n<p>Even more to that, in my test app enabling JTA transactions properties (like prescribed <a href=\"https://docs.jboss.org/hibernate/orm/5.1/userguide/html_single/chapters/transactions/Transactions.html\" rel=\"nofollow noreferrer\">here</a>) caused side effects like incorrect rollback on runtime exceptions.\nThese are the properties I was using to enable it:</p>\n<pre><code>properties.put(&quot;hibernate.transaction.jta.platform&quot;, &quot;JBossAS&quot;);\nproperties.put(&quot;hibernate.transaction.coordinator_class&quot;, &quot;jta&quot;);\n</code></pre>\n<p>Same code w/o these being specified rollbacks all intermediate DB entries as expected. Didn\'t known why is that yet, but there is no good reason for us to use JTA transactions in the first place.</p>\n','2020-10-08 04:19:00',_binary '','2020-10-08 04:19:00',0,64107109),(64117092,'<p>config the timezone with the datasource url property, just like this\nurl:jdbc:mysql://127.0.0.1:3306/test?&amp;serverTimezone=Asia/Shanghai</p>\n','2020-09-29 09:49:28',_binary '\0','2020-09-29 09:49:28',0,64116511),(64119283,'<p>spring.datasource.url=jdbc:mysql://localhost:3306/digital?serverTimezone=UTC</p>\n','2020-09-29 12:06:55',_binary '\0','2020-09-29 12:06:55',0,64116511),(65563548,'<p>Okay, the thing is when you are trying</p>\n<pre><code>Car car = new Car();\ncar.setBrand(&quot;Alfa Romeo&quot;);\nSet&lt;Car&gt; cars = new HashSet&lt;&gt;();\ncars.add(car);\n\nDriver driver = new Driver();\ndriver.setCars(cars);\n\nem.persist(driver);\n</code></pre>\n<p>with single-direction one-to-many, hibernate executes 3 sql statements:</p>\n<ol>\n<li>insert into driver (id) values (?)</li>\n<li>insert into car (brand, id) values (?, ?)</li>\n<li>update car set driver_id=? where id=?</li>\n</ol>\n<p>Switching to two-direction relationship</p>\n<pre><code>@Entity\n@Audited\npublic class Car {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String brand;\n\n    @ManyToOne\n    private Driver driver;\n\n    // Constructor, getters and setters omitted\n}\n\n@Entity\n@Audited\npublic class Driver {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = &quot;driver&quot;)\n    @AuditJoinTable(name = &quot;car_aud&quot;)\n    private Set&lt;Car&gt; cars = new HashSet();\n\n    public void setCars(Set&lt;Car&gt; cars) {\n        books.forEach(b -&gt; b.setDriver(this));\n        this.cars.addAll(cars);\n    }\n\n    // Constructor, getters and setters omitted\n\n}\n\n</code></pre>\n<p>makes Hibernate create only 2 SQL statements:</p>\n<ol>\n<li>insert into driver (id) values (?)</li>\n<li>insert into car (driver_id, brand, id) values (?, ?, ?)</li>\n</ol>\n<p>with the same result. So there will be no ambiguity in the CAR_AUD table.</p>\n','2021-01-04 13:32:48',_binary '','2021-01-21 09:12:37',0,64117295),(64132942,'<p>The persistence context holds the lifecycle of all entities. When you fetch an entity it will be an attached entity within that transsaction. Because the reference of your object does not change, the persistence context will know that it\'s still the same object in the database which does not allow it\'s identifier to change.\nIf you want to create a new entry, you will have to create a new object using the <code>new</code> keyword and persist that one.</p>\n<p>So instead of changing the identifier like so</p>\n<pre><code>public void copyTopic(String id, String new_id){\n    Topic topic = topicRepository.findById(id).get();\n    Topic topicCopy = topic;\n    topicCopy.setId(new_id);\n    addTopic(topicCopy);\n}\n</code></pre>\n<p>Create a new Topic entity and persist it like so</p>\n<pre><code>public void copyTopic(String id, String new_id){\n    Topic topic = topicRepository.findById(id).get();\n    Topic topicCopy = new Topic(topic);\n    topicCopy.setId(new_id);\n    addTopic(topicCopy);\n}\n</code></pre>\n<p>My advice is to read up on the basics of Hibernate because there are a lot of pitfalls when using an ORM. It\'s never a good idea to start using one without understanding the very basics.</p>\n','2020-09-30 07:37:06',_binary '','2020-09-30 07:37:06',1,64132683),(64149771,'<p>If I understand the source code that is throwing the exception correctly, it\'s not the <code>Students</code> class that is having the transient reference, it IS the reference.</p>\n<p>This means you are probably also saving something else wich is referencing a <code>Students</code> instance, which needs saving.</p>\n','2020-10-01 05:51:23',_binary '\0','2020-10-01 05:51:23',0,64139406),(64159637,'<p>Try adding <code>@UnitOfWork</code> on your <code>findAll</code> method.</p>\n<p>See the <a href=\"https://www.dropwizard.io/en/stable/manual/hibernate.html\" rel=\"nofollow noreferrer\">documentation</a> for more information</p>\n','2020-10-01 16:31:49',_binary '\0','2020-10-01 16:31:49',0,64145053),(64167490,'<p>To use the DAO classes in Dropwizard, you can just use the <code>@UnitOfWork</code> annotation in Jersey resources, but elsewhere you need to additionally instantiate your class with <code>UnitOfWorkAwareProxyFactory</code>. It will create a proxy of your class, which will open a Hibernate session with a transaction around methods with the <code>@UnitOfWork</code> annotation. <a href=\"https://www.dropwizard.io/en/latest/manual/hibernate.html#transactional-resource-methods-outside-jersey-resources\" rel=\"nofollow noreferrer\">(Dropwizard documentation)</a></p>\n<p>One example is here: <a href=\"https://stackoverflow.com/questions/44000861/how-to-use-unitofworkawareproxyfactory-in-dropwizard-v1-1-0\">How to use UnitOfWorkAwareProxyFactory in Dropwizard v1.1.0</a></p>\n','2020-10-02 07:13:35',_binary '\0','2020-10-02 07:21:23',0,64145053),(64168025,'<p>You should do the loading and the storing in the same transaction, so whatever method calls load and store should be <code>@Transactional</code>.</p>\n<p>Lazy loading issues are usually solved by using a dedicated DTO model that fetches exactly what is needed. I wrote about some solutions and their pros and cons here:</p>\n<ul>\n<li><a href=\"https://blazebit.com/blog/2016/getting-started-with-blaze-persistence-entity-views.html\" rel=\"nofollow noreferrer\">https://blazebit.com/blog/2016/getting-started-with-blaze-persistence-entity-views.html</a></li>\n<li><a href=\"https://blazebit.com/blog/2017/entity-view-subview-as-rescue-for-lazyinitializationexception.html\" rel=\"nofollow noreferrer\">https://blazebit.com/blog/2017/entity-view-subview-as-rescue-for-lazyinitializationexception.html</a></li>\n</ul>\n<p>If you have two requests, then you have two options. Use EntityManager.merge in store to apply the state as-is to the DB or use EntityManager.find to load the existing data and apply the changed data onto that instance within the transaction of the store method.</p>\n','2020-10-02 07:56:00',_binary '','2020-10-08 07:41:40',0,64153716),(64168158,'<p>Have you tried the following?</p>\n<pre><code>        CriteriaUpdate&lt;Device&gt; deviceUpdate = userBuilder.createCriteriaUpdate(Device.class);\n        Root&lt;Device&gt; deviceUpdateRoot = deviceUpdate.from(Device.class);\n        \n        deviceUpdate.set(deviceUpdateRoot.get(&quot;dispalyName&quot;), &quot;DISPLAY12345&quot;); \n        deviceUpdate.set(deviceUpdateRoot.get(&quot;roomList&quot;).get(&quot;roomId&quot;), 2);\n    \n        deviceUpdate.where(userBuilder.equal(deviceUpdateRoot.get(&quot;deviceName&quot;), &quot;DEVICE2&quot;));\n        int returnValue = session.createQuery(deviceUpdate).executeUpdate();\n</code></pre>\n<p>or this?</p>\n<pre><code>        CriteriaUpdate&lt;Device&gt; deviceUpdate = userBuilder.createCriteriaUpdate(Device.class);\n        Root&lt;Device&gt; deviceUpdateRoot = deviceUpdate.from(Device.class);\n        \n        deviceUpdate.set(deviceUpdateRoot.get(&quot;dispalyName&quot;), &quot;DISPLAY12345&quot;); \n        deviceUpdate.set(deviceUpdateRoot.get(&quot;roomList&quot;), session.getReference(Room.class, 2));\n    \n        deviceUpdate.where(userBuilder.equal(deviceUpdateRoot.get(&quot;deviceName&quot;), &quot;DEVICE2&quot;));\n        int returnValue = session.createQuery(deviceUpdate).executeUpdate();\n</code></pre>\n','2020-10-02 08:06:34',_binary '','2020-10-02 08:06:34',1,64157624),(64193269,'<p>This might be a bug because this should depend on the cascading setting of the <code>Book#authors</code> association which might be ignored for a delete DML statement. You should log an issue with a reproducer <a href=\"https://hibernate.atlassian.net/\" rel=\"nofollow noreferrer\">https://hibernate.atlassian.net/</a></p>\n','2020-10-04 10:01:55',_binary '\0','2020-10-04 10:01:55',1,64177739),(64214889,'<ol>\n<li>Try to correct your named query in the following way:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>@NamedNativeQuery(\n  name = &quot;findInvoicesDto&quot;,\n  query = \n     &quot;SELECT &quot; +\n     &quot;  invoice.invoice_id AS invoiceId, &quot; +\n     &quot;  invoice.project_number AS projectNumber &quot; +\n     &quot;FROM invoice_tour &quot; +\n     &quot;WHERE invoice_tour.paid = :paid OR invoice_tour.invoice_number LIKE :invoiceNumber&quot;,\n  resultSetMapping = &quot;findInvoicesTourMapping&quot;\n)\n</code></pre>\n<ol start=\"2\">\n<li>Check your <code>@SqlResultSetMapping</code>. It should be like this:</li>\n</ol>\n<pre><code>@SqlResultSetMapping(name = &quot;findInvoicesTourMapping&quot;,\n   classes = @ConstructorResult(\n      targetClass=com.path.to.dto.invoice.InvoiceDto.class,\n      columns = {@ColumnResult(name=&quot;invoiceId&quot;),\n                 @ColumnResult(name=&quot;projectNumber&quot;),\n      }\n   )\n)\n</code></pre>\n<p>Pay attention that <code>@SqlResultSetMapping.name</code> equal to <code>@NamedNativeQuery.resultSetMapping</code>.</p>\n<ol start=\"3\">\n<li>You should pass <code>%</code> like this:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>@Service\n@Validated\npublic class InvoiceTourServiceImpl implements InvoiceTourService{\n    \n    private final InvoiceTourRepository repository;\n\n    // ...\n    \n    @Override\n    public List&lt;InvoiceDto&gt; findInvoices(String invoiceNumber, boolean paid) {\n        \n        return repository.findInvoices(&quot;%&quot; + invoiceNumber + &quot;%&quot;, paid);\n    }\n}\n</code></pre>\n','2020-10-05 19:20:35',_binary '','2020-10-05 19:20:35',1,64213541),(64215747,'<p>So, to summarize. I was able to get desired result thanks to SternK\'s answer and documentation. So the two following approaches gave me correct result:</p>\n<p>Approach 1:</p>\n<pre><code>                List&lt;InvoiceDto&gt; invoices = em.createNamedQuery(&quot;findInvoicesDto&quot; )\n                .setParameter(&quot;invoiceNumber&quot;, &quot;%&quot; + invoiceNumber + &quot;%&quot;)\n                .setParameter(&quot;paid&quot;, paid)\n                .getResultList();\n</code></pre>\n<p>The string <code>findInvoicesDto</code> has to match <code>@SqlResultSetMapping.name</code>.</p>\n<p>Approach 2:</p>\n<p>Is like in SternK\'s answer.</p>\n<p>Note: I didn\'t expect this syntax with <code>LIKE</code> and <code>%</code> operator in Hibernate. This reminds me of <code>PreparedStatements</code> and <code>JDBC</code> way of writing SQL queries, which I did in previous semester at school :) Maybe this is stupid quesion, but isn\'t this prone to SQL Injection to some extent?</p>\n','2020-10-05 20:27:06',_binary '\0','2020-10-05 20:27:06',0,64213541),(64238616,'<p>Why are you using SQL directly here? JPQL/HQL is perfectly capable to represent this kind of query. By avoiding the use of SQL, you can benefit from some of the abstractions Spring Data JPA provides i.e. you could remove all the named native query annotations on the entity and instead use the following on the repository:</p>\n<pre><code>@Query(&quot;FROM InvoiceTour t WHERE t.paid = :paid OR t.invoiceNumber LIKE \'%\' ||  :invoiceNumber&quot;)\nList&lt;InvoiceDto&gt; findInvoices(@Param(&quot;invoiceNumber&quot;) String invoiceNumber, @Param(&quot;paid&quot;) boolean paid);\n</code></pre>\n<p>You might also like what <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a> has to offer.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(InvoiceTour.class)\npublic interface InvoiceDto {\n    @IdMapping\n    Integer getInvoiceId();\n    String getProjectNumber();\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>InvoiceDto a = entityViewManager.find(entityManager, InvoiceDto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n<p>You could use the Spring Data naming convention to construct the query which would look roughly like this:</p>\n<pre><code>List&lt;InvoiceDto&gt; findByInvoiceNumberOrPaid(@Param(&quot;invoiceNumber&quot;) String invoiceNumber, @Param(&quot;paid&quot;) boolean paid);\n</code></pre>\n','2020-10-07 06:45:54',_binary '\0','2020-10-07 06:45:54',1,64213541),(64238077,'<p>When concatenating your strings, there is no space between different commands</p>\n<blockquote>\n<p>YOUR VERSION</p>\n</blockquote>\n<pre><code>&quot;SELECT&quot; +\n    &quot;Q1.ACCOUNT_NAME AS accountName,&quot; +\n    &quot;Q2.GROUP_NAME AS groupName&quot; +\n    &quot;FROM USERS_DEV Q1&quot; +\n    &quot;JOIN USERS_GROUPS Q2 ON Q1.ACCOUNT_NAME = Q2.ACCOUNT_NAME&quot; +\n    &quot;WHERE LOWER(Q1.ACCOUNT_NAME) = \'john.lenon\'&quot;,\n</code></pre>\n<p>So your SQL is &quot;glued&quot; together and doesn\'t form a correct SQL (e.g. <code>SELECTQ1.ACCOUNT_NAME ... AS groupNameFROM USERS_DEV Q1</code>)</p>\n<p><strong>HOW IT SHOULD BE</strong></p>\n<pre><code>&quot;SELECT&quot; +\n    &quot; Q1.ACCOUNT_NAME AS accountName,&quot; +\n    &quot; Q2.GROUP_NAME AS groupName&quot; +\n    &quot; FROM USERS_DEV Q1&quot; +\n    &quot; JOIN USERS_GROUPS Q2 ON Q1.ACCOUNT_NAME = Q2.ACCOUNT_NAME&quot; +\n    &quot; WHERE LOWER(Q1.ACCOUNT_NAME) = \'john.lenon\'&quot;,\n</code></pre>\n<p><strong>You need to add spaces in the end of each SQL line (or in the beginning, ofcourse).</strong></p>\n','2020-10-07 06:00:40',_binary '','2020-10-07 06:07:39',1,64238025),(64244184,'<p>Sounds that I found the answer :</p>\n<pre><code>return HibernateUtil.getCurrentSession()\n                .createQuery( &quot;SELECT o FROM &quot; + Organisation.class.getName() + &quot; o JOIN o.sousTraitants s WHERE s.id = :idDonneurDOrdre&quot;, Organisation.class ).setParameter( &quot;idDonneurDOrdre&quot;, idDonneurDOrdre ).getResultList();\n</code></pre>\n','2020-10-07 12:37:20',_binary '\0','2020-10-07 12:37:20',1,64243878),(64263969,'<p>You tried to create two rows with the same STUDENT_ID that is a PRIMARY KEY (that means it can\'t be the same on two rows and can\'t be NULL)</p>\n','2020-10-08 13:49:28',_binary '\0','2020-10-08 13:49:28',1,64263621),(64268252,'<p>You code is a little... peculiar, but is this line:</p>\n<pre><code>p.setC(dtoListOfCs, p);\n</code></pre>\n<p>overwriting <code>Parent.children</code> with a fresh collection?</p>\n<p>Hibernate doesn\'t like it when you override a collection property of a managed entity with a fresh collection when the mapping is annotated with <code>@OneToMany(orphanRemoval = true)</code>. You need to use the original list instead, adding/removing children, and clearing it, if necessary.</p>\n<p>(Note that the <code>Parent</code> entity returned from <code>session.merge()</code> will already have an empty collection created by Hibernate, even if it was <code>null</code> before the merge. You\'re supposed to use that one)</p>\n','2020-10-08 18:03:15',_binary '','2020-10-08 18:24:14',0,64267757),(64278467,'<p>When unhandled bidirectional relationship occurs, Jackson faces infinite recursion.</p>\n<blockquote>\n<p>I tried to use @JsonIgnore, @JsonManagedReference and @JsonBackReference on the Written class</p>\n</blockquote>\n<p>You need to use <code>@JsonManagedReference</code> and <code>@JsonBackReference</code> annotations <em>separately</em> to prevent these cycles between <code>Book</code> and <code>Written</code>. A side note, <code>transient</code> has nothing to do with the persistence but the serialization. JPA works with the <code>@Transient</code> annotation.</p>\n<pre><code>public class Book implements Serializable {\n\n    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL)\n    @JsonBackReference\n    private Set&lt;Written&gt; written= new HashSet&lt;&gt;();\n\n    ...\n}\n</code></pre>\n<pre><code>public class Written implements Serializable {\n\n    @Id\n    @ManyToOne\n    @JoinColumn(name = &quot;idBook&quot;)\n    @JsonManagedReference\n    private Book book;\n\n    ...\n}\n</code></pre>\n<p><strong>Important:</strong> Don\'t send database entities through REST (probably what you are up to do). Better create a DAO object <em>without bidirectional relationship</em> and map entities into DAOs. There are several libraries able to do that: I highly recommend <a href=\"https://mapstruct.org/\" rel=\"nofollow noreferrer\">MapStruct</a>, however <a href=\"http://modelmapper.org/\" rel=\"nofollow noreferrer\">ModelMapper</a> is also an option. If there is a lower number of such entities, using constructors/getters/setters would be enough.</p>\n','2020-10-09 10:44:35',_binary '','2020-10-09 10:49:35',1,64278070),(64291224,'<p>The problem is most probably that you didn\'t implement equals/hashCode for <code>Category</code> so adding it to the set will add a duplicate which is then tried to be persisted.</p>\n','2020-10-10 07:52:28',_binary '\0','2020-10-10 07:52:28',0,64285128),(64524088,'<p>(edited) SOLVED:</p>\n<p>found actual answer and solution:</p>\n<p><a href=\"https://stackoverflow.com/a/59067006/12826439\">https://stackoverflow.com/a/59067006/12826439</a></p>\n<p>needed not to pass user from controller, but to get user by its id from repository.</p>\n','2020-10-25 13:13:53',_binary '','2020-11-04 17:43:23',1,64285128),(64300517,'<p>This issue could be caused by the database server being down or not accessible. Please check if the database server is running.</p>\n<p>More detailed answers are available <a href=\"https://stackoverflow.com/questions/26548505/org-hibernate-hibernateexception-access-to-dialectresolutioninfo-cannot-be-null\">here</a></p>\n','2020-10-11 04:10:50',_binary '','2020-10-11 04:10:50',0,64299029),(64312552,'<p>You have <code>cascade = {CascadeType.ALL }</code> on your <code>Tag</code> class but not on your <code>Ads</code> class, if you want to save your <code>Ads</code> object and cascade save the <code>Tag</code> objects in it, then you need the annotation on the field of your <code>Ads</code> class. Otherwise save the <code>Tag</code> object instead of the <code>Ads</code> object.</p>\n','2020-10-12 06:13:33',_binary '','2020-10-12 06:13:33',2,64309202),(64348802,'<p>The truth is that I have never encountered a similar problem, the logical thing, and a good practice would be to change the name of the property to differentiate which entity each one refers to, the compiler will tell you where to change it.</p>\n<p>You could try indicating the child class in the relation as follows:</p>\n<pre><code>mappedBy = &quot;tree&quot;, targetEntity = RedAppleTree.class\n</code></pre>\n<p>But I reiterate, the best option would be to change the name of the property, even if it involves more work.</p>\n','2020-10-14 07:47:36',_binary '\0','2020-10-14 07:47:36',0,64347162),(64502143,'<p>It is a problem to duplicate your &quot;tree&quot; property in both your superclass and your subclass. I believe that this example here will do what you want.</p>\n<p>Tree.java</p>\n<pre><code>@Entity\n@Table(name = &quot;tree&quot;)\n@DiscriminatorColumn(name = &quot;colour&quot;)\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\npublic abstract class Tree&lt;APPLE extends Apple&gt; {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = &quot;tree&quot;, targetEntity = Apple.class)\n    private Set&lt;APPLE&gt; apples = Sets.newHashSet();\n\n    //... getters &amp; setters\n}\n</code></pre>\n<p>Apple.java</p>\n<pre><code>@Table(name = &quot;apple&quot;)\n@Entity\n@DiscriminatorColumn(name = &quot;colour&quot;)\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\npublic abstract class Apple&lt;TREE extends Tree&gt; {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @JoinColumn(name = &quot;tree_id&quot;)\n    @ManyToOne(targetEntity = Tree.class)\n    private TREE tree;\n\n}\n</code></pre>\n<p>RedAppleTree.java</p>\n<pre><code>@Entity\n@Table(name = &quot;tree&quot;)\n@DiscriminatorColumn(name = &quot;colour&quot;)\n@DiscriminatorValue(&quot;RED&quot;)\npublic class RedAppleTree extends Tree&lt;RedApple&gt; {\n}\n</code></pre>\n<p>RedApple.java</p>\n<pre><code>@Entity\n@Table(name = &quot;apple&quot;)\n@DiscriminatorColumn(name = &quot;colour&quot;)\n@DiscriminatorValue(&quot;RED&quot;)\npublic class RedApple extends Apple&lt;RedAppleTree&gt; {\n}\n</code></pre>\n<p>This creates the following DB tables</p>\n<pre><code>create table tree (\n   colour varchar(31) not null,\n    id bigint generated by default as identity (start with 1),\n    primary key (id)\n);\ncreate table apple (\n   colour varchar(31) not null,\n    id bigint generated by default as identity (start with 1),\n    tree_id bigint,\n    primary key (id)\n)\n</code></pre>\n<p>Then, when I run the following code</p>\n<pre><code>@Test\npublic void test() {\n\n    RedAppleTree tree = new RedAppleTree();\n    session.persist(tree);\n\n    GreenAppleTree greenTree = new GreenAppleTree();\n    session.persist(greenTree);\n\n    RedApple apple = new RedApple();\n    apple.setTree(tree);\n    session.persist(apple);\n\n    tree.getApples().add(apple);\n    session.flush();\n    session.clear();\n    \n    tree = session.get(RedAppleTree.class, tree.getId());\n\n    System.err.println(session.createCriteria(RedAppleTree.class).list());\n}\n</code></pre>\n<p>This results in the following SQL (ran with hibernate-sql-logging enabled)</p>\n<pre><code>Hibernate: \ninsert \ninto\n    tree\n    (id, version, colour) \nvalues\n    (default, ?, \'RED\')\nHibernate: \ninsert \ninto\n    tree\n    (id, version, colour) \nvalues\n    (default, ?, \'GREEN\')\nHibernate: \ninsert \ninto\n    apple\n    (id, version, tree_id, colour) \nvalues\n    (default, ?, ?, \'RED\')\nHibernate: \nselect\n    redappletr0_.id as id2_409_0_,\n    redappletr0_.version as version3_409_0_ \nfrom\n    tree redappletr0_ \nwhere\n    redappletr0_.id=? \n    and redappletr0_.colour=\'RED\'\nHibernate: \nselect\n    this_.id as id2_409_0_,\n    this_.version as version3_409_0_ \nfrom\n    tree this_ \nwhere\n    this_.colour=\'RED\'\n</code></pre>\n<p>I believe that this ought to solve your basic problem.</p>\n','2020-10-23 14:41:36',_binary '','2020-10-29 07:21:07',1,64347162),(64373561,'<p>You don\'t need to pass the table name as parameter.</p>\n<p>When you define your model, in that file you say what is the table name:\n<a href=\"https://i.stack.imgur.com/n9tgz.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/n9tgz.png\" alt=\"\" /></a></p>\n<p>In my case my model is called <em>Call</em> and the table name is called <em>calls</em>.</p>\n<p>Create a repository like that :\n<a href=\"https://i.stack.imgur.com/UN6J2.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/UN6J2.png\" alt=\"enter image description here\" /></a></p>\n<p>The repository already have some default &quot;queries&quot; you can use, if you want to do findById, you just need to call it and pass the ID.</p>\n<p><a href=\"https://i.stack.imgur.com/JXenf.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/JXenf.png\" alt=\"enter image description here\" /></a></p>\n','2020-10-15 14:16:10',_binary '\0','2020-10-15 14:16:10',0,64373271),(64496646,'<p>I resolved my problem. I forgot a CascadeType.ALL in Email.java.</p>\n','2020-10-23 08:34:48',_binary '','2020-10-23 08:34:48',0,64374289),(64388683,'<p>In your <code>Comment</code> class, Change this line:</p>\n<pre><code>@JoinColumn(name = &quot;postId&quot;, referencedColumnName = &quot;postId&quot;)\n</code></pre>\n<p>To this one</p>\n<pre><code>@JoinColumn(name = &quot;postId&quot;, referencedColumnName = &quot;id&quot;)\n</code></pre>\n','2020-10-16 11:53:17',_binary '\0','2020-10-16 11:53:17',1,64388225),(64389647,'<p>Your reference column name caused the problem in your code,\nin comment class the annotation join column should be modified.\nChange the referenced column name to id as in the class post you have mentioned it as id.</p>\n','2020-10-16 12:57:29',_binary '','2020-10-16 12:57:29',1,64388225),(64451273,'<p>You never tell Hibernate about your entity models. There are several ways to do this. You can do this via XML, the <code>Configuration</code> object or the <code>Session</code> object.</p>\n<p>Check this for more <a href=\"https://stackoverflow.com/questions/23214454/org-hibernate-mappingexception-unknown-entity-annotations-users\">org.hibernate.MappingException: Unknown entity: annotations.Users</a></p>\n','2020-10-20 18:28:20',_binary '\0','2020-10-20 18:28:20',0,64451218),(64452224,'<p>As it stated in the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#appendix-legacy-bootstrap\" rel=\"nofollow noreferrer\">documentation</a> the <code>Configuration</code> is semi-deprecated:</p>\n<blockquote>\n<p><code>Configuration</code> is semi-deprecated but still available for use, in a limited form that eliminates these drawbacks. &quot;Under the covers&quot;, <code>Configuration</code> uses the new bootstrapping code, so the things available there are also available here in terms of auto-discovery.</p>\n</blockquote>\n<ol>\n<li>You can use new <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#bootstrap-native\" rel=\"nofollow noreferrer\">native bootstrapping api</a> in the following way:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>StandardServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()\n    .loadProperties(&quot;hibernate.properties&quot;)\n    .build();\nMetadataSources metadata = new MetadataSources(serviceRegistry);\nmetadata.addAnnotatedClass(UserCommands.class);\n// ...\nMetadata meta = metadata.buildMetadata();\nSessionFactory sessionFactory = meta.buildSessionFactory();\n</code></pre>\n<ol start=\"2\">\n<li>You can use <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#bootstrap-jpa\" rel=\"nofollow noreferrer\">jpa bootstrapping</a> in the following way:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>HibernatePersistenceProvider provider = new HibernatePersistenceProvider();\nEntityManagerFactory emFactory = provider.createEntityManagerFactory(&quot;CRM&quot;, null);\n\nEntityManager em = emFactory.createEntityManager();\n// ...\n</code></pre>\n<p>This assumes that you have <code>META-INF</code> folder in your class path and this folder contains the <code>persistence.xml</code> file like the following:</p>\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;persistence xmlns=&quot;http://xmlns.jcp.org/xml/ns/persistence&quot;\n             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n             xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/persistence\n             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd&quot;\n             version=&quot;2.1&quot;&gt;\n\n    &lt;persistence-unit name=&quot;CRM&quot;&gt;\n        &lt;description&gt;Persistence unit for Hibernate User Guide&lt;/description&gt;\n        &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;\n\n\n        &lt;properties&gt;\n            &lt;property name=&quot;javax.persistence.jdbc.driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;\n            &lt;property name=&quot;javax.persistence.jdbc.url&quot; value=&quot;jdbc:mysql://URL&quot; /&gt;\n            &lt;property name=&quot;javax.persistence.jdbc.user&quot; value=&quot;USERNAME&quot; /&gt;\n            &lt;property name=&quot;javax.persistence.jdbc.password&quot; value=&quot;PASSWORD&quot; /&gt;\n            \n            &lt;property name=&quot;hibernate.default_schema&quot; value=&quot;TEST_SCHEMA&quot; /&gt;\n            \n            &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.MySQLDialect&quot; /&gt;\n            \n            &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot; /&gt;\n            &lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot; /&gt;\n            &lt;property name=&quot;hibernate.use_sql_comments&quot; value=&quot;true&quot; /&gt;\n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre>\n<p>In this case you should not manually list all your entities hibernate will pick up them automatically if they lies in the same jar with <code>persistence.xml</code> file.</p>\n','2020-10-20 19:38:03',_binary '','2020-10-20 19:53:16',0,64451218),(64466968,'<p>Entity should be specified without package</p>\n<pre><code>String sql = &quot;SELECT a FROM PPA a ...\n</code></pre>\n','2020-10-21 15:33:13',_binary '\0','2020-10-21 15:33:13',0,64453569),(65005910,'<p>It seems I fixed the first kind of error (using <code>@EntityScan</code>, when there is</p>\n<blockquote>\n<p>Cannot invoke &quot;java.lang.reflect.AccessibleObject.setAccessible(boolean) because &quot;ao&quot; is null&quot;</p>\n</blockquote>\n<p>by replacing hibernate\'s bytecode provider from javassist to bytebuddy (placed <code>hibernate.bytecode.provider=bytebuddy</code> property to <code>hibernate.properties</code> file).</p>\n','2020-11-25 13:43:04',_binary '\0','2020-11-25 16:34:05',0,64457496),(65422258,'<p>by using the latest javassit on my openjdk15 solved the issue\nI added this</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.javassist&lt;/groupId&gt;\n    &lt;artifactId&gt;javassist&lt;/artifactId&gt;\n    &lt;version&gt;3.27.0-GA&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>maven dependency in my pom.xml</p>\n','2020-12-23 09:54:09',_binary '\0','2020-12-23 09:54:09',7,64457496),(68357144,'<p>Adding @EntityScan(basePackages = &quot;io.summer&quot;) to your Application class. That is needed for hibernate to scan your entities. (Worked for me, for postgresql)</p>\n','2021-07-13 05:55:31',_binary '\0','2021-07-13 05:55:31',0,64457496),(64478413,'<p>You need a class that implements Serializable and use that class in <code>@IdClass</code>.</p>\n<p>Having said that, I would suggest you use an embedded id instead as id class is buggy in certain cases. The embeddable class can then implement serializable.</p>\n<pre><code>@Embeddable\npublic class AuthorityId implements Serializable {\n    \n    @Column(name=&quot;email&quot;)\n    private String email;\n    \n    @Column(name=&quot;authority&quot;)\n    private String authority;\n\n    // equals/hashCode based on all data(email and authority)\n}\n\n@Entity\n@Table(name=&quot;authorities&quot;)\npublic class Authority {    \n\n    @EmbeddedId\n    private AuthorityId id;\n\n    @ManyToOne(cascade= {CascadeType.PERSIST, CascadeType.MERGE,\n            CascadeType.DETACH, CascadeType.REFRESH})\n    @JoinColumn(name=&quot;email&quot;, insertable = false, updatable = false)\n    private User user;\n\n    // You actually don\'t need that, just use id.getEmail()\n    @Column(name=&quot;email&quot;, insertable = false, updatable = false)\n    private String email;\n\n    // You actually don\'t need that, just use id.getAuthority()\n    @Column(name=&quot;authority&quot;, insertable = false, updatable = false)\n    private String authority;\n\n    // equals/hashCode based on id\n}\n</code></pre>\n','2020-10-22 08:38:53',_binary '','2020-10-26 08:44:24',1,64470673),(64475887,'<p>I wonder if your request is being handled by the same exception handler.</p>\n<p>You have set the user message to the &quot;Data issue&quot; but whereas your output response is showing it as null.</p>\n<pre><code>apiError.setUserMessage(&quot;Data issue:&quot; + ex.getMessage());\n\n\n//based on your code it should have at least &quot;Data issue:&quot;\n&quot;userMessage&quot;: null,\n</code></pre>\n<p>Please make sure to validate the code you have posted is being invoked as part of this request. Certainly, you can add a log message to confirm the same. If you are able to replicate the issue on local then you can keep a breakpoint and confirm if the same exception handler is invoked.</p>\n','2020-10-22 05:35:10',_binary '\0','2020-10-22 05:35:10',0,64472722),(65204266,'<p>You can avoid the entity not found error by inner joining in the query. Below example uses native query format. This is more of a workaround solution, but it was sufficient to resolve my issue for my situation. I am marking as answer for now.</p>\n<pre><code>select pe.* from PARENT_ENTITY pe \ninner join CHILD_ENTITY ce on pe.CHILD_KEY = ce.rowid_org_cust\n</code></pre>\n','2020-12-08 17:56:28',_binary '','2020-12-08 18:11:06',0,64472722),(64525857,'<p>The error is clear:</p>\n<p>&quot;SQLDataException: data exception: string data, right truncation;  table: PARTICIPANTS column: OID&quot;</p>\n<p>the problem is in the OID column in the table Participants (the string you are trying to insert is truncated for some reason) and it could be related to what said by jamie:</p>\n<p><a href=\"https://stackoverflow.com/a/53182256/13745944\">https://stackoverflow.com/a/53182256/13745944</a></p>\n','2020-10-25 16:08:46',_binary '\0','2020-10-25 16:15:34',1,64525255),(64647014,'<p>Change:</p>\n<pre><code>@Id @Hidden @Column(length = 3)\n@GeneratedValue(generator=&quot;system-uuid&quot;) @GenericGenerator(name=&quot;system-uuid&quot;, strategy=&quot;uuid&quot;)\nprivate String oid;\n</code></pre>\n<p>By:</p>\n<pre><code>@Id @Hidden @Column(length = 32)\n@GeneratedValue(generator=&quot;system-uuid&quot;) @GenericGenerator(name=&quot;system-uuid&quot;, strategy=&quot;uuid&quot;)\nprivate String oid;\n</code></pre>\n<p>Note @Column(length = 32) instead of @Column(length = 3). Also you have to drop your tables in order OpenXava generates them again, of if they already have data just do a ALTER TABLE to change the column length for OID column.</p>\n','2020-11-02 14:02:52',_binary '','2020-11-02 14:02:52',1,64525255),(64572440,'<p>I think what James Gawron meant is, have you tried this?</p>\n<pre><code>@JoinColumns({\n    @JoinColumn(name = &quot;ADDRESS_ID&quot;, referencedColumnName = &quot;CUSTOMER_ID&quot;, insertable = false, updatable = false),\n    @JoinColumn(name = &quot;ADDRESS_KEY&quot;, referencedColumnName = &quot;CUSTOMER_KEY&quot;, insertable = false, updatable = false)\n})\n</code></pre>\n','2020-10-28 12:00:45',_binary '\0','2020-10-28 12:00:45',0,64537721),(64545817,'<p>I would suggest splitting the table into two separate entities and defining a <code>lazy OneToOne</code> relationship and so that you can fetch it eagerly via <code>QueryDSL</code> when required. So for your example you might have following entities:</p>\n<pre><code>@Entity\n@Table(name=&quot;version&quot;)\nclass Version{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private val id = 0;\n    @OneToOne(optional = false, fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;id&quot;, referencedColumnName = &quot;id&quot;)\n    private VersionMappings mappings;\n}\n\n@Entity\n@Table(name=&quot;version&quot;)\nVersionMappings{\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private val id = 0;\n    @Basic(fetch = FetchType.LAZY)\n    @Type(type = &quot;text&quot;)\n    var mappings: String? = null);\n}\n</code></pre>\n<p>sorry if the syntax is wrong; since I am not familiar with <code>Kotlin</code>. Then you can have eager fetching as follows:</p>\n<pre><code>    QVersion version = QVersion.version;\n\n    Version versionWithEagerlyFetchedMapping = JPAQuery&lt;&gt;(entityManager).from(version).where(version.id.eq(id)).rightJoin(version.versionMapping).fetchJoin().select(version).fetchOne();\n</code></pre>\n<p>I prepared following <a href=\"https://github.com/feanor07/table-split-to-two-entities\" rel=\"nofollow noreferrer\">github repo</a> to demonstrate my suggestion in action. The repo is a Spring Boot Application with 3 separate endpoints:</p>\n<ol>\n<li><code>/books-without-author/{id}</code> ==&gt; Gets the book without author</li>\n<li><code>/books-with-author-exception/{id}</code> ==&gt; Tries to get the book with author but throws exception due to transaction not available to load the proxy</li>\n<li><code>/books-with-author/{id}</code> ==&gt; Gets the book with author via <code>QueryDSL</code> eager fetching as per my suggestion above.</li>\n</ol>\n<p>You can check the console logs to see the eager fetching works. When you call the third endpoint above you will see the following query generated:\n<code>select book0_.id as id1_0_0_, bookauthor1_.id as id1_0_1_, book0_.name as name2_0_0_, book0_.publish_year as publish_3_0_0_, book0_.version as version4_0_0_, bookauthor1_.author as author5_0_1_ from book book0_ right outer join book bookauthor1_ on book0_.id=bookauthor1_.id where book0_.id=?</code></p>\n<p>On the other hand, the first endpoint will generate a query like <code>select book0_.id as id1_0_0_, book0_.name as name2_0_0_, book0_.publish_year as publish_3_0_0_, book0_.version as version4_0_0_ from book book0_ where book0_.id=?</code></p>\n','2020-10-26 22:26:16',_binary '\0','2021-09-03 11:34:08',0,64539872),(64562768,'<p>There is a very simple solution for this: <code>.fetchAll()</code></p>\n<pre><code>JPAQuery&lt;Any&gt;(entityManager).from(QVersion.version)\n        .fetchAll()  // &lt;- here\n        .where(...)\n        .select(QVersion.version)\n        .fetchOne()\n</code></pre>\n<p>Related <a href=\"https://docs.jboss.org/hibernate/orm/4.2/manual/en-US/html/ch16.html#queryhql-joins\" rel=\"nofollow noreferrer\">hibernate documentation</a>:</p>\n<blockquote>\n<p>If you are using property-level lazy fetching (with bytecode instrumentation), it is possible to force Hibernate to fetch the lazy properties in the first query immediately using fetch all properties.</p>\n</blockquote>\n','2020-10-27 20:56:05',_binary '','2020-10-27 20:56:05',0,64539872),(64561457,'<p>The following mapping is worked for me:</p>\n<pre><code>@Entity\n@Table(name = &quot;authorities&quot;)\npublic class Authority\n{\n   private AuthorityId id;\n   private User user;\n   \n   public Authority()\n   {\n   }\n\n   public Authority(String email, String authority)\n   {\n      this.id = new AuthorityId();\n      this.id.setEmail(email);\n      this.id.setAuthority(authority);\n   }\n   \n   @EmbeddedId\n   public AuthorityId getId()\n   {\n      return id;\n   }\n   public void setId(AuthorityId id)\n   {\n      this.id = id;\n   }\n\n   @ManyToOne\n   @JoinColumn(name = &quot;member_email&quot;, referencedColumnName = &quot;email&quot;, insertable = false, updatable = false)\n   public User getUser()\n   {\n      return user;\n   }\n   public void setUser(User user)\n   {\n      this.user = user;\n   }\n}\n\n@Embeddable\npublic class AuthorityId implements Serializable\n{\n   private String email;\n   private String authority;\n   \n   public AuthorityId()\n   {\n   }\n\n   @Column(name = &quot;member_email&quot;)\n   public String getEmail()\n   {\n      return email;\n   }\n   public void setEmail(String email)\n   {\n      this.email = email;\n   }\n\n   @Column(name = &quot;authority&quot;)\n   public String getAuthority()\n   {\n      return authority;\n   }\n   public void setAuthority(String authority)\n   {\n      this.authority = authority;\n   }\n\n   // equals and hashCode\n}\n\n@Entity\n@Table(name = &quot;users&quot;)\npublic class User implements Serializable\n{\n   private Integer id;\n   private String name;\n   private String email;\n   private List&lt;Authority&gt; authorities;\n   \n   public User()\n   {\n      authorities = new ArrayList&lt;&gt;();\n   }\n\n   @Id\n   @GeneratedValue(strategy = GenerationType.IDENTITY)\n   @Column(name = &quot;id&quot;)\n   public Integer getId()\n   {\n      return id;\n   }\n   public void setId(Integer id)\n   {\n      this.id = id;\n   }\n\n   @NaturalId\n   @Column(name = &quot;email&quot;)\n   public String getEmail()\n   {\n      return email;\n   }\n   public void setEmail(String email)\n   {\n      this.email = email;\n   }\n\n   @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL)\n   public List&lt;Authority&gt; getAuthorities()\n   {\n      return authorities;\n   }\n   public void setAuthorities(List&lt;Authority&gt; authorities)\n   {\n      this.authorities = authorities;\n   }\n   \n   public void addAuthority(Authority auth)\n   {\n      authorities.add(auth);\n      auth.setUser(this);\n   }\n}\n</code></pre>\n<p>and simple persist action:</p>\n<pre class=\"lang-java prettyprint-override\"><code>String email = &quot;emeil2@gmail.com&quot;;\n\nUser user = new User();\nuser.setEmail(email);\n     \nAuthority auth1 = new Authority(email, &quot;auth2&quot;);\nAuthority auth2 = new Authority(email, &quot;auth3&quot;);\nAuthority auth3 = new Authority(email, &quot;auth4&quot;);\n      \nuser.addAuthority(auth1);\nuser.addAuthority(auth2);\nuser.addAuthority(auth3);\n      \nem.persist(user);\n</code></pre>\n<p>will generate the following sql queries:</p>\n<pre><code>/* insert com.my.hibernate.entities.User */\ninsert into TEST_SCHEMA.USERS (email) \nvalues (?)\n\n/* insert com.sternkn.hibernate.entities.Authority */\ninsert into TEST_SCHEMA.AUTHORITIES (authority, member_email)\nvalues (?, ?)\n\n/* insert com.sternkn.hibernate.entities.Authority */\ninsert into TEST_SCHEMA.AUTHORITIES (authority, member_email)\nvalues (?, ?)\n\n/* insert com.sternkn.hibernate.entities.Authority */\ninsert into TEST_SCHEMA.AUTHORITIES (authority, member_email)\nvalues (?, ?)\n</code></pre>\n<p>It was tested with hibernate 5.4.10.Final</p>\n','2020-10-27 19:16:47',_binary '\0','2020-10-28 19:33:17',0,64549540),(64555698,'<p>Update hibernate.properties and add serverTimeZone property in JDBC connection string directly..</p>\n<pre><code>hibernate.connection.url=jdbc:mysql://localhost:3306/ifinances?serverTimezone=UTC \n</code></pre>\n','2020-10-27 13:37:56',_binary '\0','2020-10-27 13:37:56',1,64555370),(64564281,'<p>I have another problem with this project.</p>\n<p>Exception in thread &quot;main&quot; org.hibernate.MappingException: Unknown entity: com.infiniteskills.data.entities.User</p>\n<p>I added above a code from User.java</p>\n','2020-10-27 23:15:21',_binary '\0','2020-10-27 23:15:21',0,64555370),(64568522,'<p>Annotations such as @OneToOne, @ManyToOne or @OneToMany or @ManyToMany are used to express association between two entities. You applied a @OneToOne to a field of type String and that\'s not a correct mapping, JPA complaints about that.</p>\n','2020-10-28 07:50:21',_binary '\0','2020-10-28 07:50:21',0,64567167),(64624517,'<p>You should adjust your query in your repository so that it eager fetches <code>invitations</code>, this will solve both the exception and improve performance by avoiding the &quot;N+1 Query&quot; issue of lazy-loaded relationships.</p>\n<p>This is what is done in <code>UserRepository</code> using <code>@EntityGraph</code> annotation on <code>findOneWithAuthoritiesByLogin()</code> but it could be done in many different ways</p>\n','2020-10-31 17:21:24',_binary '','2020-10-31 22:24:27',1,64622906),(64634271,'<p>The exception shows that when you try to save User it saves null as facilityId.</p>\n<p>To make this work you need to specify the Facility as another table in User entity (you did it wrong way).</p>\n<pre><code>@Entity\n@Table(name= &quot;user_detail&quot;)\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    private Integer id;\n    private String username;\n    @Column (name=&quot;contactNo&quot;)\n    private String contactNo;\n\n    @OneToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = &quot;facilityId&quot;, referencedColumnName = &quot;id&quot;)\n    private Facility facility;\n    \n    //getter and setter\n}\n</code></pre>\n<p>Based on your requirement you need to specify the relationship. It seems here that the relationship should be one to one so I marked it as such.</p>\n','2020-11-01 16:37:58',_binary '','2020-11-01 16:37:58',2,64634166),(64634499,'<p>You should use <code>@MapsId</code> <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-derived\" rel=\"nofollow noreferrer\">annotation</a> here to borrow the identifier from a many-to-one or one-to-one association.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name= &quot;user_detail&quot;)\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    private Integer id;\n    \n    @OneToOne(cascade = CascadeType.ALL)\n    @MapsId\n    private Facility facility;\n\n    //getter and setter\n}\n</code></pre>\n','2020-11-01 16:58:07',_binary '\0','2020-11-01 16:58:07',1,64634166),(64642238,'<p>Your composite key of <code>A</code></p>\n<pre><code>public class KeyA implements Serializable {\n\n    private String aId;\n    private String b;\n}\n</code></pre>\n<p>is structured as if <code>B</code> would have only a single string ID (here referred to as <code>b</code>) while in reality it has a composite key itself</p>\n<pre><code>public class KeyB implements Serializable{\n\n    public String bId;\n    public String bId2;\n}\n</code></pre>\n<p>so you have to change <code>KeyA</code> to represent that relationship correctly:</p>\n<pre><code>public class KeyA implements Serializable {\n\n    private String aId;\n    private KeyB keyB;\n}\n</code></pre>\n','2020-11-02 08:39:56',_binary '\0','2020-11-02 08:39:56',2,64639279),(64642297,'<p>You should use in your <code>KeyA</code> exactly the same fields name/types as marked in the owned entity as <code>@Id</code>.</p>\n<p>So, you should correct <code>KeyA</code> in the following way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class KeyA implements Serializable {\n\n    private String aId;\n    private B b;\n}\n</code></pre>\n<p>See further explanation and examples in the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-nonaggregated\" rel=\"nofollow noreferrer\">documentation</a>.</p>\n','2020-11-02 08:44:49',_binary '','2020-11-02 11:42:53',1,64639279),(64671019,'<p>Not sure what types you are exactly using here, but at least <code>DateTime</code> is not a standard type that is supported by Hibernate. If Hibernate does not know about a type, it tries to flush the value in its serialized form as blob/byte[]. If you would use <code>java.sql.Timestamp</code>, <code>java.util.Calendar</code> or any other type that is supported by Hibernate out of the box, this should work properly.</p>\n','2020-11-03 21:32:55',_binary '','2020-11-03 21:32:55',1,64642697),(64668209,'<p>All,</p>\n<p>After analyzation of the problem, we saw two options:</p>\n<ul>\n<li>Adding a surrogate/artificial key (auto generated) and store the link via this number. Due to the nature of our db, it would result in columns with an article number, columns with a number that points to the next article number etc. No ideal for a maintenance/db point of view.</li>\n<li>Adding 2 additional columns to store the next_store_id and previous_store_id to link the field correctly. However, then I could put an article next to an article of another store, and i have additional columns with a copy in date (a constraint would be put on them to be the same or null)</li>\n</ul>\n<p>By sheer luck I stumbled upon a third solution:\nJust adding an additional @Column annotated field for the nextId and previousId. Actually a clean &quot;Hack&quot;</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = STORES)\npublic final class StoreSequence {\n\n    @EmbeddedId\n    @Column(name = STORE_NUMBER)\n    private Long storeNumber;\n\n    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)\n    @JoinColumn(name = STORE_NUMBER, referencedColumnName= STORE_NUMBER, nullable = false, insertable = false, updatable = false)\n    private Set&lt;Article&gt; articles;\n}\n\n@Entity\n@Table(name = ARTICLES)\nclass Article {\n \n    @EmbeddedId\n    private ArticleInStore id; //CONTAINING STORE AND ARTICLE_ID\n\n    @OneToOne(cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = PREVIOUS_ARTICLE_ID, referencedColumnName = ARTICLE_ID, insertable = false, updatable = false),\n            @JoinColumn(name = STORE_ID, referencedColumnName = STORE_ID, insertable = false, updatable = false)\n    })\n    //NOTICE THE SETTER IS CUSTOM NOW\n    //CANNOT MAKE WRITABLE SINCE THEN WE NEED PREVIOUS_STORE_ID COLUMN.\n    private Article previous;\n\n    @OneToOne(cascade = CascadeType.ALL)\n    @JoinColumns({\n            @JoinColumn(name = NEXT_ARTICLE_ID, referencedColumnName = ARTICLE_ID, insertable = false, updatable = false),\n            @JoinColumn(name = STORE_ID, referencedColumnName = STORE_ID, insertable = false, updatable = false)\n    })\n    @JoinColumn(name = NEXT_ARTICLE_ID, referencedColumnName = ARTICLE_ID)\n    //NOTICE THE SETTER IS CUSTOM NOW\n    //CANNOT MAKE WRITABLE SINCE THEN WE NEED NEXT_STORE_ID COLUMN.\n    private Article next;\n\n    /***********/\n    /* THE FIX */\n    /***********/\n    \n    //ADDED FIELD\n    @Column(name = NEXT_ARTICLE_ID)\n    private Long nextArticleId\n\n    //ADDED FIELD\n    @Column(name = PREVIOUS_ARTICLE_ID)\n    private Long previousArticleId\n\n    //CUSTOM SETTER\n    public void setNextArticle(Article nextArticle) {\n        this.next = nextArticle;\n        this.nextArticleId = nextArticle.getId().getArticleId();\n    }\n\n    //CUSTOM SETTER\n    public void setPreviousArticle(Article previousArticle) {\n        this.previous = previousArticle;\n        this.previousArticleId = previousArticle.getId().getArticleId();\n    }\n\n}\n</code></pre>\n<h2>CONCLUSION</h2>\n<p>We use the id fields to set the articleId link on db, and the object fields to use in the code (getting already worked before as mentioned but not insertable/updateable). Insertable/updatable = false will not add these fields to the resulting query for update/insert, but will add it for select. Adding the column will add that field to the query. Correctly setting the id\'s whenever the next field is updated will make sure that they get written to db.</p>\n<h3>REMARK</h3>\n<p>We were also very (gladly) surprised to see that the queries are optimised for the @OneToOne without an n+x select problem. We solved filling our articles list in StoreSequence by a custom getter/setter with @Access(Access.Property) filling a transient custom SortingCapable list object. So basically the concept of a LinkedList but persistable to db with quite good query performance, which does the sorting of the persisted set (by reference). So when adding an article between two articles, only updates are sent for the surrounding articles, not sending an update with an order for every further articles in the list.</p>\n','2020-11-03 18:08:06',_binary '','2020-11-03 18:08:06',0,64654781),(64667583,'<p>The column in the database is created as <code>varchar</code> when it should be <code>uuid</code>.</p>\n','2020-11-03 17:23:22',_binary '','2020-11-03 17:23:22',1,64662425),(64693511,'<p>Not sure why you get this <code>No Dialect mapping for JDBC type: 2002</code> error. Could you post the whole stacktrace please? This usually suggests that you use a SQL type for which no matching Hibernate type is regsitered in the dialect. The type code 2002 refers to <code>STRUCT</code> types, but the model you posted does not contain any exotic types. I guess <code>VehicleModel</code> has some other attributes which use a type that isn\'t registered properly. Could you show the full mapping of <code>VehicleModel</code>?</p>\n<p>You might also like what <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a> has to offer.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(VehicleBrand.class)\npublic interface VehicleBrandModelDto {\n    @IdMapping\n    Long getId();\n    String getName();\n    // Use this if you have an inverse one-to-many\n    @Mapping(&quot;models&quot;)\n    // Otherwise you can also do ad-hoc joins\n    // @Mapping(&quot;VehicleModel[brand.id = VIEW(id)]&quot;)\n    List&lt;ModelDto&gt; getModel();\n\n    @EntityView(VehicleModel.class)\n    interface ModelDto {\n        @IdMapping\n        Long getId();\n        String getName();\n        @Mapping(&quot;brand.id&quot;)\n        long getBrandId();\n    }\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>VehicleBrandModelDto a = entityViewManager.find(entityManager, VehicleBrandModelDto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n<pre><code>List&lt;VehicleBrandModelDto&gt; findAll();\n</code></pre>\n','2020-11-05 08:21:41',_binary '\0','2020-11-05 08:21:41',1,64678248),(64848627,'<p>The question is quite similar asked in linked thread.\n<a href=\"https://stackoverflow.com/questions/1071293/hibernate-and-jpa-error-mapping-embedded-class-exposed-through-an-interface\">Error Mapping Embedded class exposed through an interface</a></p>\n<p>write your entity class name that you want to embed in the @target annotation</p>\n<pre><code>   @Embedded\n   @Target(TemporalEntity.class)\n   private ITemporalEntity temporal;\n   \n   \n</code></pre>\n<p>you do not need to tightly couple the TemporalEntity by creating new object embedded do it</p>\n','2020-11-15 19:05:00',_binary '\0','2020-11-16 08:02:08',0,64688273),(64694516,'<p>I suspect you should use <code>or</code>-clause instead of <code>and</code> here</p>\n<pre><code> select oi \n from OrderItem oi \n where treat(oi as OrderItemTypeOne).a=:a or treat(oi as OrderItemTypeTwo).b=:b\n</code></pre>\n<p>When you use <code>and</code>-clause you get nothing because <code>OrderItem</code> cannot be an instance of <code>OrderItemTypeOne</code> and <code>OrderItemTypeTwo</code> at the same time.</p>\n<p>Another approach is to use cross-join this way</p>\n<pre><code>select oi \nfrom OrderItem oi, OrderItemTypeOne t1, OrderItemTypeTwo t2\nwhere (oi.id=t1.id or oi.id=t2.id) and (t1.a=:a or t2.b=:b)\n</code></pre>\n<p>where <code>oi.id</code> - <code>OrderItem</code> id field name</p>\n','2020-11-05 09:34:17',_binary '\0','2020-11-05 10:41:27',0,64694143),(64711651,'<p>Use the following:</p>\n<pre><code>@Query(&quot;SELECT oi FROM OrderItem oi &quot;\n            + &quot;WHERE oi.a = :a &quot;\n            + &quot;OR oi.b = :b&quot;)\nPage&lt;OrderItem&gt; findOrders(@Param(&quot;a&quot;) String a, @Param(&quot;b&quot;) String b);\n</code></pre>\n','2020-11-06 09:03:40',_binary '\0','2020-11-06 09:03:40',0,64694143),(64699259,'<ol>\n<li>You should use <code>@JoinTable</code> annotation only on the owning side of the <code>@ManyToMany</code> association.</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Student {\n\n    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})\n    @JoinTable(name = &quot;course_student&quot;,\n            joinColumns = @JoinColumn(name=&quot;student_id&quot;),\n            inverseJoinColumns = @JoinColumn(name=&quot;course_id&quot;))\n    private List&lt;Course&gt; courses;\n   \n   // ...\n}\n\n@Entity\npublic class Course {\n\n    @ManyToMany(mappedBy = &quot;courses&quot;, cascade = {CascadeType.PERSIST, CascadeType.MERGE})\n    private List&lt;Student&gt; students;\n\n   // ...\n}\n</code></pre>\n<ol start=\"2\">\n<li>If you use bidirectional association you should take care about synchronization of both sides of association. So, you should add the following methods to your <code>Course</code> entity:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>public class Course {\n\n  public void addStudent(Student student) {\n     students.add(student);\n     student.getCourses().add( this );\n  }\n\n  public void removeStudent(Student student) {\n     students.remove(student);\n     student.getCourses().remove( this );\n  }\n\n  // ...\n}\n</code></pre>\n<p>and then you will be able to do something like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Course course = new Course(&quot;Ukulele master class&quot;);\nStudent student1 = new Student(&quot;Jishnu&quot;,&quot;M V&quot;,&quot;jishnumv@gmail.com&quot;);\nStudent student2 = new Student(&quot;Praveen&quot;,&quot;M V&quot;,&quot;praveenmv@gmail.com&quot;);\ncourse.addStudent(student1);\ncourse.addStudent(student2);\nsession.save(course);\n</code></pre>\n<ol start=\"3\">\n<li>As it mentioned in the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-many-to-many\" rel=\"nofollow noreferrer\">documentation</a>:</li>\n</ol>\n<blockquote>\n<p>For <code>@ManyToMany</code> associations, the <code>REMOVE</code> entity state transition doesn’t make sense to be cascaded because it will propagate beyond the link table. Since the other side might be referenced by other entities on the parent-side, the automatic removal might end up in a <code>ConstraintViolationException</code>.</p>\n</blockquote>\n<p>That is why you should avoid to use <code>cascade = CascadeType.ALL</code> in the <code>@ManyToMany</code>.</p>\n','2020-11-05 14:29:48',_binary '\0','2020-11-05 14:35:04',1,64697782),(64700642,'<p>You need to use @MappedSuperclass annotation in your abstract class.</p>\n<p>ref: <a href=\"https://vladmihalcea.com/how-to-inherit-properties-from-a-base-class-entity-using-mappedsuperclass-with-jpa-and-hibernate/\" rel=\"nofollow noreferrer\">https://vladmihalcea.com/how-to-inherit-properties-from-a-base-class-entity-using-mappedsuperclass-with-jpa-and-hibernate/</a></p>\n','2020-11-05 15:50:03',_binary '\0','2020-11-05 15:50:03',0,64700537),(64932039,'<p>It has been sometime now, I hope you have got your solution already. But, for others who face the same issue I will try to reason out why your solution is not working.</p>\n<p>The first thing is that your repository has to be annotated with <code>@NoRepositoryBean</code> like this:</p>\n<pre><code>@NoRepositoryBean\npublic interface CommonRepository&lt;E extends IdCommon&gt; extends JpaRepository&lt;E, Long&gt;, JpaSpecificationExecutor&lt;E&gt; {}\n</code></pre>\n<p>And which will be exteded in <code>EmployeeRepository</code>:</p>\n<pre><code>public interface EmployeeRepository extends CommonRepository&lt;EmployeeEntity&gt; {\n    //you can override some or all of the methods if necessary\n}\n</code></pre>\n<p>Service class is more or less the same:</p>\n<pre><code>@Service\npublic class EmployeeService {\n\n    private EmployeeRepository empRepository;\n\n    public EmployeeService(EmployeeRepository repository) {\n        this.empRepository = repository;\n    }\n\n    public void saveEmployee(EmployeeEntity entity) {//I added this for a test\n        empRepository.save(entity);\n    }\n    \n    public Page&lt;EmployeeEntity&gt; getAll(Pageable pageable) {\n        Specification&lt;EmployeeEntity&gt; specification = (Specification&lt;EmployeeEntity&gt;) (root, query, builder) -&gt; null;\n        return empRepository.findAll(specification, pageable);\n    }\n}\n</code></pre>\n<p>And running this with <code>CommandLineRunner</code> (lazy to add a controller)</p>\n<pre><code>@SpringBootApplication\npublic class DemoApplication implements CommandLineRunner {\n\n    @Autowired\n    private EmployeeService service;\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n    @Override\n    public void run(String... args) throws Exception {\n        EmployeeEntity entity = new EmployeeEntity();\n        entity.setEmail(&quot;aa@so.com&quot;);\n        entity.setFirstName(&quot;First name&quot;);\n        entity.setLastName(&quot;Last name&quot;);\n        \n        service.saveEmployee(entity);\n        \n        Page&lt;EmployeeEntity&gt; page = service.getAll(PageRequest.of(0, 1));\n        page.getContent().stream().forEach(System.out::println); //output: EmployeeEntity [id=0, firstName=First name, lastName=Last name, email=aa@so.com]\n    }\n\n}\n</code></pre>\n','2020-11-20 15:18:00',_binary '\0','2020-11-20 15:18:00',0,64713533),(64726749,'<p>This mapping does not make much sense. You can\'t map <code>festivalActions</code> this way because there is no way to persist the state properly through such a mapping. Also <code>festival</code> in <code>AreaDto</code> should be mapped by the <code>area</code> in <code>FestivalDto</code>. Try the following instead:</p>\n<pre><code>@Entity\n@Table(name = &quot;AREA&quot;)\n@EntityListeners(AuditingEntityListener.class)\npublic class AreaDto {\n\n    @Id\n    @Column(name = &quot;AREA_ROWID&quot;)\n    private String areaRowId;\n\n    @OneToMany(cascade = CascadeType.DETACH, mappedBy = &quot;area&quot;)\n    private Collection&lt;FestivalDto&gt; festival;\n\n\n    @OneToMany(cascade = CascadeType.DETACH, mappedBy = &quot;area&quot;)\n    private Collection&lt;ActionDto&gt; actions;\n\n    public Collection&lt;ActionDto&gt; getFestivalActions() {\n        return festival.stream().flatMap(f -&gt; f.actions.stream()).collect(Collectors.toList());\n    }\n\n\n}\n\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@Table(name = &quot;FESTIVAL&quot;)\npublic class FestivalDto {\n\n    @Id\n    @Column(name = &quot;FESTIVAL_ROWID&quot;)\n    @GeneratedValue(generator = &quot;FESTIVAL_ROWID_SEQ&quot;)\n    private Long festivalRowId;\n\n    \n    @ManyToOne(cascade = CascadeType.DETACH, fetch = FetchType.LAZY, optional = true)\n    @JoinColumn(name = &quot;AREA_ROWID&quot;)\n    private AreaDto area;\n\n    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = &quot;festival&quot;)\n    private Collection&lt;ActionDto&gt; actions = Lists.newArrayList();\n\n}\n\n@Entity\n@EntityListeners(AuditingEntityListener.class)\n@Table(name = &quot;ACTION&quot;)\npublic class ActionDto implements Serializable {\n\n...\n\n    @Id\n    @Column(name = &quot;ACTION_ID&quot;)\n    @GeneratedValue(generator = &quot;ACTION_ID_SEQ&quot;)\n    private Long actionId;\n\n    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)\n    @ManyToOne(cascade = DETACH, fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;FESTIVAL_ROWID&quot;)\n    private FestivalDto festival;\n\n    @Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)\n    @ManyToOne(cascade = DETACH, fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;AREA_ROWID&quot;)\n    private AreaDto area;\n\n\n}\n</code></pre>\n','2020-11-07 10:32:57',_binary '','2020-11-07 10:32:57',1,64723473),(64726886,'<p><code>LazyInitializationException</code> indicates access to unfetched data outside of a session context. To fix this, you have to fetch all required associations within your service layer.</p>\n<p>I think in your case you are fetching <code>Link</code> without its <code>SubLink</code>, but trying to access sublinks. So, using <em>JOIN FETCH</em> would be the best strategy.</p>\n<p><strong>Note:</strong> You can use <code>FetchType.EAGER</code> too, but it might affect performance. Because, it will always fetch fetch the association, even if you don’t use them.</p>\n<p><strong>= UPDATE =</strong></p>\n<p>Thanks to <strong>crizzi</strong> for mentioning an interesting feature called <strong>Open Session In View(OSIV)</strong> (enabled by default in spring-boot applications). Though it depends on who you may ask to label it as a <em>pattern</em> or an <em>antipattern</em>.</p>\n<p>The main purpose is to to facilitate working with lazy associations(avoids <code>LazyInitializationException</code>). Very detailed explanation can be found on</p>\n<ul>\n<li><a href=\"https://www.baeldung.com/spring-open-session-in-view\" rel=\"nofollow noreferrer\">https://www.baeldung.com/spring-open-session-in-view</a> and</li>\n<li><a href=\"https://vladmihalcea.com/the-open-session-in-view-anti-pattern/\" rel=\"nofollow noreferrer\">https://vladmihalcea.com/the-open-session-in-view-anti-pattern/</a></li>\n</ul>\n','2020-11-07 10:50:01',_binary '\0','2020-11-07 22:57:09',1,64726819),(64732054,'<p><strong>Aman</strong> explained well the cause of the <code>LazyInitializationException</code> in your case and <strong>crizzis</strong> added more information about why <code>@Transactional</code> is not worked as you expected and how it should be used.</p>\n<p>So, to summarize the options you have to solve your problem:</p>\n<hr />\n<h2>Fetch Eager</h2>\n<p>Commented by <strong>Aman</strong> and <strong>crizzis</strong>, this is the easier but not the best from the point of view of the performance.</p>\n<p>To do it, include <code>fetch = FetchType.EAGER</code> in <code>subLinks</code> property definition:</p>\n<pre><code>@OneToMany(mappedBy = &quot;link&quot;, fetch = FetchType.EAGER)\nprivate Collection&lt;SubLink&gt; subLinks;\n</code></pre>\n<p>However, every time you get from database instances of <code>Link</code> =&gt; its collection of related <code>SubLink</code> will be included.</p>\n<hr />\n<h2>Custom Query</h2>\n<p>Commented by <strong>Aman</strong> too (although is not necessary <code>on (link.id = sublink.link.id)</code>). In this case, you can create a new method in your repository to get the <code>SubLink</code> collection of an specific <code>Link</code>.</p>\n<p>In this way, you will be able to deal with situations on which you want to receive such &quot;extra information&quot; (<code>findWithSubLinkById</code>) or not (provided <code>findById</code>).</p>\n<p>With a <strong>bidirectional <code>OneToMany</code></strong>, it is enough with something like:</p>\n<pre><code>@Query(&quot;select l from Link l left join fetch l.subLinks where l.id = :id&quot;)\nLink findWithSubLinkById(Long id);\n</code></pre>\n<p>With a <strong>unidirectional <code>OneToMany</code></strong>, besides the above query you have to include how &quot;join&quot; both tables:</p>\n<pre><code>@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)\n@JoinColumn(name = &quot;link_id&quot;)\nprivate Collection&lt;SubLink&gt; subLinks;\n</code></pre>\n<p>Removing <code>link</code> property from <code>SubLink</code> class.</p>\n<p>More information in <a href=\"https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#associations\" rel=\"nofollow noreferrer\">Hibernate associations</a> and <a href=\"https://thorben-janssen.com/hibernate-tips-unidirectional-one-to-many-association-without-junction-table/\" rel=\"nofollow noreferrer\">unidirectional one-to-many tips</a></p>\n<hr />\n<h2>EntityGraph</h2>\n<p>This is a variation of the previous one. So, instead of create the new method using <code>@Query</code>, an easier choice will be configured with <code>@EntityGraph</code>:</p>\n<pre><code>@EntityGraph(attributePaths = &quot;subLinks&quot;)\nLink findWithSubLinkById(Long id);\n</code></pre>\n<p>More information <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.entity-graph\" rel=\"nofollow noreferrer\">here</a> (<code>Example 77</code>)</p>\n<hr />\n<h2>Work inside Transactional method</h2>\n<p>As <strong>crizzis</strong> commented, inside the method configured with <code>@Transactional</code> you won\'t receive such exception. So, another option is move the code that uses <code>Sublink</code> from your controller to your service.</p>\n','2020-11-07 20:20:52',_binary '','2020-11-08 10:52:22',0,64726819),(67619718,'<p>Replacing @Transactional with @TransactionalAdvice should solve the issue.</p>\n<p>How? Why? Please refer GitHub Issue: <a href=\"https://github.com/micronaut-projects/micronaut-data/issues/805\" rel=\"nofollow noreferrer\">“Internal Server Error: Could not obtain transaction-synchronized Session for current thread” even after added @Transaction</a></p>\n<p>I have followed the tutorial <a href=\"https://guides.micronaut.io/latest/micronaut-jpa-hibernate-maven-java.html\" rel=\"nofollow noreferrer\">Learn how to access a database with JPA and Hibernate using Micronaut</a> and was facing the following error while testing the application using <code>./mvnw test</code>. (Step 5 in the above tutorial)</p>\n<pre><code>ERROR i.m.h.s.netty.RoutingInBoundHandler - Unexpected error occurred: Could not obtain transaction-synchronized Session for current thread\norg.hibernate.HibernateException: Could not obtain transaction-synchronized Session for current thread\n</code></pre>\n<p><strong>Replacing the @Transactional with @TransactionalAdvice solved the issue</strong> and all tests run with <code>BUILD SUCCESS</code>.</p>\n','2021-05-20 11:46:34',_binary '\0','2021-05-20 11:46:34',0,64740111),(64764250,'<p>The error message clearly says that the entity is not registered in the persistence unit. Maybe you didn\'t list this PropertyCriteria.hbm.xml in the persistence.xml as <code>mapping-file</code>?</p>\n','2020-11-10 07:01:47',_binary '\0','2020-11-10 07:01:47',0,64753724),(64764452,'<p>In JPA/Hibernate such types are best represented as embeddables if you are in control of the code. The composite/custom type API is more fitted in case you can\'t change the source code of the type.</p>\n<p>I would recommend you create an embeddable that stores the ISO code like this:</p>\n<pre><code>@Embeddable\npublic class Country {\n    private String iso;\n}\n</code></pre>\n<p>Just bear in mind that if you reuse this type, you will probably have to change column names through <code>@AttributeOverride</code> on the use site.</p>\n','2020-11-10 07:22:50',_binary '\0','2020-11-10 07:22:50',0,64755083),(64764831,'<p>The <code>Parts</code> object that is passed through the Spring MVC integration has null in the <code>parts</code> field set in the <code>Subparts</code> objects. Before calling <code>saveAndFlush</code> use e.g. <code>parts.getSubparts().forEach(s -&gt; s.setParts(parts))</code> to properly set the field.</p>\n','2020-11-10 07:53:02',_binary '\0','2020-11-10 07:53:02',0,64761954),(64782332,'<p>You might be able to use a custom <code>@SQLInsert</code> to make use of Oracles MERGE statement for this purpose. Also see <a href=\"https://stackoverflow.com/a/64764412/412446\">https://stackoverflow.com/a/64764412/412446</a></p>\n','2020-11-11 07:44:00',_binary '\0','2020-11-11 07:44:00',0,64772618),(64799819,'<p>Finally, I found a way to achieve the expected behavior, and even better, I was able to get rid of these &quot;noRollBackFor&quot; attributes. I only restructured the process and try to save everything in a transaction, if it fails, the Exception is caught on the calling method, the input is &quot;cleaned&quot; and the transactional method is called again (recursively). These duplicates are rare situations (happens every 10k Foo instance), so from a performance perspective, it\'s fine to have these subsequent transactions. Here is the changed pseudo-code again</p>\n<pre><code>@Entity\npublic class Foo{\n\n    public String uniqueHash;\n    \n    // couple of other properties that will be used to calculate the hash\n}\n\n@Entity\npublic class Bar{\n\n    private List goodIds;\n    private List badIds;\n    \n    public Bar(List goodIds, List badIds){\n        this.goodIds = goodIds;\n        this.badIds = badIds;\n    }\n    \n    public List getGoodIds(){\n      return goodIds;\n    }\n    \n    public List getBadIds(){\n      return badIds;\n    }\n}\n\n@Repository\npublic interface FooRepository extends JpaRepository&lt;Foo, String&gt; {\n}\n\n@Repository\npublic interface BarRepository extends JpaRepository&lt;Bar, String&gt; {\n}\n\npublic class FooException extends RuntimeException {\n\n  private final Foo foo;\n\n  public FooException(String message, Foo foo) {\n    super(message);\n    this.foo = foo;\n  }\n  \n  public getFoo(){\n  return foo;\n  }\n}\n\nSomeService\n\npublic void doSomething(List&lt;Foo&gt; foos, Bar bar){\n        try{\n        doSomethingTransactional(foos,bar);\n        }\n        catch (FooException e) {           \n          bar.getBadIds().add(e.getFoo().getId());\n          foos.remove(foo);\n          doSomething(foos, bar);\n        }\n}\n\n\n@Transactional\npublic void doSomethingTransactional(List&lt;Foo&gt; foos, Bar bar){\n        \n    for (Foo foo : foos) {\n      try {     \n        fooRepository.saveAndFlush(foo);\n        bar.getGoodIds.add(foo.getId());\n      } catch(DataAccessException e) {\n        if (e.getCause() instanceof ConstraintViolationException \n        &amp;&amp; ((ConstraintViolationException) e.getCause()).getConstraintName().contains(&quot;Some DB Message&quot;)) {\n          throw new FooException(&quot;Foo already exists&quot;, foo);\n        } else {\n          throw e;\n        }\n      }\n    }\n    barRepository.saveAndFlush(bar);\n}\n</code></pre>\n','2020-11-12 07:49:29',_binary '','2020-11-12 07:49:29',1,64772618),(64779561,'<p>Looks like dupe of <a href=\"https://stackoverflow.com/questions/32544963/hibernate-generatedvalue-null-error-for-primary-key\">Hibernate @GeneratedValue null error for primary key</a></p>\n<p>Try using the default strategy i.e. GenerationType.AUTO.</p>\n','2020-11-11 02:21:23',_binary '\0','2020-11-11 02:26:55',0,64779298),(64788910,'<p>What you are posting here is not a table definition in SQL DDL but an image. As far as I can tell from it though, the id column is not marked as &quot;identity&quot; as required by SQL Server, so this is why you are seeing the error.</p>\n','2020-11-11 15:03:25',_binary '','2020-11-11 15:03:25',1,64779298),(64797956,'<p>Solved by add spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true in properties</p>\n','2020-11-12 04:31:34',_binary '\0','2020-11-12 04:31:34',0,64784914),(64800132,'<p>You need to use join fetching with a HQL query like this:</p>\n<pre><code>@Repository\npublic interface StudentRepository extends CrudRepository&lt;Student, Integer&gt; {\n    @Query(&quot;FROM Student s &quot; +\n            &quot;JOIN FETCH s.extras e &quot; +\n            &quot;JOIN FETCH e.address&quot;)\n    List&lt;Student&gt; findAllData();\n}\n</code></pre>\n<p><code>spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true</code> is an anti-pattern. I wouldn\'t use it if I were you.</p>\n','2020-11-12 08:14:24',_binary '','2020-11-13 09:52:25',1,64784914),(65789576,'<p>Hibernate OGM <code>5.4.1.Final</code> requires Hibernate ORM <code>5.3.6.Final</code>: <a href=\"http://hibernate.org/ogm/releases/5.4/\" rel=\"nofollow noreferrer\">http://hibernate.org/ogm/releases/5.4/</a></p>\n<p>Some other dependency in your project is pulling Hibernate ORM <code>5.0.12.Final</code></p>\n','2021-01-19 10:23:37',_binary '','2021-01-19 10:23:37',2,64785581),(65988080,'<p>Well it\'s getting really messy to figure out the compatible versions .. However this worked --</p>\n<pre><code>&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n            &lt;dependency&gt;\n                    &lt;groupId&gt;org.hibernate.ogm&lt;/groupId&gt;\n                    &lt;artifactId&gt;hibernate-ogm-bom&lt;/artifactId&gt;\n                    &lt;!-- version&gt;5.1.0.Final&lt;/version --&gt;\n                    &lt;version&gt;5.4.1.Final&lt;/version&gt;\n                    &lt;type&gt;pom&lt;/type&gt;\n                    &lt;scope&gt;import&lt;/scope&gt;\n                    &lt;exclusions&gt;\n                            &lt;exclusion&gt;\n                                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n                                    &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n                            &lt;/exclusion&gt;\n                    &lt;/exclusions&gt;\n            &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n        &lt;version&gt;5.3.6.Final&lt;/version&gt;\n&lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-search&lt;/artifactId&gt;\n        &lt;version&gt;5.9.3.Final&lt;/version&gt;\n        &lt;exclusions&gt;\n            &lt;exclusion&gt;\n                &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n                &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n            &lt;/exclusion&gt;\n        &lt;/exclusions&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate.ogm&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-ogm-infinispan-embedded&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n</code></pre>\n','2021-02-01 06:27:06',_binary '\0','2021-02-01 06:27:06',1,64785581),(64786494,'<p>@ManyToOne(cascade = CascadeType.ALL)\nit seems in your case to be a bad idea, as removing an Student would lead to removing the related University. As a University can have multiple Student, the other Student would become orphans</p>\n<p>I think you should use this relation in the University Entity , instead of Student Entity</p>\n<pre><code>@OneToMany(cascade = CascadeType.ALL)\n@JoinColumn(name=&quot;STUDENT_ID&quot;)\nprivate List&lt;Student&gt; students;\n</code></pre>\n<p>and if you want to use your model try to save the university before setting it in a student (because in your code you are trying to save the same univesity two times,first with fstudent and second with fstudent1 ) and in this case i advice you to not use the cascade:</p>\n<pre><code>  University university = universityRepo.save(new University(&quot;MG&quot;, &quot;India&quot;));\n    \n    Student fstudent = new Student(&quot;Deeksha&quot;, &quot;Sivakumar&quot;, &quot;A&quot;, university);\n    fstudent.setUniversity(university);\n    studentRepo.save(fstudent);\n    \n    \n    Student fstudent1 = new Student(&quot;Sivakumar&quot;, &quot;Nair&quot;, &quot;A&quot;, university);\n    fstudent1.setUniversity(university);\n    studentRepo.save(fstudent1);\n</code></pre>\n','2020-11-11 12:31:29',_binary '','2020-11-11 13:09:43',3,64786196),(64799893,'<blockquote>\n<p>One Post has many comments</p>\n</blockquote>\n<p>If that is how it\'s <strong>supposed</strong> to be, then your entire structure is backwards. Instead of the post referencing the comments, the comments must reference the posts.</p>\n<pre><code>CREATE TABLE post(\n    id int(10) NOT NULL auto_increment,\n    name varchar(45),\n    content text,\n    primary key(id)\n);\n\nCREATE TABLE comment(\n    id int(10) NOT NULL auto_increment,\n    post_id int(10) not null,\n    name varchar(45) DEFAULT NULL,\n    content text not null,\n    primary key(id),\n    CONSTRAINT `fk_post` FOREIGN KEY (`post_id`) \n    REFERENCES `post` (`id`) \n    ON DELETE NO ACTION ON UPDATE NO ACTION\n);\n</code></pre>\n<p>Then in your Java classes Comment should have:</p>\n<pre><code>@ManyToOne\n@JoinColumn(name = &quot;post_id&quot;)\nprivate Post post;\n</code></pre>\n<p>Here the <code>JoinColumn</code> specifies the <strong>column</strong> name in the database, within the <code>comment</code> table.</p>\n<p>And the Post class should have:</p>\n<pre><code>@OneToMany(mappedBy = &quot;post&quot;, cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH}, fetch = FetchType.LAZY, orphanRemoval = false)\nprivate List&lt;Comment&gt; comments;\n</code></pre>\n<p>Here the <code>mappedBy</code> specifies the <strong>field</strong> name within the child java class that refers to this parent.</p>\n<p>Now normally you might want the <code>cascade</code> value to be <code>CascadeType.ALL</code>, but the way you\'ve specified the foreign key actions suggests you don\'t want removals, so we don\'t keep those, and also don\'t remove orphans (Comments that have been removed from the list).</p>\n<p>Before persisting them, you have to run</p>\n<pre><code>theComment.setPost(thePost);\n</code></pre>\n<p>on each comment, or you will get constraint violations.</p>\n','2020-11-12 07:55:55',_binary '\0','2020-11-12 07:55:55',1,64798204),(64804390,'<p>the problem is in the intermediate table, as the different fields are called than in the related tables, you have to specify the mapping of the columns as follows:</p>\n<pre><code>@JoinTable(\n     name = &quot;MODULOCONTROL_FF&quot;,\n     joinColumns = @JoinColumn(name = &quot;IDMODULOCONTROL&quot;, referencedColumnName=&quot;ID&quot; nullable = false),\n     inverseJoinColumns = @JoinColumn(name=&quot;IDFUNFUND&quot;, referencedColumnName=&quot;ID&quot;, nullable = false)\n)\n</code></pre>\n<p>If referencedColumnName is not specified implicitly it takes the same value.</p>\n','2020-11-12 12:58:38',_binary '\0','2020-11-12 12:58:38',0,64803747),(64808122,'<p>The problem is solved.\nIt was a permission problem.</p>\n','2020-11-12 16:47:39',_binary '','2020-11-12 16:47:39',0,64803747),(64813331,'<p>You must have a model that is not an entity. Your model classes have to be separated from entities.</p>\n<pre><code>class User {\n             \n  private KeycloakUser keycloakUser;\n             \n  private OtherUser otherUser;\n             \n}\n\nUser user = new User();\nuserService.saveUser(user);\n\n// UserService\n\nvoid saveUser(User user) {\n    UserEntity userEntity = userMapper.toUserEntity(user.getOtherUser());\n    userRespository.save(userEntity);\n\n    CreateUserRequest request = userMapper.toCreateUserRequest(user.getKeycloakUser());\n    keyCloakClient.createUser(request);\n}\n\n// UserMapper\n\nUserEntity toUserEntity(OtherUser user) {\n    UserEntity result = new UserEntity();\n    result.setName(user.getName());\n\n    return resut;\n}\n   \n</code></pre>\n','2020-11-12 23:28:21',_binary '\0','2020-11-13 10:28:27',0,64811943),(64818888,'<p>I guess you are using Spring? Try disabling <code>spring.jpa.properties.hibernate.enable_lazy_load_no_trans</code> which is an anti-pattern anyway.</p>\n','2020-11-13 09:59:44',_binary '','2020-11-13 09:59:44',1,64812117),(64824176,'<p>Reason is <code>EntityManager</code> hold open session. And load subentities on demand. In my case <code>.getProducts()</code>.</p>\n<p>For close session directly use <code>entityManager.close()</code>.</p>\n','2020-11-13 16:07:22',_binary '\0','2020-11-13 16:07:22',0,64812117),(64862241,'<p>This makes not much sense. This exception is only thrown when you have a discriminator in the table that has no match in the entity model. Maybe you have trailing spaces in the table?</p>\n','2020-11-16 16:54:44',_binary '\0','2020-11-16 16:54:44',0,64824151),(64870784,'<p>Just making it a <code>List</code> is not enough, you also need to replace <code>@OrderBy</code> with <code>@OrderColumn</code>. This makes the list an indexed list which then can make use of the index access notation.</p>\n','2020-11-17 07:14:43',_binary '\0','2020-11-17 07:14:43',1,64825740),(64861582,'<p>That\'s a known issue. Hibernate does not check the 2nd level cache for associations when constructing &quot;just proxies&quot;. You need to access the objects to initialize them, which will then trigger a 2nd level cache hit.</p>\n<p>I would recommend you use a DTO approach instead. I think this is a perfect use case for <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a>.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(Event.class)\npublic interface EventDto {\n    @IdMapping\n    Long getId();\n    VenueDto getVenue();\n    @MappingIndex(&quot;orderId&quot;)\n    List&lt;TicketLinkDto&gt; getTicketLinks();\n    @MappingIndex(&quot;orderId&quot;)\n    List&lt;ArtistEventDto&gt; getLineup();\n\n    @EntityView(Venue.class)\n    interface VenueDto {\n        @IdMapping\n        Long getId();\n        CityDto getCity();\n    }\n    @EntityView(City.class)\n    interface CityDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n    @EntityView(TicketLink.class)\n    interface TicketLinkDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n    @EntityView(ArtistEvent.class)\n    interface ArtistEventDto {\n        @IdMapping\n        Long getId();\n        ArtistDto getArtist();\n    }\n    @EntityView(Artist.class)\n    interface ArtistDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>EventDto a = entityViewManager.find(entityManager, EventDto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n<pre><code>Optional&lt;EventDto&gt; findEventPageViewGraphById(long id);\n</code></pre>\n','2020-11-16 16:13:33',_binary '\0','2020-11-16 16:24:17',0,64836566),(64909203,'<p>Thank you Christian for your answer. I solved the problem by initializing entities with the static method Hibernate.initialize() as described here <a href=\"https://vladmihalcea.com/initialize-lazy-proxies-collections-jpa-hibernate/\" rel=\"nofollow noreferrer\">https://vladmihalcea.com/initialize-lazy-proxies-collections-jpa-hibernate/</a></p>\n<pre><code>@Transactional(readOnly = true)\npublic Optional&lt;Event&gt; loadEventPageViewGraph(long id) {\n    Optional&lt;Event&gt; eventO = eventRepository.findEventPageViewGraphById(id);\n    if(eventO.isPresent()) {\n        Hibernate.initialize(eventO.get());\n        Hibernate.initialize(eventO.get().getVenue().getCity());\n        for (ArtistEvent artistEvent: eventO.get().getLineup()) {\n            Hibernate.initialize(artistEvent.getArtist());\n        }\n        Hibernate.initialize(eventO.get().getTicketLinks());\n        return eventO;\n    } else {\n        return Optional.empty();\n    }\n}\n</code></pre>\n<p>Though, I agree that in general it is better to use DTO\'s/projections. However, with DTO\'s there is a problem with fetching projections that include associated collections (@OneToMany properties) as described here <a href=\"https://vladmihalcea.com/one-to-many-dto-projection-hibernate/\" rel=\"nofollow noreferrer\">https://vladmihalcea.com/one-to-many-dto-projection-hibernate/</a>. In particular in the case when we don\'t want to select all of the entity properties. I found that Blaze-Persistence Entity Views has a nice solution for that <a href=\"https://persistence.blazebit.com/documentation/1.6/entity-view/manual/en_US/#subset-basic-collection-mapping\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/1.6/entity-view/manual/en_US/#subset-basic-collection-mapping</a>. I\'ll check it out.</p>\n','2020-11-19 09:53:02',_binary '\0','2020-11-19 09:53:02',0,64836566),(64840130,'<p>Have you tried to add a Configuration Class in your project for example</p>\n<pre><code>@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories( basePackages = &quot;your repository package&quot; )\n@EntityScan( basePackages = {&quot;your entity package1&quot;,&quot;your entity package2&quot;}\npublic class TransactionConfiguration {}\n</code></pre>\n<p>This will help you to find your entity classes in the project.</p>\n','2020-11-15 00:35:07',_binary '','2020-11-15 00:35:07',1,64840053),(64863154,'<p>Assuming that you have the <code>Employee</code> entity, you can correct your query in the following way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>List&lt;Employee&gt; resultList = session.createQuery(\n   &quot;SELECT e FROM Employee e WHERE e.a = :a and e.b= :b&quot;,\n   Employee.class\n)\n.setParameter(&quot;a&quot;, a)\n.setParameter(&quot;b&quot;, b)\n.getResultList();\n</code></pre>\n','2020-11-16 17:52:21',_binary '\0','2020-11-16 17:52:21',0,64862540),(64867818,'<p>Please Check your Employee entity mapping,</p>\n<p>if your Employee entity mapping like following:</p>\n<pre><code>@Table(name=&quot;EMPLOYEE_TABLE&quot;) // table name\n@Entity(name = &quot;employee&quot;) // entity name\npublic class Employee\n</code></pre>\n<p>then your Query should be:</p>\n<pre><code>Query query = session.createQuery(&quot;SELECT e FROM employee e WHERE e.a = ? and e.b= ?&quot;);\n</code></pre>\n<p>if your Employee entity mapping like following:</p>\n<pre><code>@Table(name=&quot;EMPLOYEE_TABLE&quot;) // table name\n@Entity(name = &quot;emp&quot;) // entity name\npublic class Employee\n</code></pre>\n<p>then your Query should be:</p>\n<pre><code>Query query = session.createQuery(&quot;SELECT e FROM emp e WHERE e.a = ? and e.b= ?&quot;);\n</code></pre>\n<p>if your Employee entity mapping like following:</p>\n<pre><code>@Table(name=&quot;EMPLOYEE_TABLE&quot;) // table name\n@Entity // default entity name is class name\npublic class EmployeeEntity\n</code></pre>\n<p>then your Query should be:</p>\n<pre><code>Query query = session.createQuery(&quot;SELECT e FROM EmployeeEntity e WHERE e.a = ? and e.b= ?&quot;);\n</code></pre>\n<p>For reference: <a href=\"https://javabydeveloper.com/org-hibernate-hql-internal-ast-querysyntaxexception-entity-table-is-not-mapped/\" rel=\"nofollow noreferrer\">org.hibernate.hql.internal.ast.querysyntaxexception entity/table is not mapped</a></p>\n','2020-11-17 00:50:02',_binary '','2020-11-17 00:50:02',1,64862540),(64879952,'<p>As a first proposal, I would recommend to change this line:</p>\n<pre><code>release = repository.save(release)\n</code></pre>\n<p>The save method returns an updated object of the entity, so by returning the &quot;non-updated&quot; one, there may be problems when trying to serialize the response.</p>\n<p>Following our discussion, probably removing <code>CascadeType.ALL</code> was the issue here - Hibernate tried to do some magic with the related entities, which were out of sync.</p>\n<p>Maybe you also want to create a DTO for the Response, as it\'s good practice to separate this from the entity.</p>\n<p>Using FetchType.EAGER is generally also not a good idea - some notes on this <a href=\"https://vladmihalcea.com/eager-fetching-is-a-code-smell/\" rel=\"nofollow noreferrer\">https://vladmihalcea.com/eager-fetching-is-a-code-smell/</a> . If you change this, you probably need to fetch the related entities manually in the service - changing to a separate DTO and this isn\'t an issue anyway.</p>\n<p>You may check out <a href=\"https://bootify.io\" rel=\"nofollow noreferrer\">https://bootify.io</a>, you can create an example REST API (but not with your custom endpoint anyway).</p>\n','2020-11-17 17:07:32',_binary '','2020-11-17 21:41:50',2,64879278),(68150492,'<pre><code>@EqualsAndHashCode.Exclude\n@ToString.Exclude\n</code></pre>\n<p>I have added these two annotations for @onetomany object and my error got vanished.\nBut I don\'t know how.</p>\n','2021-06-27 11:06:21',_binary '\0','2021-06-27 11:06:21',6,64879278),(64894571,'<p>Try executing the following query in your database to update the value of the sequence:</p>\n<pre><code>SELECT setval(\'student_id_seq\', (SELECT MAX(id) FROM student)+1);\n</code></pre>\n<p>And model the entity as follows:</p>\n<pre><code>@Getter\n@Setter\n@Id\n@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;student_id_generator&quot;)\n@SequenceGenerator(name = &quot;student_id_generator&quot;, sequenceName = &quot;student_id_seq&quot;, allocationSize = 1)\nprivate Integer id;\n</code></pre>\n<p>It is important to set the type of the ID as non-primitive to be able to set null values, the sequence will already generate the id.</p>\n','2020-11-18 13:59:46',_binary '','2020-11-18 13:59:46',1,64894143),(64907920,'<p>Why do you map classification as entity? You could just use an element collection mapping like this:</p>\n<pre><code>@Nonnull\n@ElementCollection\n@Column(nullable = false)\n@Enumerated(EnumType.STRING)\nprivate Set&lt;AnotherClassification&gt; classifications = new HashSet&lt;&gt;();\n</code></pre>\n<p>This will create a table with just two columns i.e. the ones that you are using for the unique constraint. If you really must use a surrogate id, you could try to implement equals-hashCode based on your natural id i.e. the fields <code>accountId</code> and <code>anotherClassification</code>.</p>\n','2020-11-19 08:27:06',_binary '\0','2020-11-19 08:27:06',0,64896742),(64907831,'<p>Why are you using <code>unique = true</code> on every column? This will create unique constraints for the columns. As you can see in the exception message, a database unique constraint was violated and I bet it\'s because of <code>@Column(name=&quot;enabled&quot;, unique=true, nullable=false)</code>.</p>\n<p>Just remove all the <code>unique = true</code> uses.</p>\n','2020-11-19 08:21:37',_binary '','2020-11-19 08:21:37',1,64902887),(64908087,'<p>Have you tried using the following yet?</p>\n<pre><code>@Id\n@Column(name = &quot;asset_type_attribute_id&quot;, insertable = false, updatable = false)\nprivate Long assetTypeAttributeId;\n</code></pre>\n<p>I think it might pose a problem that you list this attribute in the id class already.</p>\n<p>Could you try updating Hibernate to the latest version 5.4.24? If the problem still remains, please create an issue in the issue tracker(<a href=\"https://hibernate.atlassian.net\" rel=\"nofollow noreferrer\">https://hibernate.atlassian.net</a>) with a test case(<a href=\"https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java\" rel=\"nofollow noreferrer\">https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java</a>) that reproduces the issue.</p>\n','2020-11-19 08:39:03',_binary '\0','2020-11-19 08:39:03',0,64903351),(64960662,'<p>Issue in JIRA - <a href=\"https://hibernate.atlassian.net/browse/HHH-14340\" rel=\"nofollow noreferrer\">https://hibernate.atlassian.net/browse/HHH-14340</a>. And seems like I found workaround with @Embeddable annotation.</p>\n<pre><code>@Entity\n@Table(name = &quot;asset&quot;)\npublic class Asset {\n\n    @EmbeddedId\n    private AssetId assetPK;\n\n    @OneToMany(fetch = FetchType.LAZY, mappedBy = &quot;id.asset&quot;, cascade = CascadeType.ALL, orphanRemoval = true)\n    private Set&lt;AssetAssetTypeAttribute&gt; assetAssetTypeAttributes;\n\n    /* getters, setters and etc... */\n}\n\n@Embeddable\npublic class AssetId implements Serializable {\n    private Long id;\n    @Column(name = &quot;tenant_id&quot;)\n    private Long tenantId;\n\n    /* getters, setters and etc... */\n}\n\n@Entity\n@Table(name = &quot;asset_asset_type_attribute&quot;)\npublic class AssetAssetTypeAttribute {\n\n    @EmbeddedId\n    private AssetAttributeId id;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;asset_type_attribute_id&quot;, referencedColumnName = &quot;id&quot;, insertable = false, updatable = false)\n    private AssetTypeAttribute assetTypeAttribute;\n\n    private String value;\n\n   /* getters, setters and etc... */\n}\n\n@Embeddable\npublic class AssetAttributeId implements Serializable {\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n            @JoinColumn(name = &quot;asset_id&quot;, referencedColumnName = &quot;id&quot;),\n            @JoinColumn(name = &quot;tenant_id&quot;, referencedColumnName = &quot;tenant_id&quot;),\n    })\n    private Asset asset;\n    private Long assetTypeAttributeId;\n    \n    /* getters, setters and etc... */\n}\n</code></pre>\n','2020-11-22 23:17:22',_binary '\0','2020-11-22 23:25:46',1,64903351),(64920367,'<p>As per anything to do with JPA, while the book is nice (and written by very knowledgable people, one of whom was directly involved in writing the spec), if there is anything in doubt, go to the spec itself for clarification. Derived ID is covered with examples in section 2.4.1 and would clear this up for you. It requires a ProjectId.class to use the same name as the ID value in the entity, and the same type as the ID it refers to - same format as you did for DeptId. In this case, it would need to be:</p>\n<pre><code>public class ProjectId implements Serializable\n{\n    private String name;\n    private DeptId dept;\n    // ...\n}\n</code></pre>\n<p>As for the JPA 1.0 usage - The statement on ID class being the same probably meant that the ID class for this would require the same 3 ID fields (and types) that matched the @ID annotations - same as they would now for such a class definition. If you mark it as an @ID, it must be represented in the ID class.</p>\n','2020-11-19 21:33:40',_binary '','2020-11-19 21:33:40',1,64914219),(64916770,'<pre><code>@ManyToOne(targetEntity=RefBankFormat.class, optional = false)\nprivate RefBankFormat bankFormat;\n</code></pre>\n<p>bankFormat is set mandatory(not null) so you first have to save this object in the database and then you are allowed to save BankLocation object.</p>\n<p>OR</p>\n<p>define a strategy for transitive persistence, a.k.a CascadeType.</p>\n','2020-11-19 17:21:15',_binary '\0','2020-11-19 17:21:15',0,64916694),(64926945,'<p>You more or less asked the same question twice and the answer is the same as here: <a href=\"https://stackoverflow.com/a/64926449/412446\">https://stackoverflow.com/a/64926449/412446</a></p>\n','2020-11-20 09:31:31',_binary '\0','2020-11-20 09:31:31',0,64916694),(68642952,'<p>I had a similar issue, and I was able to solve it by using @MappedSuperclass.</p>\n<p>The easiest way to prevent multiple inserts would be to move all the properties down the hierarchy past class B. You can create an abstract class between B and C and use the @MappedSuperclass annotation if you wish to keep the properties defined separately while keeping B as a managed type.</p>\n<p>Here would be the full hierarchy:</p>\n<pre><code>@Entity\n@Table(name = &quot;TABLE_A&quot;)\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\nclass A {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public long getId() {\n        return id;\n    }\n}\n\n/**\n * This will maintain B\'s interface since the method definitions will now be in an abstract subclass.\n */\ninterface BProperties {\n    String getProperty1();\n    void setProperty1(String property1);\n}\n\n@Entity\nabstract class B extends A implements BProperties {\n\n}\n\n@MappedSuperclass\nabstract class AbstractB extends B {\n\n    @Column(table = &quot;TABLE_B&quot;)\n    private String property1;\n\n    public String getProperty1() {\n        return property1;\n    }\n\n    public void setProperty1(String property1) {\n        this.property1 = property1;\n    }\n}\n\n@Entity\n@SecondaryTable(name = &quot;TABLE_B&quot;)\n@DiscriminatorValue(&quot;C&quot;)\nclass C extends AbstractB {\n\n    @Column(table = &quot;TABLE_B&quot;)\n    private String property2;\n\n    public String getProperty2() {\n        return property2;\n    }\n\n    public void setProperty2(String property2) {\n        this.property2 = property2;\n    }\n}\n</code></pre>\n<p>(If you did not need B as a managed type, then you do not need an additional AbstractB class; you can keep the properties in B and mark the class with @MappedSuperclass)</p>\n<p>The problem here is that class B can no longer contain properties. If it does, all of its children will fail because of the issue with multiple inserts. If you did need a concrete class with properties defined only in B (or now AbstractB with this pattern), then you can extend AbstractB and declare the class with the @SecondaryTable and @Entity annotations. Example:</p>\n<pre><code>@Entity\n@SecondaryTable(name = &quot;TABLE_B&quot;)\n@DiscriminatorValue(&quot;B&quot;)\nclass ConcreteB extends AbstractB {\n\n}\n</code></pre>\n','2021-08-03 21:25:09',_binary '\0','2021-08-03 21:25:09',0,64926301),(64931436,'<p>You currently have defined your Education class to have a single reference variable to Faculty:</p>\n<pre><code>public class Education extends BaseEntity {\n\n    private Faculty faculty;\n\n}\n</code></pre>\n<p>But if you want to have a OneToMany relationship From Education To Faculty that means that one Education object needs to have references to multiple Faculty objects. So you need to change your data structure so that your Education class can hold multiple references to Faculty objects.</p>\n<p>This is usually done by defining the field as a Collection like List:</p>\n<pre><code>public class Education extends BaseEntity {\n\n    private List&lt;Faculty&gt; faculties;\n\n}\n</code></pre>\n','2020-11-20 14:40:01',_binary '\0','2020-11-20 14:40:01',2,64931331),(64931498,'<p>If you are saying Education can have multiple faculties, then it should be defined as</p>\n<pre><code>@OneToMany(mappedBy = &quot;education&quot;, fetch = FetchType.LAZY,\n        cascade = CascadeType.ALL)\nprivate Set&lt;Faculty&gt; faculties;\n</code></pre>\n','2020-11-20 14:43:32',_binary '\0','2020-11-20 14:43:32',1,64931331),(64933557,'<p>With this</p>\n<pre><code>    @PathVariable User user,\n</code></pre>\n<p>you are referring to variable within your path <code>{type}/{user}/list</code>, which is just a String, probably the userId.</p>\n<p>It should be something like</p>\n<pre><code>    @PathVariable(&quot;user&quot;) String userId\n</code></pre>\n<p>after which you can load the user, like <code>User user = userService.getUser(userId);</code> UserService or UserRepository must be wired into the Controller for this.</p>\n','2020-11-20 16:52:40',_binary '\0','2020-11-20 16:52:40',0,64932831),(64943521,'<p>Solved problem, spent to many hours with this problem but ansnwer was easy - not correct xml files. I moved</p>\n<pre><code>&lt;context:component-scan base-package=&quot;by.itacademy.newsproject.*&quot;/&gt;\n&lt;mvc:annotation-driven /&gt;\n</code></pre>\n<p>from dispatcher-servlet.xml  to hibernateConfig.xml  and problem soled. But why so, still don\'t know why.. Now @Transactional in Service layer wrapping methods in DAO like it should be.</p>\n','2020-11-21 13:19:27',_binary '\0','2020-11-21 13:19:27',0,64941650),(64955389,'<ol>\n<li><p>I would suggest you to use java 8 <code>java.time.LocalTime</code> instead of <code>java.sql.Time</code>.</p>\n</li>\n<li><p>According to the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#basic-enums\" rel=\"nofollow noreferrer\">documentation</a> if you want to save the enum value’s name you should use <code>EnumType.STRING</code>:</p>\n</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>@Enumerated(EnumType.STRING)\nDays day;\n</code></pre>\n<ol start=\"3\">\n<li>You should explicitly specify the column names for the following fields:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>@Column(name = &quot;start_time&quot;)\nTime start;\n\n@Column(name = &quot;end_time&quot;)\nTime end;\n</code></pre>\n<ol start=\"4\">\n<li>See <a href=\"https://vladmihalcea.com/the-best-way-to-map-an-enum-type-with-jpa-and-hibernate/\" rel=\"nofollow noreferrer\">this article</a>. To fix</li>\n</ol>\n<pre><code>org.postgresql.util.PSQLException: ERROR: column &quot;day&quot; is of type days but expression is of type character varying\n</code></pre>\n<p>you should use hibernate <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#basic-custom-type\" rel=\"nofollow noreferrer\">custom type</a> (you can write it by yourself or use <a href=\"https://vladmihalcea.com/the-hibernate-types-open-source-project-is-born/\" rel=\"nofollow noreferrer\">hibernate-types</a> library) or simply change the column  <code>day days NOT NULL</code> definition to something like this <code>day  VARCHAR(10) NOT NULL</code>.</p>\n','2020-11-22 14:33:45',_binary '','2020-11-22 15:54:44',0,64955193),(65252980,'<p>Just add the following to your SQL:</p>\n<pre><code>CREATE CAST (character varying as days) WITH INOUT AS IMPLICIT;\n</code></pre>\n<p>This way, JPA can continue to convert objects of Java Enum type Days to SQL type &quot;varchar&quot; as you told it with <code>@Enumerated(STRING)</code>. Postgres will then silently cast that varchar to its &quot;days&quot; type.</p>\n','2020-12-11 14:16:42',_binary '\0','2020-12-11 14:16:42',1,64955193),(64982814,'<p>I would recommend you use real embeddable ids as id classes have some rough edges. Use something like this:</p>\n<pre><code>@Embeddable\npublic class BestSellerEmbeddable implements Serializable { ... }\n\n@Entity\n@Table(name=&quot;bestseller&quot;)\npublic class BestSeller {\n\n    @EmbeddedId\n    private BestSellerEmbeddable id;\n    \n    @Column(name=&quot;sellerName&quot;)\n    private String sellerName;\n    \n    @OneToOne\n    @JoinColumn(name=&quot;item_id&quot;, insertable = false, updatable = false)\n    private Item item;\n\n}\n</code></pre>\n','2020-11-24 08:33:19',_binary '\0','2020-11-24 08:33:19',0,64962041),(64967517,'<p>I would try to map User with insert = &quot;false&quot; update = &quot;false&quot; since where you have it set is in the User entity.</p>\n<p>With your code, you would have two user_id in the UserCompanyRole entity, the one of the EmbeddedId and the one of the audited field, as the one you will use for the queries is the one of the id, note the one of the audited field as insert = &quot;false&quot; update = &quot;false&quot;.</p>\n','2020-11-23 11:25:01',_binary '\0','2020-11-23 11:25:01',0,64966464),(65118545,'<p>I\'ve run into this problem before with similar relationships as what you\'ve described above. I don\'t think it\'s related to Envers, as I\'m not using Envers, and yet I was seeing similar exceptions to what you\'re seeing. I suppose you could test this by removing the @Audited and @AuditMappedBy annotations temporarily and seeing if you get a similar exception for UserCompanyRole vs. UserCompanyRole_AUD?</p>\n<p>To avoid the &quot;Repeated column in mapping&quot; error you might want to try the following:</p>\n<ol>\n<li>Remove the @JoinColumn annotation from User.userCompanyRoles</li>\n<li>Move the removed @JoinColumn annotation to UserCompanyRole.user</li>\n<li>If the above step does not work, convert the UserCompanyRole @JoinColumn to a @JoinFormula like so:</li>\n</ol>\n<pre><code>@EmbeddedId\nprivate UserCompanyRoleId userCompanyRoleId;\n\n@ManyToOne(fetch = FetchType.LAZY)\n@MapsId(&quot;userId&quot;)\n@JoinFormula(value = &quot;user_id&quot;, referencedColumnName= &quot;&lt;user pk column name&gt;&quot;)\n@Audited\nprivate User user;\n</code></pre>\n<p>The formula approach keeps Hibernate from adding another &quot;user_id&quot; column to the mapping.</p>\n<p>I\'m assuming User has a simple Id/primary key, as it wasn\'t mentioned. If it too is compound, you\'ll need something like the following:</p>\n<pre><code>    @JoinColumnsOrFormulas(value = {\n            @JoinColumnOrFormula(formula = @JoinFormula(value = &quot;tid&quot;, referencedColumnName = &quot;tid&quot;)),\n            @JoinColumnOrFormula(column = @JoinColumn(name = &quot;delegate_id&quot;, referencedColumnName = &quot;id&quot;,\n                    updatable = false, columnDefinition = ENTITY_ID_DEF,\n                    foreignKey = @ForeignKey(name = &quot;fk_delegation_identity&quot;)))\n    })\n\n</code></pre>\n','2020-12-03 01:23:01',_binary '\0','2020-12-03 01:23:01',0,64966464),(64968969,'<p>I have modified function to return json column as <code>varchar</code> and read via interface with getter methods.\nAnd then I have to add a Transformer to convert string into parsable JSON object mapping.</p>\n','2020-11-23 13:03:37',_binary '\0','2020-11-23 13:03:37',0,64967414),(64977819,'<p>Have you checked during registration that</p>\n<p><code>company = companyHibernateControl.findCompany(company.getCompanyName());</code></p>\n<p>returned non-empty value?</p>\n','2020-11-23 22:56:52',_binary '\0','2020-11-23 22:56:52',0,64976792),(64994538,'<p>You can force JPA to map properties of embedded ids in your columns using @AttributeOverride annotation</p>\n<pre><code>@Embedded\n@AttributeOverrides({\n        @AttributeOverride(name = &quot;productVariantId&quot;, column = @Column(name = &quot;variant_id&quot;)),\n        @AttributeOverride(name = &quot;productId&quot;, column = @Column(name = &quot;product_id&quot;))\n})\nprivate ProductVariantId productVariantId;\n</code></pre>\n<p>And do the same for ProductOptionId and OptionValueId in VariantValueId class.</p>\n','2020-11-24 20:43:57',_binary '\0','2020-11-24 21:46:02',1,64993785),(65001176,'<p>Try something like this instead:</p>\n<pre><code>@Data\n@NoArgsConstructor\n@Entity\n@Table(name = &quot;product_variants&quot;)\npublic class ProductVariant {\n\n    @EmbeddedId\n    @AttributeOverrides({\n        @AttributeOverride(name = &quot;productVariantId&quot;, column = @Column(name = &quot;variant_id&quot;)),\n        @AttributeOverride(name = &quot;productId&quot;, column = @Column(name = &quot;product_id&quot;))\n    })\n    private ProductVariantId productVariantId;\n\n    @NotNull\n    private Double price;\n\n    @MapsId(&quot;productId&quot;)\n    @ManyToOne(fetch = FetchType.LAZY)\n    private Product product;\n\n    //other properties\n}\n\n@Data\n@Embeddable\npublic class ProductVariantId implements Serializable {\n\n    @EqualsAndHashCode.Include\n    private Long productVariantId;\n    @EqualsAndHashCode.Include\n    private Long productId;\n}\n\n@Data\n@NoArgsConstructor\n@Entity\n@Table(name = &quot;variant_values&quot;)\npublic class VariantValue {\n\n    @EmbeddedId\n    @AttributeOverrides({\n        @AttributeOverride(name = &quot;productVariantId&quot;, column = @Column(name = &quot;variant_id&quot;)),\n        @AttributeOverride(name = &quot;productId&quot;, column = @Column(name = &quot;product_id&quot;)),\n        @AttributeOverride(name = &quot;optionId&quot;, column = @Column(name = &quot;option_id&quot;)),\n        @AttributeOverride(name = &quot;valueId&quot;, column = @Column(name = &quot;value_id&quot;))\n    })\n    private VariantValueId variantValueId;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n      @JoinColumn(name = &quot;variant_id&quot;, referencedColumnName = &quot;variant_id&quot;, insertable = false, updatable = false),\n      @JoinColumn(name = &quot;product_id&quot;, referencedColumnName = &quot;product_id&quot;, insertable = false, updatable = false)\n    })\n    private ProductVariant productVariant;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n      @JoinColumn(name = &quot;option_id&quot;, referencedColumnName = &quot;option_id&quot;, insertable = false, updatable = false),\n      @JoinColumn(name = &quot;product_id&quot;, referencedColumnName = &quot;product_id&quot;, insertable = false, updatable = false)\n    })\n    private ProductOption productOption;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumns({\n      @JoinColumn(name = &quot;option_id&quot;, referencedColumnName = &quot;option_id&quot;, insertable = false, updatable = false),\n      @JoinColumn(name = &quot;value_id&quot;, referencedColumnName = &quot;value_id&quot;, insertable = false, updatable = false)\n    })\n    private OptionValue optionValue;\n\n}\n\n@Embeddable\n@Data\npublic class VariantValueId implements Serializable {\n\n\n    @EqualsAndHashCode.Include\n    private Long productVariantId;\n    @EqualsAndHashCode.Include\n    private Long productId;\n    @EqualsAndHashCode.Include\n    private Long optionId;\n    @EqualsAndHashCode.Include\n    private Long valueId;\n}\n</code></pre>\n<p>Edit:</p>\n<p>Try this then:</p>\n<pre><code>@Data\n@NoArgsConstructor\n@Entity\n@Table(name = &quot;product_variants&quot;)\npublic class ProductVariant {\n\n    @EmbeddedId\n    @AttributeOverrides({\n        @AttributeOverride(name = &quot;productVariantId&quot;, column = @Column(name = &quot;variant_id&quot;)),\n        @AttributeOverride(name = &quot;productId&quot;, column = @Column(name = &quot;product_id&quot;))\n    })\n    private ProductVariantId productVariantId;\n\n    @NotNull\n    private Double price;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColum(name = &quot;product_id&quot;, insertable = false, updatable = false)\n    private Product product;\n\n    //other properties\n}\n</code></pre>\n','2020-11-25 08:43:18',_binary '','2020-11-25 14:22:11',2,64993785),(65059290,'<p>First of all, the <code>left join B b left join C c left join D d</code> part of your query doesn\'t really do anything except for hindering the query performance with redundant <code>JOIN</code>s. You might have wanted <code>JOIN FETCH</code> instead. <strong>However</strong>, please read <a href=\"https://stackoverflow.com/questions/16680626/how-do-i-do-a-deep-fetch-join-in-jpql\">this question</a> first before putting <code>FETCH</code> everywhere.</p>\n<p>Second of all, if your <code>hashCode</code> (or any other method, for that matter) tries to access a lazily fetched collection outside of an open persistence context, then yes, you\'ll be getting <code>LazyInitializationException</code>s. The solution is, well, to not make your methods do that.</p>\n<p>EDIT Are you using 2nd level cache, by any chance? I cannot say for sure that it will help, because as the answer I linked to points out, nested <code>FETCH JOIN</code>s are not supported, but try adding <code>cascade = DETACH</code> to all the eagerly fetched associations</p>\n','2020-11-29 10:49:40',_binary '\0','2020-12-04 16:18:32',1,65058723),(65176321,'<p>To avoid a <code>LazyInitializationException</code> inside your <code>hashCode()</code> or <code>equals()</code> method, just do not call any collections within your object. Read below why this implementation has a <strong>constant hash code</strong> and an <strong>equals method which relies solely on the primary key</strong>.</p>\n<pre><code>@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof User)) return false;\n    User user = (User) o;\n    return id != null &amp;&amp; id.equals(user.getId());\n}\n\n@Override\npublic int hashCode() {\n    return 24;\n}\n</code></pre>\n<p>The previous example is for the class <code>User</code> and assumes that the primary key is called <code>id</code> and is implemented as a class (not a primitive datatype) to get proper <code>null</code> values. <a href=\"https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/\" rel=\"nofollow noreferrer\">This blog article</a> describes very well why this strange implementation can and should be used.</p>\n<h2>Justification</h2>\n<p><code>equals()</code> and <code>hashCode()</code> have to return equal values for the same object. The entity which is compared must be equal to itself in all possible JPA stages. An attribute which is unique to each entity of a class and consistent (because it cannot be changed) is the database key.</p>\n<p>The only issue with it exists in the transient state which is before the entity is persisted. However, before persisting an object, objects can only be considered equal if there reference is equal. If the objects are persisted, obviously each primary key refers to exactly one entity per class/table.</p>\n<p>With this argumentation, the primary key forms an appropriate business key for the <code>equals()</code> method. However, when the primary key is used in the function <code>hashCode()</code> and an object is stored for example in a <code>Set</code> before it is persisted, the hash code would change when persisting the object and the <code>Set</code> would not work anymore. The way to keep the result of <code>hashCode()</code> <code>true</code> when <code>equals()</code> returns <code>true</code>, it cannot rely on the primary key.</p>\n<p>According to the argumentation below, this implementation defeats the performance benefits of structures like <code>HashMap</code> and <code>HashSet</code>. <a href=\"https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/\" rel=\"nofollow noreferrer\">&quot;However, for performance reasons, you should always limit the number of entities that are stored in a collection.&quot;</a> The performance penalty on side of the database is way higher than using only a single bucket.</p>\n','2020-12-07 04:54:21',_binary '\0','2020-12-08 09:17:16',2,65058723),(65176911,'<p>That\'s an interesting issue (bug) you ran into. Note that it\'s <em>not</em> a <code>LazyInitializationException</code>:</p>\n<pre><code>org.hibernate.HibernateException: collection was evicted\n</code></pre>\n<p>It happens when you load 2+ collections in depth due to <code>join fetch</code> <strong>and</strong> you use <code>HashSet</code>/<code>hashCode</code>. Hibernate knows it had to fetch the inner collection of <code>Company#garages</code> but at the moment when <code>Company#hashCode</code> is invoked (which happens in Hibernate internal code due to <code>HashSet</code>) - it hasn\'t done this yet. So it gets confused because the collection has been requested and it should\'ve been loaded - but it\'s not there. This could be called a bug though I wouldn\'t create a ticket for it - I\'d rather change the code.</p>\n<p>Iterating over other entities in <code>equals</code>/<code>hashCode</code> is inefficient and will result it more bugs. These methods should use immutable fields, even using <code>id</code> may cause issues in case it\'s assigned during persistence (identity and sequence strategies).</p>\n<p>You can skip <code>equals</code>/<code>hashCode</code> methods in Entities all together since ORM will ensure there\'s only 1 instance loaded via Session/EntityManager. This means that the references will always be the same and thus default <code>hashCode</code> will work just fine.</p>\n<p><code>equals</code>/<code>hashCode</code> are important for Value Objects (they aren\'t stored in DB), but for entities it\'s safer to rid of them.</p>\n','2020-12-07 06:15:16',_binary '','2020-12-08 10:47:07',3,65058723),(65065816,'<p>It looks like <code>Car</code> should be mapped to <code>Category</code> as <strong>many-to-one</strong>: every car has a category and one category can have multiple cars.</p>\n<p>In class Car:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@ManyToOne\n@JoinColumn(name = &quot;categoryIDFS&quot;)\nprvate Category category;\n</code></pre>\n<p>In  class Category:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@OneToMany(mappedBy = &quot;category&quot;) \nprivate List&lt;Car&gt; cars;  // all the cars belong to this category\n</code></pre>\n<p>Note, you need to use <code>@JoinColumn</code> with <code>@ManyToOne</code>. Not just <code>@Column</code></p>\n','2020-11-29 22:19:29',_binary '','2020-11-29 22:19:29',2,65065111),(65105871,'<p>check with below Query:-</p>\n<pre><code> @Query(SELECT u FROM CAMPAIGN u WHERE u.IDCAMPAIGN = ?1)\n    List&lt;Mensaje&gt; buscarCampaign(@Param(&quot;idCampaign&quot;)String idCampaign);\n</code></pre>\n<p>make your Query simple:--</p>\n<pre><code>CREATE TABLE CAMPAIGN(\n\n\n    ID integer not null,\n    id_Campaign VARCHAR2(10),\n    platform VARCHAR2(1),\n    device_ID VARCHAR2(10),\n    line_Number VARCHAR2(9),\n        \n    PRIMARY KEY (ID) \n\n);\n</code></pre>\n<p>property file :--</p>\n<pre><code>spring.jpa.hibernate.ddl-auto= none // if you want to create manually tbl\n</code></pre>\n<p>//pojo Mensaje table name is  CAMPAIGN right?</p>\n<pre><code>@Entity\n@Table(name=&quot;CAMPAIGN&quot;)        // **you have missed it**\npublic class Mensaje implements Serializable{\n    private static final long serialVersionUID = 1L;\n    \n\n//field\n//setter\n//getter\n}\n</code></pre>\n<p>Jpa provides you various method but still why you want to use JPQL though it\'s basic query.</p>\n<p>Hope that will resolve your issue.</p>\n','2020-12-02 10:02:25',_binary '\0','2020-12-02 11:29:07',0,65105082),(65122128,'<p>Solved!</p>\n<p>I\'ve made some changes,</p>\n<p>Reaname the class Mensaje.java to Campaign.java (the same nafe for the class an the oracle table) and the names of the fields in lowercase.</p>\n<p>The query it has been like this</p>\n<pre><code>@Repository\npublic interface GestionBBDD extends JpaRepository&lt;Campaign, Long&gt;{\n    \n    @Query(&quot;SELECT u FROM Campaign u WHERE u.campaign = ?1&quot;)\n    List&lt;Campaign&gt; buscarCampaign(@Param(&quot;idCampaign&quot;)String idCampaign);\n\n}\n</code></pre>\n<p>Thank you all, I am very grateful!</p>\n','2020-12-03 08:18:11',_binary '\0','2020-12-03 08:18:11',0,65105082),(65115127,'<p>Remove the MappedSuperClass from your Audit class. You could also have Audit extend DefaultRevisionEntity. All you would have in Audit class is your custom field.</p>\n<pre><code>@Column(name = &quot;user&quot;)\nprivate String user;\n</code></pre>\n<p>A custom audit revision entity:</p>\n<pre><code>@Entity\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@RevisionEntity(UserRevisionListener.class)\npublic class AuditRevisionEntity extends DefaultTrackingModifiedEntitiesRevisionEntity {\n  private static final long serialVersionUID = 1L;\n  \n  private Long userId;\n  \n  @Column(length = 100, nullable = false)\n  private String initiator;\n}\n</code></pre>\n<p>And revision listener</p>\n<pre><code>public class UserRevisionListener implements RevisionListener {\n  private static final String SYSTEM_USER = &quot;System&quot;;\n  private transient final SecurityUtils securityUtils;\n  \n  public UserRevisionListener(final SecurityUtils securityUtils) {\n    this.securityUtils = securityUtils;\n  }\n  \n  @Override\n  public void newRevision(Object revisionEntity) {\n    final AuditRevisionEntity are = (AuditRevisionEntity) revisionEntity;\n    \n    securityUtils.getPrincipal().ifPresentOrElse((appPrincipal) -&gt; {\n      are.setUserId(appPrincipal.getUserId());\n      are.setInitiator(appPrincipal.getDisplayName());\n    }, () -&gt; are.setInitiator(SYSTEM_USER));\n  }\n}\n</code></pre>\n<p>In my case I am getting the current principal(I am using a custom principal that has the extra fields) using a SecurityUtils helper and setting the AuditRevisionEntity as needed. Some changes are made by Quartz jobs so there is no principal in which case only the initiator is set.</p>\n','2020-12-02 19:47:04',_binary '','2020-12-02 19:47:04',1,65110697),(65140365,'<p>Try using <code>clientRepository.saveAndFlush(client)</code> instead to get the changes done to the join table flushed.</p>\n','2020-12-04 08:40:42',_binary '\0','2020-12-04 08:40:42',0,65122292),(66192378,'<p>manually clearing the many to relation solves the issue. As i dont use any CASCADE type or orphan removal so the many to many many field have to be cleared manually/</p>\n<pre><code>public class Discipline extends Person {\n\n    private static final long serialVersionUID = 431537630160539107L;\n\n    @ManyToOne\n    @JoinColumn(name = &quot;relation&quot;)\n    private ClientRelation relation;\n\n\n    @Column(name = &quot;fax&quot;)\n    private String fax;\n\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(name = &quot;client_disciplines&quot;,\n            joinColumns = @JoinColumn(name = &quot;discipline_id&quot;, referencedColumnName = &quot;id&quot;),\n            inverseJoinColumns = @JoinColumn(name = &quot;client_id&quot;, referencedColumnName = &quot;id&quot;))\n    private Set&lt;Client&gt; clients = new HashSet&lt;&gt;();\n\n    @Column(name = &quot;hasPermission&quot;)\n    private boolean hasPermission = false;\n\n\n\n    public Discipline(Company company) {\n        super(company);\n    }\n\n\n}\n\n@Override\n    @Transactional(readOnly = false)\n    public void delete(Long id) {\n        Preconditions.checkNotNull(id);\n        Discipline discipline=findById(id);\n        discipline.getClients().clear();\n        \n        disciplineRepository.delete(discipline);\n    }\n</code></pre>\n','2021-02-14 04:06:42',_binary '','2021-02-14 04:06:42',1,65122292),(65140762,'<p>A one-to-one mapping like this is AFAIK not supported by Hibernate. Apart from that, it\'s not safe to do this, unless you have a unique key defined for <code>TB_CONFIG(PRODUCT_ID, CONFIG_ID)</code> and <code>TB_CONFIG_LANG(PRODUCT_ID, CONFIG_ID)</code>. What\'s wrong with using a <code>@OneToMany</code> assocation for this like:</p>\n<pre><code>@OneToMany\n@JoinColumn(name = &quot;PRODUCT_ID&quot;, referencedColumnName = &quot;PRODUCT_ID&quot;, insertable = false, updatable = false)\n@JoinColumn(name = &quot;CONFIG_ID&quot;, referencedColumnName = &quot;CONFIG_ID&quot;, insertable = false, updatable = false)\nprivate Set&lt;ConfigurationLanguage&gt; languages;\n</code></pre>\n<p>This way, you only need a unique key for <code>TB_CONFIG_LANG(PRODUCT_ID, CONFIG_ID)</code>. To avoid that as well, you need to use a map:</p>\n<pre><code>@OneToMany\n@MapKeyColumn(name = &quot;LANGUAGE_ID&quot;)\n@JoinColumn(name = &quot;PRODUCT_ID&quot;, referencedColumnName = &quot;PRODUCT_ID&quot;, insertable = false, updatable = false)\n@JoinColumn(name = &quot;CONFIG_ID&quot;, referencedColumnName = &quot;CONFIG_ID&quot;, insertable = false, updatable = false)\nprivate Map&lt;String, ConfigurationLanguage&gt; languages;\n</code></pre>\n<p>But note that this is still not safe from a DB perspective. A foreign key must always refer to a unique key. So either you put the <code>Company_Id</code> and <code>Customer_Id</code> into the <code>TB_CONFIG_LANG</code> as well or you remove these two from the primary key of <code>TB_CONFIG</code></p>\n','2020-12-04 09:11:26',_binary '\0','2020-12-04 09:11:26',0,65125034),(65128396,'<p>Since one <code>Aliment</code> can have many (<code>@ManyToOne</code>) <code>Genres</code> associated with it. The information which <code>Genre</code> belongs to which <code>Aliment</code> needs to be stored in the table of <code>Genre</code>, which is <code>genre</code>.</p>\n<p><code>genre</code> already has a field <code>num_genre</code> which is its primary key, with <code>@JoinColumn(name = &quot;num_genre&quot;)</code> you instruct Hibernate to store the info which <code>Genre</code> belongs to which <code>Aliment</code> in that same column, which is not possible.</p>\n<p>Long story short, if you remove <code>@JoinColumn(name = &quot;num_genre&quot;)</code> it should work already, because Hibernate will create a column <code>alignment_id</code> in the <code>genre</code> table for you.</p>\n<hr />\n<p>I would also remove <code>numGenre</code>, since it is not annotated in any way it won\'t be managed by Hibernate anyway and the associated <code>Genre</code> will already be represented by the <code>genre</code> property. The existence of this property should not cause an error though.</p>\n','2020-12-03 14:56:37',_binary '\0','2020-12-03 15:43:09',0,65125800),(65155279,'<p>I found a similar problem described <a href=\"http://qaru.site/questions/17558795/could-not-get-constructor-for-orghibernatepersisterentitysingletableentitypersister-nullpointerexception\" rel=\"nofollow noreferrer\">here</a></p>\n<p>Please try to run under <code>Java 8</code>. The problem comes that you use <code>Java 11</code>.</p>\n<p>Most of the frameworks are not compatible and are not fully tested on Java 11.</p>\n','2020-12-05 08:55:16',_binary '','2020-12-05 09:05:00',1,65152306),(65171122,'<p>The problem is likely that, since the <code>@Id</code> is not marked with <code>@GeneratedValue</code>, Spring Data assumes all detached (transient) entities passed to <code>save()/saveAll()</code> should have <code>EntityManager.persist()</code> invoked on them.</p>\n<p>Try making <code>IotEntity</code> implement <code>Persistable</code> and returning <code>false</code> from <code>isNew()</code>. This will tell Spring Data to always use <code>EntityManager.merge()</code> instead, which should have the desired effect (i.e. inserting nonexistent entities and updating existing ones).</p>\n','2020-12-06 17:44:33',_binary '\0','2020-12-06 17:44:33',3,65162298),(65288816,'<p>Looks like I found the root of this behaviour.</p>\n<p>Main App launcher look like:</p>\n<pre><code>@AllArgsConstructor\n@SpringBootApplication\npublic class Application implements CommandLineRunner {\n\n    private final DataService dataService;\n    private final QrReaderServer qrReaderServer;\n    private final MonitoringService monitoringService;\n\n    @Override\n    public void run(String... args) {\n        dataService.fetchAndStoreData();\n        monitoringService.launchMonitoring();\n        qrReaderServer.launchServer();\n    }\n</code></pre>\n<p>All 3 steps have strict execution sequence. And the first one has to repeat for updating data locally if it is needed. Two other just servers which work with stored data only.</p>\n<p>Where the first method look like:</p>\n<pre><code>@Scheduled(fixedDelay = 15_000)\npublic void fetchAndStoreData() {\n    log.debug(&quot;START_DATA_FETCH&quot;);\n\n    carParkService.fetchAndStoreData();\n    entityService.fetchAndStoreData();\n    assignmentService.fetchAndStoreData();\n    permissionService.fetchAndStoreData();\n    capacityService.fetchAndStoreData();\n\n    log.debug(&quot;END_DATA_FETCH&quot;);\n}\n</code></pre>\n<p>Also, this execution is scheduled as well.</p>\n<p>When the app starts it tried to execute this fetching twice:</p>\n<pre><code>2020-12-14 14:00:46.208 DEBUG 16656 --- [pool-3-thread-1] c.s.s.s.data.impl.DataServiceImpl        : START_DATA_FETCH\n2020-12-14 14:00:46.208 DEBUG 16656 --- [  restartedMain] c.s.s.s.data.impl.DataServiceImpl        : START_DATA_FETCH\n</code></pre>\n<p>2 threads run at the same catch and store in parallel - trying to <code>insert</code> data. (tables are recreated at every start).</p>\n<p>All later fetches are fine, they are executed only by <code>@Sceduled</code> thread.</p>\n<p>If comment <code>@Sceduled</code> - it will work fine without any Exceptions.</p>\n<hr />\n<p><strong>SOLUTION:</strong></p>\n<p>Added additional boolean property to service class:</p>\n<pre><code>@Getter\nprivate static final AtomicBoolean ifDataNotFetched = new AtomicBoolean(true);\n\n@Override\n@Scheduled(fixedDelay = 15_000)\n@Order(value = Ordered.HIGHEST_PRECEDENCE)\npublic void fetchAndStoreData() {\n    ifDataNotFetched.set(true);\n    log.debug(&quot;START_DATA_FETCH&quot;);\n\n    // fetch and store data with `saveAll()`\n\n    log.debug(&quot;END_DATA_FETCH&quot;);\n    ifDataNotFetched.set(false);\n}\n</code></pre>\n<p>And control the value after the application is started:</p>\n<pre><code>@Value(&quot;${sharepark.remote-data-fetch-timeout}&quot;)\nprivate int dataFetchTimeout;\nprivate static int fetchCounter;\n\n@Override\npublic void run(String... args) {\n    waitRemoteDataStoring();\n    monitoringService.launchMonitoring();\n    qrReaderServer.launchServer();\n}\n\nprivate void waitRemoteDataStoring() {\n    do {\n        try {\n            if (fetchCounter == dataFetchTimeout) {\n                log.warn(&quot;Data fetch timeout reached: {}&quot;, dataFetchTimeout);\n            }\n\n            Thread.sleep(1_000);\n\n            ++fetchCounter;\n            log.debug(&quot;{} Wait for data fetch one more second...&quot;, fetchCounter);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    } while (DataServiceImpl.getIfDataNotFetched().get() &amp;&amp; fetchCounter &lt;= dataFetchTimeout);\n}\n</code></pre>\n','2020-12-14 12:10:18',_binary '','2020-12-18 11:19:51',0,65162298),(65361483,'<p>Spring Data JPA uses combination of @version @Id field to decide the whether to merge or insert.</p>\n<ul>\n<li>null @id and null @version would mean new record hence insert</li>\n<li>if @id is present @version field is used to decide whether to merge or insert.</li>\n<li>Update is only invoked when (update .... where id = xxx and version = 0)</li>\n</ul>\n<p>Beacuse you have @id and @version missing, its trying to insert, because underlysing system decided this is new record and when run sql u get error.</p>\n','2020-12-18 17:36:28',_binary '\0','2020-12-18 17:36:28',0,65162298),(68616379,'<p>Can you pls try with   <code>@GeneratedValue(strategy = GenerationType.AUTO)</code>\nThis worked for me.</p>\n','2021-08-02 04:29:47',_binary '\0','2021-08-02 04:37:41',0,65162298),(65170601,'<blockquote>\n<p>But when there is already an existing row in the details table the old row is deleted...</p>\n</blockquote>\n<p>...which is to be expected with <code>orphanRemoval = true</code></p>\n<blockquote>\n<p>...and a new row is inserted</p>\n</blockquote>\n<p>...which is obviously to be expected as well, since you\'re overwriting the existing <code>StockDetails</code> associated with <code>s</code> with a brand new instance of <code>StockDetails</code>.</p>\n<p>If you wish to update the existing <code>StockDetails</code>, rather than create a new <code>StockDetails</code> entity, you need to, well, do just that in Java code.</p>\n<blockquote>\n<p>I could also just update the existing Stock.details field but this would lead in just copying all the fields from object A to object B...</p>\n</blockquote>\n<p>that would be the least error-prone approach</p>\n<blockquote>\n<p>...but I guess there is a smarter way doing this</p>\n</blockquote>\n<p>You could just do:</p>\n<pre><code>StockDetails n = new StockDetails();\nn.setId(s.getStockDetails().getId());\n... //configure the remaining properties\nn.setStock(s);\nentityManager.merge(n);\n</code></pre>\n','2020-12-06 16:52:31',_binary '\0','2020-12-06 16:57:38',1,65169383),(65170643,'<p>As you might have guessed you are actually creating a new <code>StockDetails</code> and replacing the old one. If you want to update the existing <code>StockDetails</code> you really need to fetch that and update it field by field (as you told you could do). So like:</p>\n<pre><code>StockDetails sd = s.getStockDetails();\nsd.setSomeFiled(updateValue);\n// ... copying field by field\n</code></pre>\n<p>To prevent copying field by field you can obtain <code>StockDetails</code> from the database and make the possible edits directly into it so there would not be a need to copy each field.</p>\n<p>However if it is a case - for example - that you need to write values from some DTO to your entity there are libraries that you can use to ease the pain of copying.</p>\n<p>Just to mention one <code>ModelMapper</code>. With it the copying goes like:</p>\n<pre><code>ModelMapper mm = new ModelMapper();\nStockDetails sd = s.getStocDetails();\nmm.map(stockDetailsDto, sd);\n</code></pre>\n<p>where <code>stockDetailsDto</code> is some DTO object that contains fields to update to entity.</p>\n<p>If your <code>StockDetails</code> contains all the other fields also even those not changed the <code>em.merge</code> is most easy as told in <a href=\"https://stackoverflow.com/a/65170601/6413377\">answer from crizzis</a>.</p>\n<p>But if you get only the updated fields then the other fields would be set to null. Sometimes id is not settable and then merge is impossible.</p>\n','2020-12-06 16:55:28',_binary '\0','2020-12-06 17:22:54',0,65169383),(65169626,'<p>Try this in you <code>Test</code> class:</p>\n<pre><code>@JoinColumn\n@OneToOne(targetEntity = TestName.class)\nprivate TestName name;\n</code></pre>\n','2020-12-06 15:15:21',_binary '\0','2020-12-06 15:15:21',0,65169524),(65178576,'<p>This is most probably due to the package not being scanned properly or the new entity not being declared in the persistence.xml or orm.xml. See <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/domain/EntityScan.html\" rel=\"nofollow noreferrer\">https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/domain/EntityScan.html</a></p>\n','2020-12-07 08:51:55',_binary '\0','2020-12-07 08:51:55',0,65169524),(65195780,'<p>You <code>spe_workflow</code> table has a composite primary key, so you should correct your mapping accordingly. There are several possible <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite\" rel=\"nofollow noreferrer\">approaches</a>.</p>\n<p>For example you can use <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-nonaggregated\" rel=\"nofollow noreferrer\">@IdClass</a>:</p>\n<pre class=\"lang-java prettyprint-override\"><code>\n@Entity\n@Table(name = &quot;spe_workflow&quot;)\n@IdClass(ProcessFlowPK.class)\npublic class ProcessFlow implements IPojo {\n\n    @Id\n    @Column(name = &quot;id&quot;)\n    private Integer id;\n\n    @Id\n    @Column(name = &quot;organization_id&quot;)\n    private Integer organizationId;\n  \n    // ...\n}\n\npublic class ProcessFlowPK implements Serializable {\n\n    private Integer id;\n    private Integer organizationId;\n\n    public ProcessFlowPK() {\n    }\n\n    public ProcessFlowPK(Integer id, Integer organizationId) {\n        this.id = id;\n        this.organizationId = organizationId;\n    }\n\n    // equals , hashCode , getters , setters are omitted for brevity\n}\n</code></pre>\n','2020-12-08 08:47:50',_binary '','2020-12-08 22:04:33',1,65195631),(65200762,'<p>Changing the annotation of id field as</p>\n<pre><code>@GeneratedValue(strategy = GenerationType.SEQUENCE)\n</code></pre>\n<p>worked. But I don\'t understand why.<br />\nAnd I don\'t want to use a sequence. I want to use an auto-generated ID and get a value back post insertion.<br />\nI need an annotation resulting exactly:</p>\n<pre><code>GENERATED BY DEFAULT ON NULL AS IDENTITY\n</code></pre>\n<p>I tried to use the <strong>columnDefinition</strong>. You can see that &quot;not null&quot; is appended automatically even I use <strong>nullable = true</strong>.<br />\n<a href=\"https://i.stack.imgur.com/iPHF3.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/iPHF3.png\" alt=\"enter image description here\" /></a></p>\n','2020-12-08 14:24:12',_binary '\0','2020-12-08 17:39:39',0,65198284),(65232809,'<p>Oracle should support the <code>DEFAULT</code> syntax, I\'ve seen it being used like here: <a href=\"https://www.techrepublic.com/article/oracle-tip-how-to-use-default-values-with-database-columns/\" rel=\"nofollow noreferrer\">https://www.techrepublic.com/article/oracle-tip-how-to-use-default-values-with-database-columns/</a></p>\n<p>Maybe there are different editions of Oracle and yours does not have support for this? Or maybe you need to use <code>GENERATED BY DEFAULT AS IDENTITY</code>? Anyway, you can override this by subclassing <code>org.hibernate.dialect.identity.Oracle12cIdentityColumnSupport</code> and <code>org.hibernate.dialect.Oracle12cDialect</code> which then has to return that subclass instance in <code>getIdentityColumnSupport()</code>.</p>\n<p>In a custom <code>Oracle12cIdentityColumnSupport</code> class you can also use <code>null</code> for <code>getIdentityInsertString</code> instead of <code>default</code>, but then make sure you also change <code>getIdentityColumnString</code> to use <code>generated by default on null as identity</code>.</p>\n<p>By the way, I would recommend using sequences whenever possible for performance reasons. The use of sequences and sequence caching allows Hibernate to defer/reorder and batch inserts which will improve performance drastically when inserting a lot.</p>\n','2020-12-10 10:31:28',_binary '\0','2020-12-10 10:31:28',1,65198284),(65239794,'<p>As Christian suggested, I tried <code>Oracle12cIdentityColumnSupport</code> method and successfully changed Hibernate\'s way of generating IDENTITY ddl. But I got the same error, <code>Invalid arguments in call</code> :(<br />\nSeems like the only way for me is <code>GenerationType.SEQUENCE</code><br />\nAFAIK, <code>generated by default on null as identity</code> is the least restrictive way of defining id columns and allowing null id\'s while inserting.</p>\n<p><a href=\"https://i.stack.imgur.com/YV1fy.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/YV1fy.png\" alt=\"enter image description here\" /></a></p>\n','2020-12-10 17:56:06',_binary '\0','2020-12-10 18:01:06',0,65198284),(65232306,'<p>The problem is that you are assigning the same name to both entities. <a href=\"https://vladmihalcea.com/the-best-way-to-map-the-single_table-inheritance-with-jpa-and-hibernate/\" rel=\"nofollow noreferrer\">You don\'t need to do that</a>. You can annotate your parent entity with @Entity, @Table and @Inheritance (which by default employs single table inheritance) and your subclass entities with just @Entity:</p>\n<pre><code>@Entity\n@Table(&quot;person&quot;)\n@Inheritance\npublic class Person {\n    //fields...\n}\n@Entity\npublic class CustomPerson extends Person {\n    //additional fields\n}\n</code></pre>\n','2020-12-10 10:01:43',_binary '','2020-12-10 10:01:43',1,65232125),(65324430,'<p>You can configure your data source to validate the connection everytime before handling it over to the application:</p>\n<pre><code>            &lt;datasource ...&gt;\n                ...\n                &lt;validation&gt;\n                    &lt;validate-on-match&gt;true&lt;/validate-on-match&gt;\n                &lt;/validation&gt;\n            &lt;/datasource&gt;\n</code></pre>\n','2020-12-16 13:40:03',_binary '\0','2020-12-16 13:40:03',0,65301670),(65317152,'<p>You need to use non-primitive wrapper types; e.g., <code>Boolean</code> instead of <code>boolean</code>,  <code>Integer</code> instead of <code>int</code>.</p>\n<p>A <code>null</code> value cannot be assigned to a <code>primitive</code> type, like <code>int</code>, <code>long</code>, <code>boolean</code>, etc. If the database column that corresponds to the field in your object can be null, then your field should be a wrapper class, like <code>Integer</code>, <code>Long</code>, <code>Boolean</code>, etc.</p>\n<p>So your field should look like below.</p>\n<pre><code>@NotNull\n@Column(name = &quot;tax_exempt&quot;, nullable = false)\nprivate Boolean taxExempt;\n</code></pre>\n','2020-12-16 04:03:12',_binary '\0','2020-12-16 04:03:12',0,65313088),(68083031,'<p>In the end the solution was to add <code>@Transactional</code> to the controller. Hope this might help someone.</p>\n','2021-06-22 11:50:12',_binary '','2021-06-22 11:50:12',0,65337098),(65391338,'<p>How does <code>AbstractDBO</code> look like? Maybe you are declaring an id there as well?</p>\n','2020-12-21 10:45:01',_binary '\0','2020-12-21 10:45:01',0,65342367),(65375775,'<p>I find <code>RecordSimulation</code> and <code>SimulationRecords</code> superfluous. Such design ist against principles of Hibernate and JPA.</p>\n<p>I recommend following approach:</p>\n<pre><code>@Entity\n@Table(name = &quot;Record&quot;)\n@Getter\npublic class Record extends BaseEntity\n{\n    @ManyToOne\n    private Simulation simulation;\n\n}\n\n@Entity\n@Table(name = &quot;Simulation&quot;)\n@Getter\npublic class Simulation extends BaseEntity\n{\n\n    @OneToMany\n    private SimulationRecords simulationRecords;\n\n}\n</code></pre>\n<p><code>RecordParameters</code> has no attributes and I don\'t see any reason in such design. Delete the class <code>RecordParameters</code> and put its attributes to the class <code>Record</code>.</p>\n<p>The same about <code>SimulationParameters</code>: Delete this class and put its attributes to the class <code>Simulation</code>.</p>\n','2020-12-20 00:18:22',_binary '\0','2020-12-20 00:18:22',0,65375614),(65412919,'<p>Turns out this way of calling a pageable @NamedNativeQuery is correct. One of the arguments being returned from the database was null and was being assigned to primitive when it should have been to the class variant of it. So rather than assigning it to type Integer I was assigning it to type int. This caused it to fail on finding the proper constructor for my Query. It also just so happens the num I was trying for this case had that null variable for that argument, and the other nums didn\'t. After fixing replacing the primitive with the class variant, everything works fine.</p>\n','2020-12-22 17:09:47',_binary '\0','2020-12-22 17:09:47',0,65401743),(65416509,'<p>The solution to this problem was pointed out by Susan Mustafa, which was to format the yml file properly, for more details check the comment.</p>\n','2020-12-22 22:16:48',_binary '\0','2020-12-22 22:16:48',0,65416376),(65422367,'<ol>\n<li>I guess this:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>@ManyToOne(fetch = FetchType.LAZY)\n@JoinColumn(name = &quot;id&quot;, insertable = false, updatable = false)\nprivate CashAccount cashAccount;\n</code></pre>\n<p>should be corrected like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@ManyToOne(fetch = FetchType.LAZY)\n@JoinColumn(name = &quot;cashaccountid&quot;)\nprivate CashAccount cashAccount;\n</code></pre>\n<ol start=\"2\">\n<li>As it suggested in this <a href=\"https://howtodoinjava.com/hibernate/solved-hsqlexception-data-exception-invalid-character-value-for-cast/\" rel=\"nofollow noreferrer\">article</a>:</li>\n</ol>\n<blockquote>\n<p>Make sure you are mapping values to correct columns in query. <em>Best way is to define column name and values in query as well.</em></p>\n</blockquote>\n<p>So, I would suggest you to rewrite your <code>insert</code> statement in the following way:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>INSERT INTO cashaccount(id, number, username, availablebalance, description)\nVALUES (1,\'10669803404133150948\', \'ray\', 3424.32,\'Checking Account\');\n...\nINSERT INTO creditaccount(id, number, username, description, availablebalance, cashaccountid)\nVALUES\n(1,\'4024 0071 5848 6471\', \'ray\', \'Visa Gold\',3424.32, 1);\n...\n</code></pre>\n','2020-12-23 10:00:53',_binary '','2020-12-24 23:12:42',1,65421870),(65453714,'<p>Your problem is that you\'re passing <em>the actual lazy <code>List</code></em> into <code>setRoles</code>, which doesn\'t trigger the full load. This indicates (immediately) that while you\'ve separated your top-level database class from your top-level DTO, it\'s a &quot;shallow&quot; separation, which doesn\'t fully materialize the values. You haven\'t shown whether <code>RoleModel</code> is an entity or an embeddable, and that matters.</p>\n<p>So the first step is to copy the items into a non-JPA form. If <code>RoleModel</code> embeddable (essentially a POJO), this could be as simple as <code>setRoles(new ArrayList&lt;&gt;(roles))</code>. Otherwise, you need a nested DTO, and at that point might consider something like MapStruct.</p>\n<p>In either case, though, you\'re likely to run into the <em>N+1 problem</em>. You in fact <em>do</em> want an eager fetch <em>in this case</em>, and that\'s what JPA entity graph is for. You can tell Spring Data to fetch the list eagerly only when you want it, and this is a perfect example of when to do that.</p>\n','2020-12-26 04:53:12',_binary '\0','2020-12-26 04:53:12',1,65453646),(65457292,'<p>I would suggest you to follow <a href=\"https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html\" rel=\"nofollow noreferrer\">java naming conventions</a>. According to this roles:</p>\n<blockquote>\n<p><em>Classes</em>: Class names should be nouns, in mixed case with the first letter of each internal word capitalized.</p>\n<p><em>Variables</em>: Except for variables, all instance, class, and class constants are in mixed case with a lowercase first letter. Internal words start with capital letters.</p>\n</blockquote>\n<p>So, I would suggest you to correct your mapping in the following way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name=&quot;Sales&quot;)\npublic class Sale implements Serializable{\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = &quot;sale_id&quot;, nullable = false)\n    private int saleId;\n\n    @Column(name = &quot;promotionid_fk&quot;)\n    private int promotionId;\n\n    // ...\n\n    //maps one sale to many sale details relationship\n    @OneToMany(mappedBy = &quot;sale&quot;, fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;SaleDetails&gt; saleDetails;\n\n\n    // default constructor, should be present\n    // It is used by hibernate for entity instantiation\n    public Sale() {\n       saleDetails = new ArrayList&lt;&gt;();\n    }\n\n    // getters, setters\n\n    // The addSaleDetail() and removeSaleDetail() are utility methods that\n    // synchronize both ends whenever a child element is added or removed.\n    public void addSaleDetail(SaleDetails saleDetail)\n    {\n        saleDetails.add(saleDetail);\n        saleDetail.setSale(this);\n    }\n\n    public void removeSaleDetail(SaleDetails saleDetail)\n    {\n        saleDetails.remove(saleDetail);\n        saleDetail.setSale(null);\n    }\n}\n\n@Entity\n@Table(name = &quot;Sale_Details&quot;)\npublic class SaleDetails implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = &quot;sale_detail_id&quot;)\n    private int saleDetailId;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;saleid_fk&quot;)\n    private Sale sale;\n\n    // This should be removed\n    // @Column(name = &quot;saleid_fk&quot;)\n    // private int saleid_fk;\n\n    @Column(name = &quot;productid_fk&quot;)\n    private int productId;\n\n    // ...\n\n    public SaleDetails(){\n    }\n\n    // getters, setters\n}\n</code></pre>\n<ol>\n<li><p>The value in the <code>mappedBy</code> referred to the field name of another side of the association.</p>\n</li>\n<li><p>You can omit to use the <code>referencedColumnName</code> if the foreign key referred to the primary key field of target entity.</p>\n</li>\n</ol>\n<p>And an example of creation and saving a new Sale:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Sale sale = new Sale();\nsale.setPromotionId(1);\n\n// ...\nSaleDetails saleDetail1 = new SaleDetails();\nsaleDetail1.setProductId(2);\n// set other fields except sale\nsale.addSaleDetail(saleDetail1);\n\nSaleDetails saleDetail2 = new SaleDetails();\nsaleDetail2.setProductId(3);\n// set other fields except sale\nsale.addSaleDetail(saleDetail2);\n\nentityManager.persist(sale);\n</code></pre>\n','2020-12-26 14:20:13',_binary '','2020-12-26 19:52:44',1,65456567),(65469896,'<blockquote>\n<p>I am not sure how to not save the User and Role object which already exists in the database.</p>\n</blockquote>\n<p>You can obtain an entity reference without initializing its data by calling <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#pc-get-reference\" rel=\"nofollow noreferrer\">EntityManager.getReference</a> in the following way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Course course = new Course();\ncourse.setUser( entityManager.getReference( User.class, userId) );\n// ...\ncourseRepository.save(course);\n</code></pre>\n','2020-12-27 19:59:29',_binary '','2020-12-27 19:59:29',1,65468753),(65469517,'<p>You are not actually using the request parameters because your product constructor looks like this:</p>\n<pre><code>public Product(String string, String string2) {\n    super();\n    // TODO Auto-generated constructor stub\n}\n</code></pre>\n<p>So this line doesn\'t do what you expect:</p>\n<pre><code>Product product= new Product(request.getParameter(&quot;prodId&quot;),request.getParameter(&quot;prodName&quot;));\n</code></pre>\n<p>And neither do these:</p>\n<pre><code>Product p = new Product();\np.setName(product.getName());\np.setId(product.getName());\n</code></pre>\n<p>or these:</p>\n<pre><code>query.setParameter(&quot;idVal&quot;, product.getId());\nquery.setParameter(&quot;nameVal&quot;, product.getName());\n</code></pre>\n<p>(by the way, not sure what is the use of <code>p</code> if you still use <code>product</code> to set the query params).</p>\n<p>So you end up with null for the product name, and 1 for the id because of the <code>GenerationType.AUTO</code>, otherwise that would have been null too, I think.</p>\n<p>You need to change your constructor to use the parameters:</p>\n<pre><code>public Product(String string, String string2) {\n    this.id = string;\n    this.name = string2;\n}\n</code></pre>\n<p>This way, you will later have something to send to your database query.</p>\n','2020-12-27 19:14:45',_binary '','2020-12-27 19:37:53',0,65468860),(65481100,'<p>One of the reason this can happen is when <code>insertData</code> List you are passing is empty.</p>\n<p>If I use below code ( please note that I have removed few columns to simplify it on my test environment with H2 database) - I get the error you described if empty list is passed and that\'s because there is indeed nothing to bind for the name parameter as the loop is not executed.</p>\n<pre><code>try {\n            em.getTransaction().begin();\n            System.out.println(&quot;Beginning transaction for insertPromoData&quot;);\n            \n            Query query = em.createNativeQuery(\n                    &quot;INSERT INTO U_USER_PROMO (ITEM, LOC, WK_START, NUMBER_OF_WEEKS, TYPE, FCSTID, QTY) VALUES (:item, :location, :wkStart, :numberOfWeeks, :type, :fcstId, :quantity)&quot;);\n            for (InsertPromoData promoData : insertData) {\n                query.setParameter(&quot;item&quot;, promoData.getId().getItem());\n                query.setParameter(&quot;location&quot;, promoData.getId().getLoc());\n                query.setParameter(&quot;wkStart&quot;, promoData.getId().getWeekStart());\n                query.setParameter(&quot;numberOfWeeks&quot;, promoData.getNumberOfWeeks());\n                query.setParameter(&quot;type&quot;, promoData.getId().getType());\n                query.setParameter(&quot;fcstId&quot;, promoData.getId().getForecastId());\n                query.setParameter(&quot;quantity&quot;, Double.valueOf(promoData.getQty()));\n            }\n            query.executeUpdate();\n            System.out.println(&quot;Data for promo persisted&quot;);\n            em.getTransaction().commit();\n        } catch (Exception e) {\n\n            e.printStackTrace();\n        } finally {\n            em.clear();\n            em.close();\n        }\n</code></pre>\n<p>The error I get is</p>\n<pre><code>org.hibernate.QueryException: Named parameter not bound : item\n    at org.hibernate.query.internal.QueryParameterBindingsImpl.verifyParametersBound(QueryParameterBindingsImpl.java:210)\n    at org.hibernate.query.internal.AbstractProducedQuery.beforeQuery(AbstractProducedQuery.java:1425)\n    at org.hibernate.query.internal.NativeQueryImpl.beforeQuery(NativeQueryImpl.java:249)\n    at org.hibernate.query.internal.AbstractProducedQuery.executeUpdate(AbstractProducedQuery.java:1610)\n    at com.danielme.blog.nativesql.dao.UserDao.insertPromoData(UserDao.java:99)\n</code></pre>\n<p>However - if I pass non-empty list - this works as expected</p>\n<pre><code>SQLCustomQuery:72 - Starting processing of sql query [INSERT INTO U_USER_PROMO (ITEM, LOC, WK_START, NUMBER_OF_WEEKS, TYPE, FCSTID, QTY) VALUES (:item, :location, :wkStart, :numberOfWeeks, :type, :fcstId, :quantity)]\nAbstractFlushingEventListener:74 - Flushing session\n</code></pre>\n','2020-12-28 16:53:57',_binary '\0','2020-12-28 16:53:57',1,65479368),(65509172,'<p>Because the <code>Deck</code> that is referenced by <code>Card#deck</code> is unmanaged and/or the id it has does not exist. If you want to save the <code>Deck</code> along with the card, you need to configure PERSIST cascading on <code>Card#deck</code>.</p>\n','2020-12-30 15:12:05',_binary '','2020-12-30 15:12:05',0,65481686),(65506648,'<p>you can perhapst try with saveorUpdate() to update an existing object. As i know save() generates new idendifier and perform &quot;Insert into&quot; in db. saveOrUpdate() can both save and update.</p>\n','2020-12-30 12:03:24',_binary '\0','2020-12-30 12:03:24',0,65506189),(65523489,'<p>You have defined merge cascading on an attribute that refers to an entity with id X, but a different object of the entity type with id X is already associated to the current transaction. This is the reason why you get the exception.</p>\n<p>Here an example of the situation:</p>\n<pre><code>@Entity\nclass A {\n  @Id int id;\n  @ManyToOne(cascade = ALL) B b;\n}\n\n@Entity\nclass B {\n  @Id int id;\n}\n</code></pre>\n<p>now you load B with id 2 then try to persist or merge a A with a different B with id 2.</p>\n<pre><code>B correctB = entityManager.find(B.class, 2);\nA a = new A(1, new B(2));\nentityManager.merge(a);\n</code></pre>\n<p>To fix this, use <code>correctB</code> instead of creating a new object, or deactivate the cascading on the attribute:</p>\n<pre><code>B correctB = entityManager.find(B.class, 2);\nA a = new A(1, correctB);\nentityManager.merge(a);\n</code></pre>\n','2020-12-31 16:44:30',_binary '\0','2020-12-31 16:44:30',0,65512369),(65552987,'<p>Most likely you face the problem, because you don\'t maintain both sides of the relationship in the bidirectional mapping. Lets say in <code>Role</code>:</p>\n<pre class=\"lang-java prettyprint-override\"><code>void add(Scope scope) {\n   this.scopes.add(scope);\n   scope.getRoles().add(this);\n}\n</code></pre>\n<p>To be honest with you, I\'d resign fully from bidirectional mapping. Maintaining this is a real nightmare.</p>\n','2021-01-03 17:46:04',_binary '\0','2021-01-03 17:46:04',0,65516244),(65551103,'<blockquote>\n<p>but it\'s a MappedSuperClass so logically it should make child classes inheritate the relation.</p>\n</blockquote>\n<p>I think the reason is that Hibernate (or whatever is the JPA implementation) cannot be sure at the stage of startup that the class you will be adding to the <code>@OneToMany</code> list will <strong>surely</strong> be an entity. One can even add a Java class that extends from <code>CommonClass</code> but is not an <code>@Entity</code>.</p>\n','2021-01-03 14:48:01',_binary '\0','2021-01-03 14:48:01',0,65550579),(65551671,'<p>So it seems to be impossible. As mentionned on the link bellow :\n&quot;The main disadvantage of mapped superclasses is that they cannot be queried or persisted. <strong>You also cannot have a relationship to a mapped superclass</strong>...&quot;</p>\n<p><a href=\"https://en.wikibooks.org/wiki/Java_Persistence/Inheritance\" rel=\"nofollow noreferrer\">https://en.wikibooks.org/wiki/Java_Persistence/Inheritance</a></p>\n','2021-01-03 15:41:35',_binary '','2021-01-03 15:41:35',1,65550579),(65555964,'<p>in your hibernate xml when you see the line</p>\n<pre><code>    &lt;property name=&quot;connection.url&quot;&gt;jdbc:mysql://localhost:3306/cube&lt;/property&gt;\n</code></pre>\n<p>it means you have a database called &quot;cube&quot; on some MySQL server installed on your computer. Are you doing this?</p>\n<p>If you have the database running somewhere on your computer then you should check if you created the table called &quot;products&quot;</p>\n<p>the error is when you try to access table cube.products</p>\n<p>So in your Product class,</p>\n<p>when you use the annotation\n<code>@Table(name=&quot;products&quot;)</code>\nthat implies that you already have a table that exist.\nSo you should try to</p>\n<ul>\n<li>1st run your code to create the table</li>\n<li>2nd run the project with hibernate CRUD operations</li>\n</ul>\n','2021-01-03 23:24:38',_binary '\0','2021-01-04 02:08:29',0,65555810),(65559789,'<p>I solved, the problem was a property of my hibernate.cfg.xml, from this:</p>\n<pre><code>&lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n</code></pre>\n<p>to this:</p>\n<pre><code>&lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.MariaDBDialect&lt;/property&gt;\n</code></pre>\n<p>In the main I tried not to save the product and it gave me another sql error which helped me to find what was going wrong.</p>\n','2021-01-04 08:40:12',_binary '','2021-01-04 08:40:12',1,65555810),(65576595,'<p>The column &quot;COD_PROPOSTA&quot; and &quot;COD_FONDO_UE_UL&quot; marked as Id cannot be null and you are not giving any value to that property (unless you do it manually once created the object). To give an Id automatically you can add the annotation <code>@GeneratedValue</code> to <code>codProposta</code> and <code>codFondoUeUl</code>.</p>\n','2021-01-05 09:54:55',_binary '\0','2021-01-05 09:54:55',0,65576436),(65615416,'<p>As it stated in the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-one-to-many-bidirectional\" rel=\"nofollow noreferrer\">documentation</a>:</p>\n<blockquote>\n<p>Whenever a bidirectional association is formed, the application developer must make sure both sides are in-sync at all times.</p>\n</blockquote>\n<p>So you should add <code>addPropostaUl()</code> and <code>removePropostaUl()</code> utility methods that synchronize both ends whenever a child element is added or removed:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Proposta implements Serializable {\n    \n   // ...\n        \n   @OneToMany(mappedBy = &quot;proposta&quot;, fetch = FetchType.EAGER)\n   @Cascade(CascadeType.ALL)\n   private List&lt;PropostaUL&gt; listaPropostaUl;\n \n   public void addPropostaUl(PropostaUL propostaUl) {\n      listaPropostaUl.add(propostaUl);\n      propostaUl.setProposta(this);\n   }\n\n   public void removePropostaUl(PropostaUL propostaUl) {\n      listaPropostaUl.remove(propostaUl);\n      propostaUl.setProposta(null);\n   }\n}\n</code></pre>\n<p>and then use only these methods when you want modify this association.</p>\n<p>Example (adding new <code>PropostaUL</code> to the existent <code>Proposta</code>):</p>\n<pre class=\"lang-java prettyprint-override\"><code>Transaction transaction = session.beginTransaction();\n\nProposta proposta = session.load(Proposta.class, propostaId);\nPropostaUL newPropostaUL = new PropostaUL();\n// ...\nproposta.addPropostaUl(newPropostaUL);\nsession.saveOrUpdate(proposta);\n\ntransaction.commit();\n</code></pre>\n','2021-01-07 15:40:32',_binary '\0','2021-01-07 15:40:32',0,65576436),(65679722,'<p>Thanks all for your answers.\n<BR>I found the problem.\n<BR>The object that I have to save is json object converted in Java object via Jackson library.\n<BR>So I added @JsonManagedReference and @JsonBackReference to the objects and it works.\n<BR>This is the right code</p>\n<pre><code>@Entity(name = &quot;Proposta&quot;)\n@Table(name = &quot;PROPOSTA&quot;)\npublic class Proposta implements Serializable {\n        \n   private static final long serialVersionUID = -705828064150128352L;\n        \n   public Proposta() {\n       super();\n   }\n            \n   @Id\n   @Column(name = &quot;COD_PROPOSTA&quot;)\n   private Integer codProposta; \n            \n   @JsonManagedReference\n   @OneToMany(mappedBy=&quot;proposta&quot;, cascade = CascadeType.ALL, fetch=FetchType.LAZY)\n   private List&lt;PropostaUL&gt; listaPropostaUl;\n\n}\n</code></pre>\n<p>and the PropostaUL object</p>\n<pre><code>@Entity()\n@Table(name = &quot;PROPOSTA_UL&quot;)\npublic class PropostaUL {\n    \n    public PropostaUL() {\n        super();\n    }\n\n    @Id\n    @Column(name = &quot;COD_FONDO_UE_UL&quot;)\n    private String codFondoUeUl;    \n    \n    @JsonBackReference\n    @ManyToOne\n    @JoinColumn(name = &quot;COD_PROPOSTA&quot;)\n    private Proposta proposta;\n }\n</code></pre>\n','2021-01-12 07:39:16',_binary '','2021-01-12 07:39:16',0,65576436),(65577538,'<p>There are multiple possibilities to solve your problem:</p>\n<p><strong>Possibility 1: Using <code>IdClass</code></strong></p>\n<p><em>Defining the <code>IdClass</code> type</em></p>\n<p>This class has to implement the <code>Serializable</code> interface and the <code>equals(..)</code> and <code>hashCode()</code> methods. The class holds the parts of the composite primary key.</p>\n<pre><code>public class TimelineId implements Serializable  {\n\n    private Integer timelineId;\n    private Integer courseId;\n\n    // getters &amp; setters\n\n    @Override\n    public int hashCode() {\n        // your impl of hashCode\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        // your impl of equals\n    }\n\n}\n</code></pre>\n<p><em>Modify your <code>Timeline</code> class</em></p>\n<p>Here the <code>@IdClass</code> annotation is added to the entity class. Further, the class holds the same fields like the <code>IdClass</code> type (name and type should be identical), but annotated with <code>@Id</code>.</p>\n<pre><code>@Entity\n@IdClass(TimelineId.class)\npublic class Timeline {\n\n    @Id\n    @Column(name = &quot;timeline_id&quot;)\n    private Integer timelineId;\n    @Id\n    @Column(name = &quot;course_id&quot;)\n    private Integer courseId;\n    @ManyToOne\n    @JoinColumn(name = &quot;module_id&quot;)\n    private Module module;\n\n    // getters &amp; setters\n\n}\n</code></pre>\n<p><strong>Possibility 2: Using <code>EmbeddedId</code></strong></p>\n<p><em>Defining the <code>EmbeddedId</code> type</em></p>\n<p>This class also holds the parts of the composite primary key.</p>\n<pre><code>@Embeddable\npublic class TimelineId {\n\n    @Column(name = &quot;timeline_id&quot;)\n    private Integer timelineId;\n    @Column(name = &quot;course_id&quot;)\n    private Integer courseId;\n\n    // getters &amp; setters\n\n}\n</code></pre>\n<p><em>Modify your <code>Timeline</code> class</em></p>\n<p>In this case the single parts of the composite primary key can be omitted. Only a field of the embedded key type annotated with <code>@EmbeddedId</code> is defined.</p>\n<pre><code>@Entity\npublic class Timeline {\n\n    @EmbeddedId\n    private TimelineId timelineId;\n    @ManyToOne\n    @JoinColumn(name = &quot;module_id&quot;)\n    private Module module;\n\n    // getters &amp; setters\n\n}\n</code></pre>\n<p>In both cases the corresponding repositories should be defined like this (<code>TimelineId</code> has to be used for parameter type <code>ID</code>) (here, <code>JpaRepository</code> is used):</p>\n<pre><code>public interface TimelineRepository extends JpaRepository&lt;Timeline, TimelineId&gt; {}\n</code></pre>\n<s>\n**Possibility 3: Don\'t use a composite PK, but make the columns unique**\n<p><em>Modify your <code>Timeline</code> class</em></p>\n<pre><code>@Entity\n@Table(uniqueConstraints = {\n    @UniqueConstraint(columnNames = {\n        &quot;course_id&quot;, &quot;module_id&quot;\n    })\n})\npublic class Timeline {\n\n    @Id\n    @Column(name = &quot;timeline_id&quot;)\n    Integer timeline_id;\n    @ManyToOne( cascade=CascadeType.ALL)\n    @JoinColumn(name = &quot;module_id)\n    private Module module;\n    @ManyToOne( cascade = CascadeType.ALL)\n    @JoinColumn(name = &quot;course_id)\n    private Course course;\n\n    // getters &amp; setters\n\n}\n</code></pre>\n</s>\n','2021-01-05 10:57:00',_binary '\0','2021-01-05 16:58:46',1,65576957),(65616965,'<p>Maybe you use Set instead of List @OneToMany(mappedBy = &quot;invoiceHeader&quot;, fetch = FetchType.EAGER)\n@Fetch(value = FetchMode.JOIN)\nprivate Set items = new HashSet&lt;&gt;();</p>\n','2021-01-07 17:13:11',_binary '\0','2021-01-07 17:13:11',0,65600608),(65629344,'<p>Seems like you use a query similar to this <code>select b from A a join a.b b join fetch a.c</code>. The gist is, you join fetch some association that you never refer to through the parent in the select clause.</p>\n','2021-01-08 12:53:55',_binary '\0','2021-01-08 12:53:55',0,65600608),(65660569,'<p>Change the visibility of the <code>C</code> instance variable inside <code>A</code>:</p>\n<pre><code>public class A {\n    protected C c;\n    //....\n</code></pre>\n<p><code>protected</code> ensures the children of <code>A</code> (<em>and also other members in the same package where <code>A</code> is located</em>) to be able to directly access <code>c</code>, as it becomes an <em><strong>inherited variable</strong></em>.</p>\n<p>This way, <code>c</code> is visible from any <code>B</code> instance, leading to <code>bInstance.c</code> being valid. As a result, <code>hibernate</code> would identify <strong><code>select b from B b join b.c c</code></strong> as a valid command.</p>\n','2021-01-11 02:16:46',_binary '','2021-01-11 03:04:04',1,65660548),(65670933,'<p>If the DB user that is used with Hibernate has access to multiple schemas in the database, it will retrieve information about all the sequences, because the query <code>select * from all_sequences</code> is used. If sequences with the same name are present in different schemas, the first one will be compared with the Hibernate definition by chance.</p>\n<p>Unfortunately it does not seem to be possible on Oracle to get the schema belonging to a sequence, as the implementation in <code>SequenceInformationExtractorOracleDatabaseImpl</code>shows:</p>\n<pre class=\"lang-java prettyprint-override\"><code>    @Override\n    protected String sequenceSchemaColumn() {\n        return null;\n    }\n\n</code></pre>\n<p>This only happened to us on the local environment (a.k.a &quot;My Machine&quot;), as we have a user there which can access several schemas. It only happened to some developers, as the Integration Test DB Schema was sometimes in the state of a different application version, and then the mismatch happened.</p>\n<p>We will need to restrict the user more.</p>\n','2021-01-11 16:36:52',_binary '','2021-01-11 16:36:52',1,65667435),(65672865,'<p>You are using field access strategy (determined by @Id annotation). Put any JPA related annotation right above each field instead of getter property like this in your kilenci entity</p>\n<pre><code>@OneToMany(targetEntity = Umowienia.class, mappedBy = &quot;klienci&quot;,cascade=CascadeType.ALL, fetch = FetchType.LAZY)\n\npublic List&lt;Umowienia&gt; umowienias;\n</code></pre>\n','2021-01-11 18:51:55',_binary '','2021-01-11 21:17:39',3,65672393),(65674759,'<p>You are creating in your <code>mapBookDTOToBook</code> a new <code>Category</code> each time you try to create a new book. When saving the new book to the database the code tries to create also a new category.</p>\n<p>Try loading the category from the database before saving the book instance like:</p>\n<pre><code>book.setCategory(categoryService.findCategoryByCode(bookDTO.getCategory().getCode());\n</code></pre>\n<p>Be aware the sample assumes:</p>\n<ul>\n<li>a service <code>CategoryService</code> exists to load categories from the database</li>\n<li>the result is always non-null</li>\n</ul>\n','2021-01-11 21:27:05',_binary '\0','2021-01-11 22:18:25',0,65674034),(65698877,'<p>I think this is a bug in older Hibernate versions. Try updating to the latest 5.4 version.</p>\n','2021-01-13 09:18:12',_binary '\0','2021-01-13 09:18:12',0,65685283),(65699088,'<p>Seems like you want to materialize an entity from a native query, but the native query is not selecting the <code>urun_id</code> column which is required to materialize the entity. Try using HQL queries instead of native queries.</p>\n','2021-01-13 09:31:07',_binary '\0','2021-01-13 09:31:07',0,65686612),(65708560,'<p>You are trying to map fields not fully fitting your entity. Try also selecting urun_id in your query or d.* in the selection part.</p>\n<p>For more complex queries you can use SqlResultSetMapping. <a href=\"https://www.baeldung.com/jpa-sql-resultset-mapping\" rel=\"nofollow noreferrer\">Check this link</a>.</p>\n','2021-01-13 19:25:39',_binary '\0','2021-01-13 19:25:39',0,65686612),(65792771,'<p>I create a new model class named HayvanDto and I created all of the UrunEntity entites inside of this.</p>\n<pre><code>public class HayvanDto {\n\nprivate Double dogumAgirligi;\n\nprivate String dogumSekli;\n\nprivate String dogumTarihi;\n\nprivate String hayvanAdi;\n\nprivate String hayvanAnneAdi;\n\nprivate String hayvanCinsiyet;\n\nprivate String hayvanIrki;\n\nprivate String hayvanResmi;\n\nprivate Boolean tohumaHazir;\n\nprivate Double urunTutar;\n</code></pre>\n<p>After that, in my implementation class, I wrote this code.</p>\n<pre><code>@Override\npublic List&lt;HayvanDto&gt; findHayvanAll(Integer userId) {\n    List&lt;UrunEntity&gt; urunEntities = urunRepository.findHayvanAll(userId);\n    List&lt;HayvanDto&gt; hayvanDtos = new ArrayList&lt;&gt;();\n          for (UrunEntity urunEntity : urunEntities) {\n              HayvanDto hayvanDto = new HayvanDto();\n              hayvanDto.setHayvanAdi(urunEntity.getHayvanAdi());\n              hayvanDto.setHayvanIrki(urunEntity.getHayvanIrki());\n              hayvanDto.setHayvanResmi(urunEntity.getHayvanResmi());\n              hayvanDto.setHayvanCinsiyet(urunEntity.getHayvanCinsiyet());\n              hayvanDto.setHayvanAnneAdi(urunEntity.getHayvanAnneAdi());\n              hayvanDto.setDogumAgirligi(urunEntity.getDogumAgirligi());\n              hayvanDto.setDogumSekli(urunEntity.getDogumSekli());\n              hayvanDto.setUrunTutar(urunEntity.getUrunTutar());\n              hayvanDto.setTohumaHazir(urunEntity.getTohumaHazir());\n\n              hayvanDtos.add(hayvanDto);\n          }\n    return hayvanDtos;\n\n}\n</code></pre>\n<p>Then it worked. Thanks for the answers.</p>\n','2021-01-19 13:47:03',_binary '','2021-01-19 13:47:03',0,65686612),(65699395,'<p><code>save()</code> just delegates to <code>EntityManager.persist</code> or <code>EntityManager.merge</code> and returns the object returned by <code>EntityManager.merge</code> or the one you passed in. The <code>FetchType</code> does not play a role here. If you want the association to be loaded, you can use <code>refresh</code> or <code>findOne</code>.</p>\n','2021-01-13 09:50:40',_binary '','2021-01-13 09:50:40',2,65688321),(65696390,'<p>You need a <code>VendorRepository</code> contains a method like this <code>Optional&lt;Vendor&gt; getVendorByNameAndUrl(String name, String url)</code>.</p>\n<p>Then</p>\n<pre><code>VendorRepository vendorRepo;\n\n@Transactional\npublic void saveProduct() {    \n    Product product = Product.builder()\n            .eancode(&quot;EAN-1234&quot;)\n            .externalId(&quot;123123&quot;)\n            .producerPartNumber(&quot;123123&quot;)\n            .name(&quot;VERY GOOD LAPTOP&quot;)\n            .vendor(findVendorOrCreateNew(&quot;LENOVO&quot;, &quot;www.lenovo.com&quot;))\n            .priceDetails(new PriceDetails(\n                    new BigDecimal(&quot;19.99&quot;),\n                    new BigDecimal(&quot;20.00&quot;),\n                    new BigDecimal(&quot;21.00&quot;),\n                    Currency.PLN))\n            .build();\n\n     // ...\n}\n\nVendor findVendorOrCreateNew(String name, String url) {\n    return vendorRepo.getVendorByNameAndUrl(name, url)\n        .orElse(new Vendor(name, url));\n}\n</code></pre>\n','2021-01-13 05:55:32',_binary '','2021-01-13 09:56:43',1,65693984),(65715100,'<p>You first have to delete all <code>ListenTo</code> entries that refer to this lecture before you can delete the lecture. Use <code>delete from ListenTo l where l.lecture.id = :id</code> and bind the lecture id, before you delete the lecture itself.</p>\n','2021-01-14 07:44:30',_binary '','2021-01-14 07:44:30',1,65706781),(65734646,'<p>Try</p>\n<pre class=\"lang-java prettyprint-override\"><code>import javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Entity\n@Table(name = &quot;users&quot;)\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n\n    @Column(name = &quot;name&quot;)\n    private String name;\n\n    @Column(name = &quot;password&quot;)\n    private String password;\n\n    @OneToMany\n    @JoinColumn(name = &quot;user_id&quot;)\n    private List&lt;TodoItem&gt; todos = new ArrayList&lt;&gt;();\n\n    public User() {}\n\n    public User(String name, String password, List&lt;TodoItem&gt; todos) {\n        this.name = name;\n        this.password = password;\n        this.todos = todos;\n    }\n\n    @Entity\n    @Table(name = &quot;todo_item&quot;)\n    public static class TodoItem {\n\n        @Id\n        @GeneratedValue(strategy = GenerationType.AUTO)\n        protected long id;\n\n        @Column(name = &quot;todo&quot;)\n        protected String todo;\n        \n        @Column(name = &quot;completed&quot;)\n        protected boolean completed;\n\n        public TodoItem() {\n        }\n\n        public TodoItem(String todo, boolean completed) {\n            this.todo = todo;\n            this.completed = completed;\n        }\n\n        // getter/setter ..\n    }\n\n    // getter/setter ..\n}\n</code></pre>\n','2021-01-15 10:44:50',_binary '','2021-01-15 10:44:50',2,65733454),(65735814,'<p>This might be caused, becuase you want to invoke the CommandLineRunner. I always use it by excplicitly invoking CommandLineRunner bean. In your case that would be it:</p>\n<pre><code>@Bean\n    public CommandLineRunner prepopulateDB(UserRepository userRepository) {\n        return args -&gt; {\n    List&lt;TodoItem&gt; todoItems = new ArrayList&lt;TodoItem&gt;();\n    todoItems.add(new TodoItem(&quot;mow the lawn&quot;, false));\n\n    userRepository.save(new User(&quot;Joe&quot;, &quot;password&quot;, todoItems));\n        };\n    }\n</code></pre>\n','2021-01-15 12:06:09',_binary '\0','2021-01-15 12:06:09',0,65735671),(65736015,'<p>The problem is the following</p>\n<pre><code>Caused by: org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: com.isanoui.TodoList.model.User$TodoItem\n    at org.hibernate.engine.internal.ForeignKeys.getEntityIdentifierIfNotUnsaved(ForeignKeys.java:347) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]\n ForeignKeys.java\n</code></pre>\n<p>You can make the OneToMany or ManyToOne cascade to all with</p>\n<pre><code>// @Column(name = &quot;todos&quot;)\n    @OneToMany(cascade = CascadeType.ALL)\n    @JoinColumn(name = &quot;user_id&quot;)\n    private List&lt;TodoItem&gt; todos = new ArrayList&lt;TodoItem&gt;();\n</code></pre>\n<p>Or you can as described in comment to save first the inner object and then the outer.</p>\n<pre><code>public void run(String... args) throws Exception {\n\n    TodoItem item = new TodoItem(&quot;mow the lawn&quot;, false);\n    this.itemRepository.save(item); \n\n    List&lt;TodoItem&gt; todoItems = new ArrayList&lt;TodoItem&gt;();\n    todoItems.add(item);\n    this.userRepository.save(new User(&quot;Joe&quot;, &quot;password&quot;, todoItems));\n}\n</code></pre>\n','2021-01-15 12:20:05',_binary '','2021-01-15 12:35:19',1,65735671),(65736021,'<p>the error tell :</p>\n<pre><code> object references an unsaved transient instance - save the transient instance before flushing: com.isanoui.TodoList.model.User$TodoItem; nested exception is java.lang.IllegalStateException:\n</code></pre>\n<p>i guess you have a OneToMany relation between User and TodoItem that the relation between them are not correct, you flush session from hibernate but before that you may save the entity. (i think you should correct the relation between 2 entity and it may correct if not, double check how the object persistent working)</p>\n','2021-01-15 12:20:31',_binary '\0','2021-01-15 12:20:31',0,65735671),(65745331,'<p>What you probably want to achieve is many-to-one relationship.\nTry the following:</p>\n<p><strong>Record</strong></p>\n<pre><code>@ManyToOne(fetch = FetchType.LAZY, optional = true)\n@JoinColumn(name =&quot;Vaccine_vaccineID&quot;)\nprivate Vaccine vaccine;\n</code></pre>\n<p><strong>Vaccine</strong></p>\n<pre><code>@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = &quot;vaccine&quot;)\nprivate List&lt;Record&gt; records;\n</code></pre>\n','2021-01-16 00:34:10',_binary '','2021-01-16 00:34:10',1,65745153),(65759803,'<p>If you need different load startegy you can use:</p>\n<ol>\n<li>Native sql when query</li>\n<li>jpql with construction like join fetch</li>\n<li>Entity Graph (<a href=\"https://www.baeldung.com/jpa-entity-graph\" rel=\"nofollow noreferrer\">https://www.baeldung.com/jpa-entity-graph</a>)\nThe main benefit when you use such way to load is single request to database.\nYou can read more <a href=\"https://thorben-janssen.com/lazyinitializationexception/\" rel=\"nofollow noreferrer\">https://thorben-janssen.com/lazyinitializationexception/</a></li>\n</ol>\n<p>Your object in deatached state - this is reason of LazyInitializationException (you cat move it to other state to load your object)\nfor example</p>\n<pre><code>entityManager.merge(deatachedEntity);\n</code></pre>\n','2021-01-17 11:01:09',_binary '','2021-01-17 11:10:12',1,65752757),(65761504,'<p>There is a problem in the Sales_Reps class. You have used @OneToMany annotation, but provided an object as a field and not a collection of objects (which is required for @OneToMany mappings). You probably want to use a List or Set. Another problem is that on @OneToMany side of relationship you do not use @JoinColumn, it should be used on the @ManyToOne side of relationship.</p>\n','2021-01-17 14:01:22',_binary '','2021-01-17 14:01:22',1,65760405),(66438339,'<p>Use <code>fetch = FetchType.EAGER</code> instead of <code>FetchType.LAZY</code>.</p>\n','2021-03-02 11:19:09',_binary '\0','2021-03-02 13:27:18',0,65765159),(65774246,'<p>Looked through the code you have posted on github and none of the code you posted in the above question is the problem. You problem is how you perform your login.</p>\n<p>login.html</p>\n<pre><code>&lt;form action=&quot;/authenticate&quot; method=&quot;post&quot; id=&quot;login&quot; class=&quot;input-group&quot;&gt;\n     &lt;div th:text=&quot;`enter code here`${errorMessage}&quot; id=&quot;error-message&quot;&gt;&lt;/div&gt;\n    &lt;input type=&quot;text&quot; class=&quot;input-field&quot; placeholder=&quot;Enter username&quot; name=&quot;username&quot; th:field=&quot;*{userModel.username}&quot;  required&gt;\n    &lt;input type=&quot;password&quot; class=&quot;input-field&quot; placeholder=&quot;Enter password&quot;  name=&quot;password&quot; th:field=&quot;*{userModel.password}&quot;required&gt;\n    &lt;input type=&quot;checkbox&quot; class=&quot;chech-box&quot;&gt;&lt;span class=&quot;span1&quot;&gt;Remember password&lt;/span&gt;\n    &lt;button type=&quot;submit&quot; class=&quot;submit-btn&quot;&gt;Log in&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Here we se that the login form posts to the endpoint <code>/authenticate</code>. This is NOT the standard <code>/login</code> endpoint that spring security sets up for you automatically.</p>\n<p>Since you are not using the the standard i find your custom endpoint.</p>\n<p>LoginController.java</p>\n<pre><code>@RequestMapping(value = &quot;/authenticate&quot;,method = RequestMethod.POST)\npublic  String authenticateUser(@ModelAttribute(&quot;userModel&quot;)User user,Model model){\n    boolean authResult = this.authenticationService.authenticationUser(user);\n    if(authResult){\n        System.out.println(&quot;zalogowano !!&quot;);\n        return &quot;rentAppPage&quot;;\n    } else {\n        model.addAttribute(&quot;errorMessage&quot;,&quot;zle dane!!!&quot;);\n        model.addAttribute(&quot;userModel&quot;,new User());\n        return &quot;login&quot;;\n    }\n}\n</code></pre>\n<p>Here we see that you pass the user object into a custom written function called <code>authenticationUser</code>. So if we look in that function we find this implementation.</p>\n<p>AuthenticationService.java</p>\n<pre><code>@Override\npublic boolean authenticationUser(User user){\n    User userFromDb = this.userDAO.findByUsername(user.getUsername());\n    return userFromDb != null &amp;&amp; userFromDb.getPassword().equals(DigestUtils.md5Hex(user.getPassword()));\n}\n</code></pre>\n<p>All you do in this function, is to fetch the user from the database. Check if the users password matches, and then return a boolean.</p>\n<p>If the boolean is true you return the next page.</p>\n<p>This is <strong>NOT</strong> how spring security works. All of the above code is completely faulty, and its clear that no research has been done before asking here on stack overflow. How could the server know you have called that function before? it can\'t.</p>\n<p>My answer to your question, is that your implementation is completely wrong, and i highly suggest you find a <code>getting started guide</code> to how form login works in spring security, because explaining how spring security works, can not be done in a simple answer.</p>\n<p>All im going to do is to link you to the official <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html5/#servlet-authentication-form\" rel=\"nofollow noreferrer\"><code>Spring security FormLogin</code></a> documentation, and you should start reading there.</p>\n','2021-01-18 12:09:07',_binary '\0','2021-01-18 18:27:12',0,65772648),(65774447,'<p>Of course, there are many questions about encoder, md5, etc. But it\'s your choice even it\'s wrong )))</p>\n<p>I run your code, if MD5 hash is correct in DB I can login. As I understand, the question is why the application does not store the state of logged in user?</p>\n<p>Expectation:</p>\n<ul>\n<li>1st request: call method (incognito) -&gt; login -&gt; call method (authorized)</li>\n<li>Xth request: call method -&gt; Spring Security checks -&gt; call method (authorized)</li>\n</ul>\n<p>Reality:</p>\n<ul>\n<li>Xth request: always equals 1st</li>\n</ul>\n<p>The cause that you don\'t change a state of Spring Security context. You call /login endpoint, check if the User is in DB, check his password and return success response. You should create an authorization and place it in the Spring Security context.</p>\n<p>Simple example:</p>\n<pre><code>UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =\n    new UsernamePasswordAuthenticationToken(username, password);\nAuthentication authentication = authenticationManager.authenticate(usernamePasswordAuthenticationToken);\nSecurityContextHolder.getContext().setAuthentication(authentication);\nString token = tokenProvider.generateToken(authentication);\nreturn token;\n</code></pre>\n<p>And in next requests use the token. How to implement the token provider there are many examples. It can be custom or better JWT.</p>\n<p>If you don\'t want tokens (RESTful), you can use sessions in requests (RESTless) but it requires additional configuration.</p>\n','2021-01-18 12:21:10',_binary '\0','2021-01-18 12:21:10',0,65772648),(65801483,'<p>For that query you should set identifier for entity <code>AlarmLog</code> and use that identifier in where conditions in following way:</p>\n<pre><code>...\n@Query(&quot;FROM AlarmLog al &quot; +\n        &quot;WHERE zipato=:zipato &quot; +\n        &quot;  AND alarmId=:alarmId &quot; +\n        &quot;  AND subtype=\'ZONE\' &quot; +\n        &quot;  AND subtypeUuid=:zone &quot; + \n        &quot;  AND timestamp BETWEEN :start AND :end&quot; +\n        &quot;  AND needAck=true &quot; + \n        &quot;  AND size(al.acks)=0&quot;)\n...\n\n</code></pre>\n','2021-01-20 00:26:31',_binary '','2021-01-20 00:26:31',1,65787956),(65991955,'<p>After a lot of time wasting it seems like the root of the problem was that I accidently created a User class. That class was also linked to the Role table so it was throwing an\nerror.</p>\n','2021-02-01 11:31:21',_binary '','2021-02-01 11:31:21',0,65806470),(65822132,'<p>Your mappedBy should be <code>List&lt;EntidadeGrupoEstudoUsuario&gt;</code> instead of <code>List&lt;EntidadeGrupoDeEstudos&gt;</code></p>\n<pre><code>@OneToMany(mappedBy = &quot;idGrupoDeEstudos&quot;) \nprivate List&lt;EntidadeGrupoEstudoUsuario&gt; grupoEstudoUsuario;\n</code></pre>\n<p>So your Entities will look like</p>\n<p><strong>EntidadeGrupoEstudoUsuario Entity</strong></p>\n<pre><code>@Getter\n@Setter\n@Entity\n@Table(name = &quot;grupo_estudo_usuario&quot;)\npublic class EntidadeGrupoEstudoUsuario {\n\n    @Id\n    @Column(name = &quot;id_grupo_estudo_usuario&quot;)\n    private int idGrupoEstudoUsuario;\n\n    @ManyToOne\n    @JoinColumn(name = &quot;id_grupo_estudo&quot;)\n    private EntidadeGrupoDeEstudos idGrupoDeEstudos;\n    \n    @ManyToOne\n    @JoinColumn(name = &quot;id_usuario&quot;)\n    private EntidadeUsuario usuario;\n    \n    @Column(name = &quot;administrador&quot;)\n    private boolean administrador;\n       \n}\n</code></pre>\n<p><strong>EntidadeGrupoDeEstudos Entity</strong></p>\n<pre><code>@Getter\n@Setter\n@Table(name = &quot;grupo_estudo&quot;)\n@Entity\npublic class EntidadeGrupoDeEstudos {\n    \n    @Id\n    @Column(name = &quot;id_grupo_estudo&quot;)\n    private int idGrupo;\n\n    @Column(name = &quot;dt_atz&quot;)\n    private Date data;\n\n    @Column(name = &quot;nm_grupo&quot;)\n    private String nomeDoGrupo;\n\n    @Column(name = &quot;descricao&quot;)\n    private String descricao;\n    \n    @Column(name = &quot;privado&quot;)\n    private Boolean privado;\n\n    @OneToMany(mappedBy = &quot;idGrupoDeEstudos&quot;) \n    private List&lt;EntidadeGrupoEstudoUsuario&gt; grupoEstudoUsuario;\n     \n}\n</code></pre>\n','2021-01-21 06:23:37',_binary '','2021-01-21 06:23:37',0,65820048),(65826656,'<p>why you are using configuration xml + JPA annotations , you must use one of them</p>\n<p>Just use JPA Annotation there\'s no need to use xml configurations, and try add following annotation under <strong>@Entity</strong> annotation</p>\n<pre><code>@Table(name=&quot;T_ENTITA&quot;)\n</code></pre>\n','2021-01-21 11:40:47',_binary '\0','2021-01-21 11:40:47',0,65826555),(65846514,'<p><em>try GenerationType.IDENTITY since here hibernate seems to look for a sequence which does not exist</em></p>\n<p>Thanks to <a href=\"https://stackoverflow.com/users/1575188/fantaghirocco\">fantaghirocco</a>!</p>\n','2021-01-22 13:55:42',_binary '\0','2021-01-28 14:33:23',1,65845749),(65876752,'<p>Try to correct this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@ElementCollection\n@CollectionTable(name = &quot;entity_share_entry&quot;, joinColumns = @JoinColumn(name = &quot;entity_share_id&quot;, referencedColumnName = &quot;id&quot;))\n@MapKey(name = &quot;entry_account_id&quot;)\nprivate Map&lt;Account, EntityShareEntry&gt; entries;\n</code></pre>\n<p>to this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@ElementCollection\n@CollectionTable(name = &quot;entity_share_entry&quot;, joinColumns = @JoinColumn(name = &quot;entity_share_id&quot;, referencedColumnName = &quot;id&quot;))\n@MapKeyJoinColumn(name = &quot;entry_account_id&quot;)\nprivate Map&lt;Account, EntityShareEntry&gt; entries;\n</code></pre>\n<p>Please also note that Embeddable and Entity classes <em>must be a top-level classes</em> (see sections 2.5 and 2.1 of JPA spec)</p>\n','2021-01-24 22:36:52',_binary '','2021-01-24 22:45:13',1,65876524),(65934028,'<p>If you look closely in the stacktrace, you will notice that Hibernate does &quot;auto-flushing&quot;. This happens when you have &quot;dirty&quot; entities in your persistence context and try to do a query that uses tables, which intersect with the tables of the dirty entities. If it wouldn\'t flush the dirty entries, you might get wrong results.</p>\n','2021-01-28 09:07:09',_binary '','2021-01-28 09:07:09',1,65930208),(65938465,'<p>Try to correct this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Customer\n{\n    // ...\n\n    @OneToMany(mappedBy = &quot;orders&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private Set&lt;Order&gt; orders;\n}\n</code></pre>\n<p>to this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Customer\n{\n    // ...\n\n    @OneToMany(mappedBy = &quot;customer&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private Set&lt;Order&gt; orders;\n}\n</code></pre>\n<p>See additional explanation in the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-one-to-many-bidirectional\" rel=\"nofollow noreferrer\">documentation</a>.</p>\n<p>And you should correct also your <code>Product</code>-<code>Order</code> <code>@ManyToMany</code> association. Only one side of this association should use <code>@JoinTable</code> other side should use <code>mappedBy</code> property of the <code>@ManyToMany</code> annotation. Something like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Product\n{\n    // ...\n\n    @ManyToMany(\n       cascade = {CascadeType.PERSIST, CascadeType.MERGE},\n       fetch = FetchType.LAZY\n    )\n    @JoinTable(\n            name = &quot;order_items&quot;,\n            joinColumns = @JoinColumn(name = &quot;product_id&quot;),\n            inverseJoinColumns = @JoinColumn(name = &quot;order_id&quot;)\n    )\n    private Set&lt;Order&gt; orders = new HashSet&lt;&gt;();\n}\n\n@Entity\npublic class Order\n{\n    // ...\n\n    @ManyToMany(\n       mappedBy = &quot;orders&quot;,\n       cascade = {CascadeType.PERSIST, CascadeType.MERGE},\n       fetch = FetchType.LAZY)\n    private Set&lt;Product&gt; products = new HashSet&lt;&gt;();\n}\n</code></pre>\n<p>As it is stated in the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-many-to-many-unidirectional\" rel=\"nofollow noreferrer\">documentation</a>:</p>\n<blockquote>\n<p>For <code>@ManyToMany</code> associations, the <code>REMOVE</code> entity state transition doesn’t make sense to be cascaded because it will propagate beyond the link table. Since the other side might be referenced by other entities on the parent-side, the automatic removal might end up in a <code>ConstraintViolationException</code>.</p>\n</blockquote>\n<p>Also as this is explained in <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#fetching-direct-vs-query\" rel=\"nofollow noreferrer\">this section of the documentation</a>:</p>\n<blockquote>\n<p>If you forget to <code>JOIN FETCH</code> all <code>EAGER</code> associations, Hibernate is going to issue a secondary select for each and every one of those which, in turn, can lead to N+1 query issues.</p>\n<p><em>For this reason, you should prefer LAZY associations.</em></p>\n</blockquote>\n','2021-01-28 13:53:08',_binary '\0','2021-01-28 15:38:51',3,65938158),(65942706,'<p>First problem is that Stock was defining two ids (id form AbstractEntity and Ticker) and is not implementing Serializable.</p>\n<p>For the second issue...just add this.stockService = stockService in MainView constructor</p>\n','2021-01-28 17:58:00',_binary '','2021-01-28 17:58:00',1,65942532),(65959696,'<p>Seems like you need to add this line to your configuration file</p>\n<p><strong>either</strong></p>\n<pre><code>&lt;property name=&quot;hbm2ddl.auto&quot;&gt;create&lt;/prop&gt; \n</code></pre>\n<p><strong>or</strong></p>\n<pre><code>&lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/prop&gt; \n</code></pre>\n','2021-01-29 18:12:51',_binary '\0','2021-01-29 18:12:51',0,65959294),(65965994,'<p>You try to use <code>HQL</code> query with <code>EntityManager.createNativeQuery</code> method. This is a mistake.</p>\n<p>Try to correct your query in this way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>em.createNativeQuery(&quot;SELECT * FROM SCHEMA.USER WHERE USER_ID = :usrid&quot;, User.class)\n.setParameter(&quot;usrid&quot;, uid)\n.getResultList();\n</code></pre>\n<p>If you use the <code>SCHEMA</code> for all your entities, you can put it to the hibernate config:</p>\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;property name=&quot;hibernate.default_schema&quot; value=&quot;SCHEMA&quot;/&gt;\n</code></pre>\n<p>then correct your entity definition in the following way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name =&quot;USER&quot;)\npublic class User {\n   // ...\n}\n</code></pre>\n<p>and then correct your query:</p>\n<pre class=\"lang-java prettyprint-override\"><code>em.createNativeQuery(&quot;SELECT * FROM {h-schema}USER WHERE USER_ID = :usrid&quot;, User.class)\n.setParameter(&quot;usrid&quot;, uid)\n.getResultList();\n</code></pre>\n<p>P.S. And by the way, I would suggest you to correct your hibernate dialect definition. You should use as specific dialect as possible. For example if you use Oracle 10g, you should use <code>org.hibernate.dialect.Oracle10gDialect</code>. You can still use <code>org.hibernate.dialect.Oracle9iDialect</code> but some new features defined in <code>Oracle10gDialect</code> will not be available.</p>\n','2021-01-30 08:21:12',_binary '','2021-01-30 09:32:05',1,65959294),(65977990,'<p>I believe the error indicates that <code>private double Price</code> needs to be a collection since it\'s in a @OneToMany relationship with StockPrice. You can fix this, for example, by using a List:</p>\n<pre><code>private List&lt;Double&gt; Price;\n</code></pre>\n<p>or a Set:</p>\n<pre><code>private Set&lt;Double&gt; Price;\n</code></pre>\n','2021-01-31 10:21:23',_binary '\0','2021-01-31 10:26:41',1,65962208),(66002741,'<p>On your Stock Entity you should map a Collection to your StockPrice Entity, and the relationship should be bidirectional, something like:</p>\n<pre><code>public class Stock extends AbstractEntity  {\n@OneToMany(mappedBy=&quot;stock&quot;, fetch=FetchType.LAZY, cascade=CascadeType.ALL)\n/*@JoinColumn(name = &quot;Ticker&quot;) &lt;- Don\'t use this, let hibernate figure this out by the \'mappedBy\' */\nprivate List&lt;StockPrice&gt; Price;\n(...)\n</code></pre>\n<p>And</p>\n<pre><code>public class StockPrice extends AbstractEntity {\n@ManyToOne\n@JoinColumn(name = &quot;Ticker&quot;)\nprivate StockPrice stockPrice;\n</code></pre>\n<p>But keep in mind that your StockPrice can\'t just extend your AbstractEntity, because it has a composite key</p>\n','2021-02-02 02:12:02',_binary '','2021-02-02 02:12:02',1,65962208),(66008885,'<p><code>ProductWarehouse</code> is already having <code>Warehouse</code> in it, I don\'t understand why are you again setting it up by fetching it from DB inside the for loop.</p>\n<p>I don\'t see any necessity of the for loop in that method, also as you described above you haven\'t defined many to many relationship anywhere. while building the relationship you can use the join table as explained <a href=\"https://www.baeldung.com/hibernate-many-to-many\" rel=\"nofollow noreferrer\">here</a></p>\n<p>if you need more information, please share more details of your need and errors you are facing.</p>\n','2021-02-02 11:32:20',_binary '\0','2021-02-02 11:32:20',0,66008288),(66009572,'<p>You should add annotation <code>@Transactional</code> to the method <code>findByIdPartials()</code>, because when method <code>findById()</code> return Course then transaction end too.\nThere you can find more information about this annotation: <a href=\"https://dzone.com/articles/how-does-spring-transactional\" rel=\"nofollow noreferrer\">link</a>\nCorrect code below:</p>\n<pre><code>@Override\n@PermitAll\n@Transactional\npublic Course findByIdPartial(Object id) throws AppException {\n    Course Course = findById(id);\n    Course.getCourseModuls().size();\n\n    return Course;\n}\n</code></pre>\n','2021-02-02 12:16:24',_binary '','2021-02-02 12:16:24',1,66009023),(66092182,'<p>Hibernate config is below</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n\n&lt;!DOCTYPE hibernate-configuration PUBLIC\n  &quot;-//Hibernate/Hibernate Configuration DTD//EN&quot;\n  &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;\n\n&lt;hibernate-configuration&gt;\n    &lt;session-factory&gt;\n        &lt;property name=&quot;hibernate.id.new_generator_mappings&quot; &gt;true&lt;/property&gt;\n        &lt;property name=&quot;connection.driver_class&quot;&gt;oracle.jdbc.OracleDriver&lt;/property&gt;\n        &lt;property name=&quot;connection.url&quot;&gt;jdbc:oracle:thin:@HP-BILGISAYAR:1521:ORCL&lt;/property&gt;\n        &lt;property name=&quot;connection.username&quot;&gt;hr&lt;/property&gt;\n        &lt;property name=&quot;connection.password&quot;&gt;hr&lt;/property&gt;\n\n\n        &lt;property name=&quot;connection.pool_size&quot;&gt;1&lt;/property&gt;\n\n         &lt;property name=&quot;dialect&quot;&gt;org.hibernate.dialect.Oracle8iDialect&lt;/property&gt;\n\n         &lt;property name=&quot;cache.provider_class&quot;&gt;org.hibernate.cache.NoCacheProvider&lt;/property&gt; \n         &lt;property name=&quot;cache.use_second_level_cache&quot;&gt;true&lt;/property&gt;   \n         &lt;property name=&quot;cache.region.factory_class&quot;&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory&lt;/property&gt; \n        \n        &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;\n\n        &lt;property name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt;  \n\n\n&lt;mapping class=&quot;tr.com.entity.Tasit&quot;/&gt; \n\n    &lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre>\n','2021-02-07 19:28:32',_binary '\0','2021-02-07 19:28:32',0,66082750),(66115565,'<p>This is not a runtime error &quot;during delete&quot; but a bootstrap error. Your model is not correctly mapped, but I can\'t help you unless you share your whole entity model.</p>\n','2021-02-09 08:43:11',_binary '\0','2021-02-09 08:43:11',0,66089796),(66096852,'<p>For sure you are going to need that table, either created by yourself or by Hibernate.</p>\n<p>There is a config which you can add to spring boot apps using JPA in order to automatically generate the database schema (or the parts that are missing). Take a look here  <a href=\"https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html\" rel=\"nofollow noreferrer\">https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html</a></p>\n','2021-02-08 06:31:00',_binary '','2021-02-08 06:31:00',2,66096252),(66134413,'<p>I would suggest you to correct your mapping in this way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    Long id;\n}\n\n@Entity\npublic class Address {\n\n    @Id\n    Long id;\n\n    @MapsId\n    @OneToOne\n    @JoinColumn(name = &quot;FK&quot;)\n    User user;\n}\n</code></pre>\n<p>See also <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-derived\" rel=\"nofollow noreferrer\">this section</a> of hibernate documentation.</p>\n','2021-02-10 09:44:02',_binary '\0','2021-02-10 09:44:02',0,66128118),(66135066,'<p>See duplicate question <a href=\"https://stackoverflow.com/a/66118558/1032890\">https://stackoverflow.com/a/66118558/1032890</a>.</p>\n<p>Did you try it like this?</p>\n<pre><code>CREATE DATABASE  IF NOT EXISTS `springit`;\nUSE `springit`;\nDROP TABLE IF EXISTS `comment`;\nDROP TABLE IF EXISTS `link`;\n\nCREATE TABLE `link` (\n                        `id` bigint(20) NOT NULL AUTO_INCREMENT,\n                        `created_by` varchar(255) DEFAULT NULL,\n                        `creation_date` datetime DEFAULT NULL,\n                        `last_modified_by` varchar(255) DEFAULT NULL,\n                        `last_modified_date` datetime DEFAULT NULL,\n                        `title` varchar(255) DEFAULT NULL,\n                        `url` varchar(255) DEFAULT NULL,\n                        PRIMARY KEY (`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\nCREATE TABLE `comment` (\n                           `id` bigint(20) NOT NULL AUTO_INCREMENT,\n                           `created_by` varchar(255) DEFAULT NULL,\n                           `creation_date` datetime DEFAULT NULL,\n                           `last_modified_by` varchar(255) DEFAULT NULL,\n                           `last_modified_date` datetime DEFAULT NULL,\n                           `body` varchar(255) DEFAULT NULL,\n                           `link_id` bigint(20) DEFAULT NULL,\n                           PRIMARY KEY (`id`),\n                           FOREIGN KEY `FKoutxw6g1ndh1t6282y0fwvami` (`link_id`)\n                                   REFERENCES `link`(`id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n</code></pre>\n','2021-02-10 10:27:00',_binary '\0','2021-02-10 10:27:00',0,66134056),(66168475,'<p>H2 does not support accessing JSON attributes. See here for a list of supported functions: <a href=\"https://www.h2database.com/html/functions.html\" rel=\"nofollow noreferrer\">https://www.h2database.com/html/functions.html</a></p>\n','2021-02-12 08:26:47',_binary '\0','2021-02-12 08:26:47',0,66154431),(66157508,'<p>You have a unidirectional relation between the two entities which makes Jackson fail to serialize/deserialize the payload due to the infinite recursion.</p>\n<p>You can try the following that will hopefully resolve the issue:</p>\n<pre><code>@OneToMany(mappedBy = &quot;postEntity&quot;)\n@JsonBackReference\nprivate List&lt;CommentEntity&gt; comments;\n</code></pre>\n<p>Annotate the list of comments using <code>@JsonBackReference</code> and then do the following on the <code>CommentEntity</code> but this time use the following annotation:</p>\n<pre><code>@JoinColumn(name = &quot;post_id&quot;)\n@JsonManagedReference\nprivate PostEntity postEntity;\n</code></pre>\n<p>You can check on more on that here <a href=\"https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\" rel=\"nofollow noreferrer\">https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion</a></p>\n','2021-02-11 15:18:49',_binary '','2021-02-11 15:18:49',0,66157328),(66172726,'<p>Try something like this:</p>\n<pre><code>Transaction transaction = session.beginTransaction();\nitems.setCart(null);\nsession.update(items);\nsession.delete(cart);\ntransaction1.commit();\n</code></pre>\n','2021-02-12 13:28:45',_binary '\0','2021-02-12 13:28:45',0,66171930),(66172807,'<p>You should set cart attribute of items as <code>null</code> before removing the cart:</p>\n<pre><code>Cart cartToDel = cartRepository.getOne(1l);\ncartToDel.getItems().forEach(item -&gt; item.setCart(null));\ncartRepository.delete(cartToDel);\n</code></pre>\n','2021-02-12 13:34:17',_binary '','2021-02-12 13:34:17',1,66171930),(66221294,'<p>Try a mapping like this:</p>\n<pre><code>@ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n@JoinColumns({ \n  @JoinColumn(name = &quot;x&quot;, referencedColumnName = &quot;x&quot;, insertable = false, updatable = false), \n  @JoinColumn(name = &quot;y&quot;, referencedColumnName = &quot;y&quot;, insertable = false, updatable = false), \n  @JoinColumn(name = &quot;z&quot;, referencedColumnName = &quot;z&quot;)\n})\nDossierBean doss;\n</code></pre>\n','2021-02-16 08:55:43',_binary '\0','2021-02-16 08:55:43',0,66172276),(66196318,'<p>you have a mistake in your select about it tell <code>org.hibernate.hql.internal.ast.QuerySyntaxException</code> from your stacktrace.\nI\'m not sure, but I guess the trouble is here <code>o.orderStatus.shipped=true</code> because it is a compute.</p>\n','2021-02-14 14:21:07',_binary '\0','2021-02-14 14:21:07',1,66196170),(66196439,'<p>Why passing column value in Order by clause?</p>\n<p>As per the logs, the problem is with <code>o.orderStatus.shipped=true</code> only.</p>\n<p>Change the query by removing <code>=true</code> from the query or remove shipped from order by query as it doesn\'t make any sense by ordering by <code>shipped</code> column.</p>\n','2021-02-14 14:33:58',_binary '\0','2021-02-14 14:33:58',2,66196170),(66196783,'<p>One problem is with <strong>(o.orderStatus.shipped=true)</strong> which is a <strong>condition</strong>. Conditions are for WHERE clause, whereas ORDER BY expect properties.</p>\n<p>Try with With <strong>ORDERBY o.orderStatus.shipped DESC, ...</strong> as in this query.</p>\n<pre><code>@Query(&quot;select o from Orders o where o.user.id=:userid ORDER BY o.orderStatus.shipped DESC, o.orderDate DESC&quot;)\nList&lt;Orders&gt; getALlOrders(@Param(&quot;userid&quot;) int userid);\n</code></pre>\n','2021-02-14 15:12:05',_binary '','2021-02-14 16:02:26',1,66196170),(66198350,'<p>You should annotate with @ManyToOne and @JoinColumn.</p>\n<pre><code>@ManyToOne\n@JoinColumn\nprivate Supplier supplier;\n</code></pre>\n<hr />\n<p>Update (15/02/21)</p>\n<p>As you added that you want an unidirectional relationship, this is the way, in the catalog class:</p>\n<pre><code>@Column\nprivate int supplierId;\n</code></pre>\n<p>You can remove the supplier field or mark it as @Transient.</p>\n<p>You must save the supplier, get its id (as it is generated by the database), and set it in your catalog.</p>\n','2021-02-14 17:51:35',_binary '\0','2021-02-15 10:52:37',0,66198301),(66219555,'<p>2 things to note here.</p>\n<p>Create @Getter in student entity which is missing.</p>\n<p>For MySQL8, use <code>org.hibernate.dialect.MySQL8Dialect</code></p>\n','2021-02-16 06:20:44',_binary '','2021-02-16 06:20:44',1,66219454),(66261272,'<p>You have to understand that only one property/field can be used for writing a column, otherwise there could be conflicts. Use the following mapping:</p>\n<pre><code>class Issue {\n    @ManyToOne()\n    @JoinColumns({\n            @JoinColumn(\n                    name = &quot;sprint_id&quot;,\n                    referencedColumnName = &quot;sprint_id&quot;),\n            @JoinColumn(\n                    name = &quot;jira_instance&quot;,\n                    referencedColumnName = &quot;jira_instance&quot;, insertable = false, updatable = false)\n    })\n    private Sprint lastSprint;\n\n    private String jiraInstance;\n}\n</code></pre>\n<p>You just have to make sure that when you set <code>lastSprint</code>, you also set <code>jiraInstance</code> to the value of <code>Sprint#jiraInstance</code></p>\n','2021-02-18 13:46:56',_binary '\0','2021-02-18 13:46:56',0,66223855),(68114833,'<p>To clarify - as there is no marked answer to this issue yet:</p>\n<p>When you use a named column reference in any way on one class field, make sure <strong>ALL</strong> references use the exact same name. Especially when they are differently named (<code>jira_instance</code> vs. <code>jiraInstance</code>, in your example).</p>\n<p>The following example should work:</p>\n<pre><code>class Issue {\n    @ManyToOne()\n    @JoinColumns({\n            @JoinColumn(\n                    name = &quot;sprint_id&quot;,\n                    referencedColumnName = &quot;sprint_id&quot;),\n            @JoinColumn(\n                    name = &quot;jira_instance&quot;,\n                    referencedColumnName = &quot;jira_instance&quot;) // make sure you use the same name\n    })\n    private Sprint lastSprint;\n\n    @Column(name = &quot;jira_instance&quot;) // make sure you use the same name\n    private String jiraInstance;\n}\n\nclass Sprint {\n    @EmbeddedId\n    private SprintId id;\n}\nclass SprintId implements Serializable {\n\n    @Column(name = &quot;sprint_id&quot;)\n    private String sprintId;\n\n    @Column(name = &quot;jira_instance&quot;) // make sure you use the same name\n    private String jiraInstance;\n}\n</code></pre>\n<p>This means: <code>insertable = false, updatable = false</code> is not necessary to solve this issue.</p>\n','2021-06-24 11:25:04',_binary '\0','2021-06-24 15:43:51',3,66223855),(66240109,'<ol>\n<li><p>Add <code>spring.jpa.open-in-view=false</code> to the <code>application.properties</code> to have <code>LazyInitializationException</code>. It will help to build good queries.\n<a href=\"https://stackoverflow.com/questions/30549489/what-is-this-spring-jpa-open-in-view-true-property-in-spring-boot\">What is this spring.jpa.open-in-view=true property in Spring Boot?</a></p>\n</li>\n<li><p>Load <code>PlayList</code> with <code>songs</code> using JPQL query with <code>LEFT JOIN FETCH</code> to fetch songs with the list. So <code>songs</code> will be already loaded and <code>playList</code> in the song will be lazy. <code>@EntityGraph</code> can be used also.</p>\n<pre><code>select list from PlayList list left join fetch list.songs where list.id = :listId\n</code></pre>\n</li>\n<li><p>There is <code>Hibernate5Module</code> in Jackson. It allow to omit lazy associations. So Jackson will not touch <code>playList</code> in the song.\n<a href=\"https://stackoverflow.com/questions/33727017/configure-jackson-to-omit-lazy-loading-attributes-in-spring-boot\">Configure Jackson to omit lazy-loading attributes in Spring Boot</a></p>\n</li>\n<li><p>To build something like a real system. You can add <code>PlayListResponse</code>, <code>SongResponse</code> classes and map entities to those classes on the service level. Probably you will not need <code>Hibernate5Module</code> in this case. But better to experiment with this module too.</p>\n</li>\n<li><p>Enable database logging in <code>application.properties</code> with</p>\n</li>\n</ol>\n<pre><code>logging.level.org.springframework.transaction.interceptor=TRACE\nlogging.level.org.springframework.orm.jpa.JpaTransactionManager=DEBUG\n\nlogging.level.org.hibernate.SQL=DEBUG\nspring.jpa.properties.hibernate.use_sql_comments=true\n</code></pre>\n<p>Check transactions and SQL in the logs carefully. Don\'t allow Hibernate to produce unnecessary queries.</p>\n<p><strong>How to save the songs with a list</strong></p>\n<p>Add this method to the <code>PlayList</code></p>\n<pre><code>@Transient\npublic void addSong(Song song) {\n    song.setPlayList(this);\n    songs.add(song);\n}\n</code></pre>\n<p>Add songs to the list using <code>addSong()</code> method.</p>\n<p>Save <code>PlayList</code>. All the songs of a list will be saved by Hibernate with the correct list id, because there is <code>cascade = CascadeType.ALL</code> in the <code>@OneToMany</code>.</p>\n','2021-02-17 10:29:57',_binary '','2021-02-23 11:36:23',1,66227521),(66228913,'<p>The @Id annotation is missing</p>\n<pre><code>@Id \n@Column(name=&quot;Id&quot;)\n@GeneratedValue(strategy=GenerationType.IDENTITY)\nprivate int id;\n</code></pre>\n<p>Every entity needs an ID aka primary key</p>\n','2021-02-16 17:06:28',_binary '','2021-02-16 17:06:28',5,66228804),(66240814,'<p>Your problem is that you try to mix up <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql\" rel=\"nofollow noreferrer\">JPQL</a> and <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#sql\" rel=\"nofollow noreferrer\">SQL</a> syntax in the <code>entityManager.createQuery</code> method.</p>\n<p>Try to use the following query:</p>\n<pre class=\"lang-java prettyprint-override\"><code>TypedQuery&lt;Tenant&gt; query = entityManager.createQuery(&quot;SELECT t FROM tenant t \njoin t.members m where m.id = :value&quot;, Tenant.class);\nquery.setParameter(&quot;value&quot;, memberId);\nList&lt;Tenant&gt; result = query.getResultList();\n</code></pre>\n<p>I would suggest you remove <code>name</code> properties from all <code>@Entity</code> annotations and just use class names in your JPQL like this:</p>\n<pre><code>SELECT t FROM Tenant t \njoin t.members m where m.id = :value\n</code></pre>\n<p>This is common practice and it will allow you to emphasize that this is JPQL, not SQL query.</p>\n','2021-02-17 11:13:04',_binary '','2021-02-17 14:41:30',1,66233874),(66240591,'<p>I would suggest you to correct your mapping in this way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class AccountTransactionV5Entity implements Serializable {\n\n    // ...\n    \n    @ManyToOne\n    @JoinColumn(name = &quot;TRNSCTN_TYP_CD&quot;, referencedColumnName = &quot;TRNSCTN_TYP_CD&quot;, nullable = false)\n    private TransactionTypeV5Entity transactionMethod;\n}\n\n@Entity\npublic class TransactionMasterV5Entity implements Serializable {\n\n    // ...\n\n    @OneToMany\n    @MapKey(name = &quot;transactionMethod&quot;)\n    private Map&lt;TransactionTypeV5Entity, AccountTransactionV5Entity&gt; accountTransactions= new HashMap&lt;&gt;();\n\n}\n</code></pre>\n','2021-02-17 10:59:57',_binary '\0','2021-02-17 10:59:57',1,66235174),(66275919,'<p>Thanks to @Christian Beikov answer, I got an hint. The error I did was to use multiple sequences on an entity, which is something you cannot do. I solved the issue following the solution in <a href=\"https://stackoverflow.com/questions/34528450/multiple-hibernate-sequence-generators-for-one-entity-with-postgresql\">this post</a></p>\n','2021-02-19 10:34:25',_binary '','2021-02-19 10:34:25',0,66260288),(66313403,'<p>The embeddable type shouldn\'t use <code>insertable = false, updatable = false</code> but the <code>@JoinColumn</code> of the <code>@ManyToOne</code> association.</p>\n','2021-02-22 09:54:34',_binary '\0','2021-02-22 09:54:34',0,66277322),(66295112,'<p>I made a big mistake at the init...<br />\nI provided a null value to a constructor that allowed none.</p>\n<p>That happened in the line &quot;<code>val musicManager: GuildMusicController = GuildMusicController(this)</code>&quot; where I wanted to use the DGuild object in the GuildMusicController\'s constructor. The problem was that it wasn\'t yet initialized (because it still needed the GuildMusicController object), so it was still null.</p>\n','2021-02-20 18:26:41',_binary '','2021-02-21 18:11:50',0,66285513),(66320298,'<p>The error message indicates that the id value of the entity <code>Client</code> is being changed to null. This is most likely happening in this line:</p>\n<pre><code>this.clientMapper.updateClientFromDto(clientDto, client);\n</code></pre>\n<p>When doing an update on an existing object, you should not change its id (see <a href=\"https://stackoverflow.com/questions/4179166/hibernate-how-to-fix-identifier-of-an-instance-altered-from-x-to-y\">this</a>). Either you need to make sure the <code>clientDto</code> does not have a null id value, or you need to exclude setting the id of <code>client</code> from the <code>clientDto</code>.</p>\n<p>Another note: if you\'re using generated identifier values (<code>@GeneratedValue(generator = &quot;UUID&quot;)</code>) then it may be a good idea to remove the setter on the <code>id</code> field, because the value will be generated automatically:</p>\n<pre><code>@Setter(AccessLevel.NONE)\nprivate String id;\n</code></pre>\n','2021-02-22 17:13:56',_binary '\0','2021-02-22 17:13:56',0,66319909),(66322967,'<p><strong>Step 1</strong></p>\n<p>Create <code>hashcode()</code> and <code>equals()</code> methods for both User and Genre based on their Id fields.</p>\n<p><strong>Step 2</strong></p>\n<pre><code> @ManyToMany(fetch = FetchType.LAZY, cascade=CascadeType.MERGE)\n @JoinTable(name = &quot;user_genres&quot;, joinColumns = @JoinColumn(name = &quot;User_id&quot;), \n inverseJoinColumns = @JoinColumn(name = &quot;genres_id&quot;))\n    private List&lt;Genre&gt; genres;\n</code></pre>\n<p>Now you should be ready to go.</p>\n','2021-02-22 20:29:00',_binary '','2021-02-22 20:29:00',1,66322373),(66346905,'<p>Hibernate Search\'s mass indexer needs to create entity managers itself, because it parallelizes indexing and you can\'t use one entity manager concurrently in multiple threads. However, it should automatically use the tenant ID of the original session it was created from. And, judging from the error message, it does in your case: there\'s a reference to <code>my2ndDS</code> in there.</p>\n<p>As far as I can tell, the problem is in retrieving the datasource, not in handling multi-tenancy. Not that Hibernate Search creates its own threads in the mass-indexer. Does your datasource retrieval rely on thread-local context that may not be initialized in those new threads?</p>\n<p>A quick and dirty way to test this would be to create a thread manually (<code>new Thread()</code>), and try to invoke <code>getEM()</code> from that thread. If you get the same error, the problem is probably that Datasource resolution relies on some uninitialized thread-local context. And then you should investigate the part of the stack trace that you\'re not showing, below &quot;Lookup failed for \'java:app/jdbc/my2nDS\'&quot;.</p>\n<p>By the way, the <code>Got null ComponentInvocation</code> seems characteristic of Payara. This is the first result I got when searching the web: <a href=\"https://github.com/payara/Payara/issues/2430\" rel=\"nofollow noreferrer\">https://github.com/payara/Payara/issues/2430</a>\nIf I were you, I\'d look into what\'s going wrong in the JNDI resolution.</p>\n','2021-02-24 08:08:57',_binary '\0','2021-02-25 10:12:09',1,66342965),(66383586,'<p>Solution:</p>\n<ol>\n<li><p>update the class DatabaseMultiTenantProvider in getConnection method (see below),</p>\n</li>\n<li><p>can use the PersistanceContext the same as begining (no need to use a ThreadLocal).</p>\n<pre><code>@Override\npublic Connection getConnection(String tenantIdentifier) throws SQLException {\n   //Just use the multitenancy if the hibernate.multiTenancy == DATABASE\n   logger.debug(&quot;connecting to tenent DS: {}&quot;, () -&gt; tenantIdentifier);\n    if (TENANT_SUPPORTED.equals(typeTenancy)) {\n     try {\n\n             logger.debug(&quot;use tenant dataSource name: {}&quot;, () -&gt; tenantIdentifier);\n             //final String tenant[] = tenantIdentifier.split(&quot;:{2}&quot;);\n             //if (tenant != null &amp;&amp; tenant.length &gt; 1) { \n             final MariaDbDataSource mds = new MariaDbDataSource();\n             if (tenantIdentifier.equals(&quot;myDS&quot;)) {\n                 logger.debug(&quot;using 1st dataSource: {}&quot;, () -&gt; tenantIdentifier);\n                 mds.setUrl(&quot;jdbc:mariadb://localhost:3306/mtDb&quot;);\n                 mds.setUser(&quot;mtII&quot;);\n                 mds.setPassword(&quot;mt123&quot;);\n                 mds.setServerName(&quot;localhost&quot;);\n                 mds.setPort(3306);\n                 mds.setDatabaseName(&quot;mtDb&quot;);\n             } else if (tenantIdentifier.equals(&quot;my2ndDS&quot;)) {\n                 logger.debug(&quot;using 2nd database: {}&quot;, () -&gt; tenantIdentifier);\n                 mds.setUrl(&quot;jdbc:mariadb://localhost:3306/mt2Db&quot;);\n                 mds.setUser(&quot;mtII&quot;);\n                 mds.setPassword(&quot;mt123&quot;);\n                 mds.setServerName(&quot;localhost&quot;);\n                 mds.setPort(3306);\n                 mds.setDatabaseName(&quot;mt2Db&quot;);\n             }\n             dataSource = mds;\n             return dataSource.getConnection();\n             /* } else {\n                     logger.debug(&quot;normal way in connecting to dataSource&quot;);\n                     final String dsURL = &quot;java:app/jdbc/&quot; + tenantIdentifier;\n                     logger.debug(&quot;getConnection for: {}&quot;, () -&gt; dsURL);\n                     final Context init = new InitialContext();\n                     dataSource = (DataSource) init.lookup(dsURL);\n                     return dataSource.getConnection();\n                 }*/\n         } catch (Exception e) {\n             //e.printStackTrace();\n             throw new HibernateException(&quot;Error trying to get dataSource [\'java:app/jdbc/&quot; + tenantIdentifier + &quot;\']&quot;, e);\n         }\n     }\n     return null;\n</code></pre>\n</li>\n</ol>\n<p>}</p>\n','2021-02-26 09:55:14',_binary '\0','2021-02-26 10:27:53',0,66342965),(66364230,'<p>Your question is very vague so I can answer on assumptions only. I think You want to update the articalComment field of your Entity. You can simply use .save() method of JpaRepository. Your code should be as follows. Here I am also assuming that your articleId is unique identifier to your entity class.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = &quot;comment&quot;)      \npublic class Comment implements Serializable {\n\n    @Basic\n    @Lob\n    @Column(name=&quot;Article_COMMENT&quot;, columnDefinition=&quot;TEXT&quot;)\n    private String articleComment;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = &quot;ID_ARTICLE&quot;)\n    private Long articleId;\n}\n</code></pre>\n<p>Now your Id should be unique and has a @Id Annotation to identify it inside spring data JPA.\nYou don\'t have to add any code inside of your JPA repository. Simply call commentRepository.save(commentObject) method. If <strong>commentObject has an ID as 0</strong> then a new Comment will be created. If the ID is a positive value and is present in your table that particular row will be updated not created.</p>\n','2021-02-25 07:39:11',_binary '\0','2021-02-25 07:44:25',1,66354970),(66364071,'<p>Are you sure that every query is done with processing before another query starts?\nMaybe it is stacking data, and that\'s why you are getting longer processing times.\nJust an idea.</p>\n<p>Also, you can try to run it with a CPU profiler to check what is taking the most of the time.</p>\n','2021-02-25 07:26:17',_binary '\0','2021-02-25 07:26:17',0,66363680),(66371596,'<p>Hibernate has two powerful options to declare filtering conditions using annotations: <code>@Where</code> and <code>@Filter</code>, see the official docs <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#pc-filtering\" rel=\"nofollow noreferrer\">here</a>. I suppose <code>@Filter</code> can help in your usecase since you need the <code>title</code> as parameter at runtime.</p>\n','2021-02-25 15:33:51',_binary '\0','2021-02-25 15:33:51',0,66363739),(66380857,'<ol>\n<li>First reason - some jars missing.</li>\n<li>Second reason - put the same version for hibernate in all dependencies jars</li>\n</ol>\n','2021-02-26 06:02:42',_binary '\0','2021-02-27 08:55:33',0,66366020),(66381715,'<p>I still couldn\'t find the exact answer to above code but after retracing the tutorial i am following and by luck , the errors are gone . Will reshare the exact things that worked.\nAlso I was following udemy chad\'s tutorial so anyone who faces the same can reference this. Be very exact with jars versions (chad didn\'t include many in his).</p>\n<p>Student.java was same as question</p>\n<p>CreateStudentDemo.java ( I had to use old ORM code to get this to work)</p>\n<pre><code>package com.vv.hibernate.demo;\n\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\n\nimport com.vv.hibernate.demo.entity.Student;\n\npublic class CreateStudentDemo {\n\n    public static void main(String[] args) {\n\n        // create session factory\n        SessionFactory factory = new Configuration().configure(&quot;hibernate.cfg.xml&quot;).addAnnotatedClass(Student.class)\n                .buildSessionFactory();\n\n        // create session\n        Session session = factory.getCurrentSession();\n\n        try {\n            // create a student object\n            System.out.println(&quot;Creating new student object...&quot;);\n            Student tempStudent = new Student(&quot;Paul&quot;, &quot;Doe&quot;, &quot;paul@luv2code.com&quot;);\n\n            // start a transaction\n            session.beginTransaction();\n\n            // save the student object\n            System.out.println(&quot;Saving the student...&quot;);\n            session.save(tempStudent);\n\n            // commit transaction\n            session.getTransaction().commit();\n\n            System.out.println(&quot;Done!&quot;);\n        } finally {\n            factory.close();\n        }\n    }\n}\n</code></pre>\n<p>hibernate.cf.xml was also same as question</p>\n<p>Console log</p>\n<pre><code>Feb 26, 2021 12:52:06 PM org.hibernate.Version logVersion\nINFO: HHH000412: Hibernate Core {5.2.0.Final}\nFeb 26, 2021 12:52:06 PM org.hibernate.cfg.Environment &lt;clinit&gt;\nINFO: HHH000206: hibernate.properties not found\nFeb 26, 2021 12:52:06 PM org.hibernate.cfg.Environment buildBytecodeProvider\nINFO: HHH000021: Bytecode provider name : javassist\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1 (file:/C:/eclipseWKSP/hibernate-tut/lib/jaxb-impl-2.2.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)\nWARNING: Please consider reporting this to the maintainers of com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\nFeb 26, 2021 12:52:07 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager &lt;clinit&gt;\nINFO: HCANN000001: Hibernate Commons Annotations {5.0.1.Final}\nFeb 26, 2021 12:52:07 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure\nWARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)\nFeb 26, 2021 12:52:07 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator\nINFO: HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&amp;serverTimezone=UTC]\nFeb 26, 2021 12:52:07 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator\nINFO: HHH10001001: Connection properties: {password=****, user=hbstudent}\nFeb 26, 2021 12:52:07 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator\nINFO: HHH10001003: Autocommit mode: false\nFeb 26, 2021 12:52:07 PM org.hibernate.engine.jdbc.connections.internal.PooledConnections &lt;init&gt;\nINFO: HHH000115: Hibernate connection pool size: 1 (min=1)\nFeb 26, 2021 12:52:07 PM org.hibernate.dialect.Dialect &lt;init&gt;\nINFO: HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect\nCreating new student object...\nSaving the student...\nHibernate: insert into student (email, first_name, last_name) values (?, ?, ?)\nDone!\nFeb 26, 2021 12:52:09 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl stop\nINFO: HHH10001008: Cleaning up connection pool [jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&amp;serverTimezone=UTC]\n</code></pre>\n<p>referenced libraries:</p>\n<p><a href=\"https://i.stack.imgur.com/1bGZj.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/1bGZj.png\" alt=\"enter image description here\" /></a></p>\n','2021-02-26 07:26:35',_binary '\0','2021-02-26 07:26:35',0,66366020),(66377401,'<ol>\n<li><p>It looks like you can not use <code>@GeneratedValue</code> with <code>@EmbeddedId</code>. You can find some workaround in <a href=\"https://vladmihalcea.com/how-to-map-a-composite-identifier-using-an-automatically-generatedvalue-with-jpa-and-hibernate/\" rel=\"nofollow noreferrer\">this article</a> but it did not work well for me.</p>\n</li>\n<li><p>As it\'s stated in <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-nonaggregated\" rel=\"nofollow noreferrer\">this</a> section of documentation, it should be possible to use <code>@GeneratedValue</code> with <code>@IdClass</code>. But, it does not work due to <a href=\"https://hibernate.atlassian.net/browse/HHH-9662\" rel=\"nofollow noreferrer\">HHH-9662</a>.</p>\n</li>\n<li><p>As it\'s stated in <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-generated\" rel=\"nofollow noreferrer\">this</a> section of documentation:</p>\n</li>\n</ol>\n<blockquote>\n<p>When using composite identifiers, the underlying identifier properties must be manually assigned by the user.</p>\n<p>Automatically generated properties are not supported to be used to generate the value of an underlying property that makes the composite identifier.</p>\n<p>Therefore, you cannot use any of the automatic property generator described by the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#mapping-generated\" rel=\"nofollow noreferrer\">generated properties</a> section like <code>@Generated</code>, <code>@CreationTimestamp</code> or <code>@ValueGenerationType</code> or database-generated values.</p>\n<p>Nevertheless, you can still generate the identifier properties prior to constructing the composite identifier.</p>\n</blockquote>\n','2021-02-25 22:25:49',_binary '','2021-02-25 22:25:49',2,66370320),(66410001,'<p>The central problem is that the described table structures do not allow a 1:n relationship from Company to Employee. According to the table design (especially the design of PKs) above, a company can only have one employee.</p>\n<p>However, if the DB design cannot be changed, the following approach using the <strong>JoinColumnOrFormula</strong> annotation may lead to partial success.</p>\n<blockquote>\n<p>The @JoinColumnOrFormula annotation is used to customize the join between a child Foreign Key and a parent row Primary Key when we need to take into consideration a column value as well as a @JoinFormula.</p>\n</blockquote>\n<p>See <a href=\"https://docs.jboss.org/hibernate/stable/orm/userguide/html_single/Hibernate_User_Guide.html#associations-JoinColumnOrFormula\" rel=\"nofollow noreferrer\">https://docs.jboss.org/hibernate/stable/orm/userguide/html_single/Hibernate_User_Guide.html#associations-JoinColumnOrFormula</a> for details.</p>\n<p>More concretely with these Entities</p>\n<pre><code>@Entity\n@Table(name=&quot;t_company&quot;)\npublic class Company {\n    @Id\n    @Column(name=&quot;id&quot;)\n    private Integer id;\n    @Column(name=&quot;employee_id&quot;)\n    private Integer employeeId;\n    @OneToMany(mappedBy = &quot;company&quot;)\n    private List&lt;Employee&gt; employees;    \n\n    // ..\n}\n\n@Entity\n@Table(name = &quot;t_employee&quot;)\npublic class Employee {\n    @Id\n    @Column(name = &quot;id&quot;)\n    private Integer id;\n    @Column(name = &quot;name&quot;)\n    private String name;\n    @ManyToOne\n    @JoinColumnOrFormula( column =\n        @JoinColumn(\n                name = &quot;id&quot;,\n                referencedColumnName = &quot;employee_id&quot;,\n                insertable = false,\n                updatable = false\n        )\n    )\n    private Company company;\n\n    // ..\n}\n</code></pre>\n<p>and this custom repository</p>\n<pre><code>@Repository\npublic class EmployeeRepository {\n\n    @Autowired\n    EntityManager entityManager;\n\n    List&lt;Employee&gt; findAll() {\n        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n        CriteriaQuery&lt;Employee&gt; cq = cb.createQuery(Employee.class);\n\n        Root&lt;Employee&gt; root = cq.from(Employee.class);\n        Join&lt;Employee, Company&gt; joinCompany = root.join(&quot;company&quot;);\n\n        TypedQuery&lt;Employee&gt; query = entityManager.createQuery(cq);\n        return query.getResultList();\n    }\n\n}\n</code></pre>\n<p>you get the following query:</p>\n<pre><code>  select\n        employee0_.id as id1_1_,\n        employee0_.name as name2_1_\n   from t_employee employee0_\n   inner join t_company company1_ on employee0_.id=company1_.employee\n</code></pre>\n','2021-02-28 14:16:32',_binary '\0','2021-03-01 18:20:29',0,66396420),(66399114,'<pre><code>repopulate database before every test method\n</code></pre>\n<p>Did you drop all data, clean up after each test ? Cause it is saying</p>\n<pre><code>Unique index or primary key violation: &quot;PRIMARY KEY ON PUBLIC.MEALS(ID) [1, 900000000000, 122.50, \'Soup\']&quot;\n</code></pre>\n<p>Also mind if you let the tests run sequential or parallel.</p>\n','2021-02-27 13:06:30',_binary '\0','2021-02-27 13:06:30',0,66398951),(66399175,'<p>You can annotate your test suites with @Transactional. It means that every test method in your suite is surrounded by an overarching Spring transaction. This transaction will be rolled back at the end of the test method regardless of it\'s outcome.</p>\n','2021-02-27 13:15:07',_binary '\0','2021-02-27 13:15:07',0,66398951),(66399740,'<p>Doing some debug i found out the problem was that database id generating sequence knew nothing about data i inserted. So, when hibernate was trying to get next value from the sequence - it was 1. And a row with such id already existed in database.</p>\n<pre><code>Hibernate: call next value for hibernate_sequence\nHibernate: insert into meals (cooking_time, cost, name, id) values (?, ?, ?, ?)\n2021-02-27 15:17:02.998  WARN 10168 --- [           main] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: -104, SQLState: 23505\n2021-02-27 15:17:02.999 ERROR 10168 --- [           main] o.h.engine.jdbc.spi.SqlExceptionHelper   : integrity constraint violation: unique constraint or index violation; SYS_PK_10099 table: MEALS\n</code></pre>\n<p>And this crude temporary solutions proves my guess.\nI have changed sql script this way and it works like intended now. But, of course, i must investigate further and let database generate id\'s for test data automatically.</p>\n<pre><code>INSERT INTO meals (id, cooking_time, cost, name) VALUES (100, 900000000000, 122.5, \'Soup\');\nINSERT INTO meals (id, cooking_time, cost, name) VALUES (200, 1800000000000, 155.5, \'Stake\');\n</code></pre>\n','2021-02-27 14:22:05',_binary '\0','2021-02-27 14:27:43',0,66398951),(66402751,'<p>If you look at the logs:</p>\n<pre><code>Hibernate: create sequence hibernate_sequence start with 1 increment by 1\n\ncreate table meals (id bigint not null, ...)\n\nHibernate: call next value for hibernate_sequence\nHibernate: insert into meals (cooking_time, cost, name, id) values (?, ?, ?, ?)\n</code></pre>\n<p>Since the next value for sequence is <code>1</code> and the record with id value <code>1</code> is already saved (<code>(1, 900000000000, 122.5, \'Soup\')</code>), it throws <code>DataIntegrityViolationException</code></p>\n<p>To fix the issue, you don\'t need to change the sql script and use the id values <code>100</code>, <code>200</code>. You need to set the id generation strategy to <code>GenerationType.IDENTITY</code>.</p>\n<p>If you use <code>GenerationType.IDENTITY</code></p>\n<pre><code>@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprotected Long id;\n</code></pre>\n<p>the logs generated:</p>\n<pre><code>Hibernate: create table meals (id bigint generated by default as identity, ...)\n\nHibernate: insert into meals (id, cooking_time, cost, name) values (null, ?, ?, ?)\n</code></pre>\n<p>Hibernate will use the automatically incremented value based on the id column. Since the last saved ids are <code>1</code> and <code>2</code>, the next value will be <code>3</code>.</p>\n<p>You can see by simply adding a print statement:</p>\n<pre><code>repository.save(fish);\nSystem.out.println(&quot;id of fish: &quot; + fish.getId());\n</code></pre>\n<p>Output:</p>\n<pre><code>id of fish: 3\n</code></pre>\n<p>If you try with saving ids <code>100</code> and <code>200</code> on <code>data.sql</code>, then you\'ll see the output:</p>\n<pre><code>id of fish: 201\n</code></pre>\n<p>PS: <code>@SpringBootTest</code> loads the full application context. <code>@DataJpaTest</code> which loads only JPA related components, would be a better choice to test JPA repositories.</p>\n','2021-02-27 19:36:04',_binary '','2021-02-27 19:36:04',3,66398951),(66401276,'<p>As it\'s stated in the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#pc-get-reference\" rel=\"nofollow noreferrer\">documentation</a>:</p>\n<blockquote>\n<p><strong>Obtain an entity reference without initializing its data</strong></p>\n<p>Sometimes referred to as lazy loading, the ability to obtain a reference to an entity without having to load its data is hugely important. The most common case being the need to create an association between an entity <em>and another existing entity.</em></p>\n<pre class=\"lang-java prettyprint-override\"><code>Book book = new Book();\nbook.setAuthor( entityManager.getReference( Person.class, personId ) );\n</code></pre>\n<p>The above works on the assumption that the entity is defined to allow lazy loading, generally through use of runtime proxies. <em>In both cases an exception will be thrown later if the given entity does not refer to actual database state</em> when the application attempts to use the returned proxy in any way that requires access to its data.</p>\n</blockquote>\n<p>So, you can use <code>entityManager.getReference</code> only if you know that your database has a record with specified id and you just want establish relationship without actual entity loading.</p>\n','2021-02-27 17:04:06',_binary '','2021-02-27 17:52:39',1,66400179),(66411536,'<p>It looks like you can not use <code>@OneToOne</code> here due to the hibernate bug. (See <a href=\"https://hibernate.atlassian.net/browse/HHH-3824\" rel=\"nofollow noreferrer\">HHH-3824</a>) It\'s reproduced even with Hibernate  5.4.28.Final</p>\n<p>As workaround, I would suggest you to correct your mapping in this way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = &quot;authorities&quot;)\npublic class Authorities {\n   \n   @EmbeddedId\n   private AuthoritiesKey pk;\n\n   // ...\n}\n\n@Embeddable\npublic class AuthoritiesKey implements Serializable {\n\n  @ManyToOne(fetch = FetchType.LAZY)\n  @JoinColumn(name = &quot;email&quot;, referencedColumnName = &quot;email&quot;, nullable = false)\n  private Credentials credentials;\n\n  @Column(name = &quot;authority&quot;, nullable = false)\n  private String authority;\n\n  public AuthoritiesKey(Credentials credentials, String authority) {\n    this.credentials = credentials;\n    this.authority = authority;\n  }\n\n  public AuthoritiesKey() {\n  }\n\n  // getters setters omitted\n  \n  @Override\n  public boolean equals(Object o) {\n    if ( this == o ) return true;\n    if ( o == null || getClass() != o.getClass() ) return false;\n\n    AuthoritiesKey pk = (AuthoritiesKey) o;\n    return Objects.equals( credentials, pk.credentials ) &amp;&amp;\n            Objects.equals( authority, pk.authority );\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash( credentials, authority );\n  }\n}\n\n@Entity\n@Table(name = &quot;credentials&quot;)\npublic class Credentials implements Serializable {\n   \n   @Id\n   @Column(name = &quot;credential_id&quot;)\n   @GeneratedValue(strategy = GenerationType.IDENTITY)\n   private Long id;\n\n   @OneToMany(cascade = CascadeType.ALL,\n        fetch = FetchType.LAZY,\n        mappedBy = &quot;pk.credentials&quot;)\n   private List&lt;Authorities&gt; authorities;\n\n   @NaturalId\n   @Column(name = &quot;email&quot;)\n   private String email;\n\n   @Transient\n   public Authorities getAuthority()\n   {\n      return this.authorities != null &amp;&amp; this.authorities.size() &gt; 0\n          ? this.authorities.get(0) : null;\n   }\n \n   // ...\n}\n</code></pre>\n','2021-02-28 16:54:27',_binary '','2021-02-28 22:20:53',1,66410450),(66426178,'<p><strong>CrudRepository has only save method but it acts for both insert as well as update.</strong></p>\n<ol>\n<li>When you do save on entity with empty id it will do a save.</li>\n<li>When you do save on entity with existing id it will do an update\nthat means that after you used findById for example and changed\nsomething in your object, you can call save on this object and it\nwill actually do an update because after findById you get an object\nwith populated id that exist in your DB.</li>\n</ol>\n<p>In your case you are fetching the records based on a field (<em>unique</em>) But <strong>records will update only when the model object has a existing primary key value</strong></p>\n<p>In your code there should be <em><strong>presentModalOpt</strong></em> instead of <em><strong>modalOpt</strong></em></p>\n<pre><code>void saveMe(Model m) {\n    Optional&lt;Model&gt; presentModalOpt = modelCrudRepo.findByIdentField(THIS_IS_THE_UNIQUE_STRING)\n    if(presentModalOpt.isPresent()) {  // should be presentModalOpt instead of modalOpt\n \n    } else {\n        m.setId(null);\n    }\n    modelCrudRepo.save(m);\n    \n}\n</code></pre>\n<p><strong>See the default implementation -</strong></p>\n<pre><code>/*\n * (non-Javadoc)\n * @see org.springframework.data.repository.CrudRepository#save(java.lang.Object)\n */\n@Transactional\npublic &lt;S extends T&gt; S save(S entity) {\n\n     if (entityInformation.isNew(entity)) {\n          em.persist(entity);\n          return entity;\n     } else {\n          return em.merge(entity);\n     }\n}\n</code></pre>\n','2021-03-01 16:47:14',_binary '','2021-03-01 16:47:14',1,66424937),(66436368,'<p>Posting this as answer: Looks like you are missing @ManyToOne on <code>FlightSchedule.destination</code>, <code>FlightSchedule.source</code> and on <code>FlightSchedule.flight</code>.</p>\n<p>The more detailed answer. Hibernate needs to know how to link a <code>FlightSchedule</code> with an <code>Airport</code>. At the moment, the code doesn\'t have any annotations that hint how this mapping should work. It could be any of the potential mapping types. Since an Airport can be the source or destination of many schedules, the relationship needs to be many-to-one.</p>\n<p>By adding <code>@ManyToOne</code> you tell hibernate that you want a column in the table <code>flight_schedule</code>, with a foreign key to the table <code>airport</code>, and this is what it uses later to join the columns and retrieve the associated airport when you load a flight schedule. The same applies to <code>FlightSchedule.flight</code></p>\n<p>I hope the above makes sense! If you want to see some examples of mapping you can take a look at <a href=\"https://github.com/augusto/jpa-workshop/tree/master/src/main/java/com/ig/training/hibernate/domainmodel\" rel=\"nofollow noreferrer\">this repo</a>. The hibernate docs are  (usually) quite good: <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations\" rel=\"nofollow noreferrer\">https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations</a></p>\n','2021-03-02 09:07:39',_binary '','2021-03-02 09:07:39',1,66427841),(66523994,'<p>Change <code>Set</code> to <code>MutableSet</code> works to me</p>\n<pre><code>// State.kt\npackage com.example.helpme.entity\n\nimport javax.persistence.*\nimport javax.validation.constraints.*\n\n@Entity\ndata class State(\n    @Id id: Int,\n    var name: String,\n    @OneToMany cities: MutableSet&lt;City&gt; = mutableSetOf(),\n)\n</code></pre>\n','2021-03-08 03:36:22',_binary '\0','2021-03-08 03:36:22',0,66480713),(66505762,'<p>If you see your <code>persist</code> method, the problem is with new <code>menuItem</code> object, as it is not attached to the persistence context (in other words it is transient) and you are assigning this transient object to an existing <code>userMenuDTO</code> instance fetched from database, this instance fetched from database is attached to the current spring persistence context. So in order to update the list of <code>menus</code> of this already persisted object you have to persist the newly created <code>menuItem</code> first, then add this persisted <code>menuItem</code> to the <code>menus</code> list and then finally save the <code>userMenuDTO</code>.\n<code>CascadeType.ALL</code> would work if both the <code>userMenuDTO</code> and <code>menuItemDTO</code> instances were newly created and you were saving them to database for the first time.</p>\n','2021-03-06 12:44:38',_binary '','2021-03-06 12:44:38',1,66504765),(66518863,'<p>This caught my eye - the top query is the one in the stacktrace, the bottom is the one in the @Query.  The erroring one has &quot;Color&quot; vs &quot;color&quot;.  Postgresql may have case sensitivity if you define the columns in quotes <a href=\"https://stackoverflow.com/questions/20878932/are-postgresql-column-names-case-sensitive\">Are PostgreSQL column names case-sensitive?</a>.  Try the two queries in a Postgresql tool, since the exception originates from Postgresql - strip off all the Java layers to simplifying debugging.</p>\n<pre><code>SELECT item_id from public.items_table where lower(CONCAT(item_id,\' \', Color,\' \',details,\' \',material,\' \',quantity,\' \',selling_price,\' \',trader)) like all (\'{&quot;%blue%&quot;, &quot;%silk%&quot;}\') and store=\'Anjali Rama Market\' and status=\'In Stock\' and item_type=\'Saree\'\n\nSELECT item_id from public.items_table where lower(CONCAT(item_id,\' \', color,\' \',details,\' \',material,\' \',quantity,\' \',selling_price,\' \',trader)) like all (\'{\\&quot;%blue%\\&quot;, \\&quot;%silk%\\&quot;}\') and store=\'Main\' and status=\'In Stock\' and item_type=\'Container\'\n</code></pre>\n','2021-03-07 16:39:58',_binary '\0','2021-03-07 16:39:58',1,66513367),(66539503,'<p>I can\'t comment above (rep isn\'t high enough), and there\'s not enough to know that this will answer the question, but\nTake a look here: <a href=\"https://www.baeldung.com/hibernate-notnull-vs-nullable\" rel=\"nofollow noreferrer\">https://www.baeldung.com/hibernate-notnull-vs-nullable</a> and <a href=\"https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/appendices/Configurations.html\" rel=\"nofollow noreferrer\">https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/appendices/Configurations.html</a>\nIf you have this set, Hibernate will check null before the DB.</p>\n<pre><code>spring.jpa.properties.hibernate.check_nullability\n</code></pre>\n<p>So I\'m thinking you have that property set.</p>\n','2021-03-09 01:26:12',_binary '\0','2021-03-09 01:26:12',0,66524227),(69897178,'<p>try to add path to the pom.xml</p>\n<pre><code>&lt;path&gt;\n   &lt;groupId&gt;io.micronaut&lt;/groupId&gt;\n   &lt;artifactId&gt;micronaut-graal&lt;/artifactId&gt;\n   &lt;version&gt;${micronaut.version}&lt;/version&gt;\n&lt;/path&gt;\n</code></pre>\n<p>when adding lombok</p>\n','2021-11-09 11:17:02',_binary '\0','2021-11-09 11:17:02',0,66532755),(66555229,'<p>It\'s unclear what query api do you use. Assuming that you use <a href=\"http://www.querydsl.com/\" rel=\"nofollow noreferrer\">querydsl</a> you can try to correct your query in this way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>JPAQueryFactory queryFactory = new JPAQueryFactory(entityManager);\nList&lt;Long&gt; test = queryFactory.query()\n   .select(equipe.id)\n   .from(equipe)\n   .where(equipe.ativo.eq(true))\n   .fetch();\n</code></pre>\n','2021-03-09 21:44:11',_binary '\0','2021-03-09 21:44:11',0,66537497),(66554670,'<p>Most likely you get this error because you try to mix up <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#access\" rel=\"nofollow noreferrer\">access strategies</a> and hibernate just ignore your <code>@AttributeOverride</code> annotations. By default, the placement of the <code>@Id</code> annotation gives the default access strategy.</p>\n<p>So, try to correct your entity mapping in this way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table( name = &quot;EVENTS&quot; )\npublic class Event {\n\n    @Id\n    private Long id;\n\n    // ...\n    \n    @Embedded\n    @AttributeOverrides({\n        @AttributeOverride(name = &quot;name&quot;, column = @Column(name = &quot;book_title&quot;)), \n        @AttributeOverride(name = &quot;author&quot;, column = @Column(name = &quot;book_author&quot;)),\n    })\n    private Book book = new Book();\n    \n    @Embedded\n    @AttributeOverrides({\n        @AttributeOverride(name = &quot;name&quot;, column = @Column(name = &quot;ebook_title&quot;)), \n        @AttributeOverride(name = &quot;author&quot;, column = @Column(name = &quot;ebook_author&quot;)),\n    })\n    private Book ebook = new Book();\n\n    //ctors, getters, setters removed for brevity \n\n}\n</code></pre>\n<p>P.S. However, if you need you can <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#_overriding_the_default_access_strategy\" rel=\"nofollow noreferrer\">override</a> the default access strategy by using <code>@Access</code> annotation.</p>\n','2021-03-09 20:56:56',_binary '','2021-03-09 21:14:27',1,66552003),(66614642,'<p>It will work when you make the change that <code>@Shekhar Khairnar</code> also mentioned.</p>\n<p>It works well when you add a child to the parent but does not work when defining a child.</p>\n<blockquote>\n<p><strong><a href=\"https://stackoverflow.com/a/3805682/2039546\">You would do that when the responsibility of creating/updating the referenced column isn\'t in the current entity, but in another\nentity.</a></strong></p>\n</blockquote>\n<p>If you are going to <strong>use unidirectional</strong> and <strong>add a child object</strong>, you should remove the <code>insertable = false</code> definition.</p>\n<p><strong>However, such usage may result in data inconsistency. You should pay attention.</strong></p>\n<p>In addition, you do not need to give an id when defining a child, because this will be created automatically according to your model and will not take the value you give.</p>\n','2021-03-13 14:29:52',_binary '\0','2021-03-21 11:02:17',0,66580345),(66581098,'<p>In this case, it was caused by a bug in a before delete trigger. There was a bug in the trigger causing the row to not be deleted:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>CREATE OR REPLACE FUNCTION trigger_delete_row_backup()\n    RETURNS trigger AS\n$BODY$\n    BEGIN\nINSERT INTO deleted_cycle values (OLD.*);\n    RETURN NEW;\n    -- should actually be RETURN OLD\n    END;\n$BODY$\n   language PLPGSQL;\n</code></pre>\n<p>Once the trigger was fixed, the issue no was resolved.</p>\n','2021-03-11 10:53:53',_binary '','2021-03-11 10:53:53',0,66580432),(66589769,'<p>Do you really need the batch insert there? It doesn\'t work at all regarding logs! You have to add an additional parameter to a database URL and enable it for Hibernate.</p>\n<p><strong>Without batch insert</strong></p>\n<pre><code>    @Entity\n    @Table(name = &quot;USERS&quot;)\n    public class User {\n        \n        @Id\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\n        @Column(name = &quot;ID&quot;)\n        private Long id;\n        \n        @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n        private List&lt;UserDetail&gt; userDetails = new ArrayList&lt;&gt;();\n        \n        @Transient\n        public void addUserDetail(UserDetail detail) {\n            detail.setUser(this);\n            userDetails.add(detail);\n        }      \n\n\n    }\n    \n    @Entity\n    @Table(name = &quot;USER_DETAILS&quot;)\n    public class UserDetail {\n        \n        @Id\n        @GeneratedValue(strategy = GenerationType.IDENTITY)\n        @Column(name = &quot;id&quot;)\n        private Long id;\n        \n        \n        @ManyToOne(fetch = FetchType.LAZY)\n        @JoinColumn(name = &quot;USER_ID&quot;)\n        private User user;\n    \n    }\n</code></pre>\n<pre><code>for each userDetail\n    user.add(userDetail)\n\nsave(user);\n</code></pre>\n<p>So just save a user.</p>\n<ol>\n<li>Use plurals for table names</li>\n<li>Use uppercase for table names</li>\n<li>Use <code>Long</code> for id (so it can be null)</li>\n<li>Use <code>orphanRemoval</code></li>\n<li>Don\'t use cascade at the <code>@ManyToOne</code></li>\n<li>Use <code>fetch = FetchType.LAZY</code> everywhere</li>\n</ol>\n<p><strong>With batch insert</strong></p>\n<p>Check that <code>User</code> doesn\'t have details at all</p>\n<p>Save user</p>\n<p>Set user for each detail</p>\n<p>And save details with batch</p>\n','2021-03-11 20:05:26',_binary '','2021-03-12 21:42:56',1,66588085),(66635017,'<p>I think that the issue here is, that you are replacing the characters collection with a new collection and the collection has different object than the persistence context, although it uses the same primary key. Since you are cascading changes, Hibernate tries to flush the changes and realizes that an entity for that primary key is already associated with the persistence context and fails to flush with the exception you are seeing. If you want to just apply the entity to the database, try to use <code>entityManager.merge</code> without loading the entity first. Alternatively, you could also try to apply the collections like this:</p>\n<pre><code>    if (newShow.getCaracters()!=null) {\n        for (Character c : newShow.getCaracters()) {\n            anime.getCaracters().add(entityManager.getReference(Character.class, c.getId());\n        }\n    }\n    if (newShow.getCategories()!=null) {\n        for (Category c : newShow.getCategories()) {\n            anime.getCategories().add(entityManager.getReference(Category.class, c.getId());\n        }\n    }\n</code></pre>\n','2021-03-15 09:00:45',_binary '','2021-03-15 09:00:45',0,66606495),(66620040,'<p>You should add <code>@Enumerated(EnumType.STRING)</code> on your <code>type</code> field, like:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Enumerated(EnumType.STRING)\nprivate final Type type;\n</code></pre>\n<p>This will allow persisting Enum field, as a string, in the corresponding varchar column.</p>\n<p><code>Ingredient</code> table\'s <code>type</code> column is of a varchar type, and <code>enum</code> needs to be represented as a String, in order to get mapped to that column.</p>\n','2021-03-14 00:51:46',_binary '','2021-03-14 14:51:11',5,66619611),(66635082,'<p>I would suggest you to use an <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#basic-enums\" rel=\"nofollow noreferrer\">enum</a> for this case:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public enum CompanyType {\n    LEGAL(&quot;Some legal type&quot;),\n    INDIVIDUAL(&quot;Some individual type&quot;);\n\n    private final String name;\n\n    CompanyType(String name)\n    {\n      this.name = name;\n    }\n\n    public String getCompanyName()\n    {\n       return name;\n    }\n}\n</code></pre>\n<p>and then use it in this way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Contragent {\n\n    // ...\n\n    @Enumerated(EnumType.STRING)\n    @Column(name = &quot;company_type&quot;)\n    private CompanyType companyType;\n\n}\n</code></pre>\n','2021-03-15 09:05:33',_binary '','2021-03-15 09:05:33',1,66630628),(66671353,'<p>You will need a custom JPA attribute converter for this purpose that maps this to a string. On the JDBC level, as far as I understood, this has to be represented as comma separated string. See the documentation for an example on how to use it: <a href=\"https://docs.oracle.com/javaee/7/api/javax/persistence/Convert.html\" rel=\"nofollow noreferrer\">https://docs.oracle.com/javaee/7/api/javax/persistence/Convert.html</a></p>\n','2021-03-17 10:36:51',_binary '','2021-03-17 10:36:51',1,66635581),(66646022,'<p>The error occurs because the object\'s (tgPerson) ID  is set. Hibernate distinguishes between transient and detached objects and <code>save</code> works only with transient objects. If <code>save</code> concludes the object is detached (which it will because the ID is set), it will return the &quot;detached object passed to persist&quot; error. You can find more details <a href=\"https://docs.jboss.org/hibernate/core/3.3/reference/en/html/objectstate.html\" rel=\"nofollow noreferrer\">here</a> and <a href=\"http://javapeople.blogspot.com/2008/02/transientpersistent-or-detached.html\" rel=\"nofollow noreferrer\">here</a>.</p>\n<p>However, this only applies if you have specified the primary key to be auto-generated: if the field is configured to always be set manually, then your code works.</p>\n<p>So you need to delete those annotations</p>\n<pre><code>@SequenceGenerator(name = &quot;TG_PERSON&quot;, sequenceName = &quot;S_TG_PERSON&quot;, allocationSize = 1)\n@GeneratedValue(generator = &quot;TG_PERSON&quot;)\n</code></pre>\n<p>or call saveOrUpdate method</p>\n','2021-03-15 21:38:33',_binary '\0','2021-03-15 21:38:33',0,66645838),(66671250,'<p>You will have to use <code>getOne</code> which uses <code>entityManager.getReference</code> behind the scenes, to refer to an existing object.</p>\n<pre><code>TgRequest tgRequest = requestRepository.findByIdRequest(1); //Request already exists\nLong idPerson = 1; //Person already exists on db, with id = 1,\n\nTgPerson tgPerson = personRepository.getOne(idPerson);\n\nTgRequestPerson tgRequestPerson = new TgRequestPerson();\nTgRequestPersonKey tgRequestPersonKey = new TgRequestPersonKey();\ntgRequestPersonKey.setIdRequest(tgRequest.getIdRequest());\ntgRequestPersonKey.setIdPerson(idPerson);\ntgRequest.addTgRequestPerson(tgRequestPerson);\ntgPerson.addTgRequestPerson(tgRequestPerson);\ntgRequestPerson.setIdRequestPerson(tgRequestPersonKey);\n\n\nrequestRepository.save(tgRequest);\n</code></pre>\n','2021-03-17 10:30:59',_binary '','2021-03-17 10:30:59',0,66645838),(66679012,'<p>Use either an ID class with Author as:</p>\n<pre><code>@Entity\n@Table(name = &quot;author&quot;)\n@IdClass(CustomID.class)\npublic class Author extends MyBaseEntity {\n\n    @Id\n    @ManyToOne()\n    @JoinColumn(name = &quot;book_id&quot;)\n    private Book book;\n\n    @ID\n    @Column(name = &quot;field_a&quot;, nullable = false)\n    @Type(type = &quot;uuid-char&quot;)\n    private UUID fieldA;\n\n}\n\npublic class CustomID implements Serializable {\n    //these match the names of the property marked with @Id in Author\n    private UUID book;\n    private UUID fieldA;\n}\n</code></pre>\n<p>Or an embeddable that defines the basic fields for your entity as you have already done:</p>\n<pre><code>@Entity\n@Table(name = &quot;author&quot;)\npublic class Author extends MyBaseEntity {\n\n    @EmbeddedId\n    private CustomID id;\n\n    @ManyToOne()\n    @MapsId(&quot;bookId&quot;)\n    @JoinColumn(name = &quot;book_id&quot;)\n    private Book book;\n}\n</code></pre>\n','2021-03-17 18:21:12',_binary '','2021-03-17 18:21:12',0,66678234),(66742505,'<p>I\'m sorry I was wrong.</p>\n<p>You don\'t need the rating_id because you are using review_id on the rating table for that purpose already.</p>\n<p>So you can delete rating_id on the review table.</p>\n','2021-03-22 08:26:26',_binary '','2021-03-22 11:53:05',1,66732549),(66785193,'<p>Actually the issue is not related to <code>Session</code> here, it\'s the modifying query which clears the persistence context and the object you are holding upto your web layer, is a detached object now.</p>\n<p>If you check the class in error message <code>AbstractPersistenceCollection</code> it has this function which is called to check if <code>session</code> is there or not</p>\n<pre><code>protected boolean isConnectedToSession() {\n        return session != null\n                &amp;&amp; session.isOpen()\n                &amp;&amp; session.getPersistenceContextInternal().containsCollection( this );\n    }\n</code></pre>\n<p>As you can see this is the <code>&amp;&amp;</code> condition, the last condition is checking if persistence context contains the collection and this might be throwing error in your case irrespective of session is open or not.</p>\n','2021-03-24 16:21:27',_binary '\0','2021-03-24 16:21:27',1,66756927),(68072631,'<p>I added the @Transactional(readOnly  = true)  to the businees layer method and it fixed it.</p>\n<pre><code>  /**\n * findUserById\n * @param id\n * @return\n */\n@Transactional(readOnly  = true)\n@Override\npublic UserDTO findUserById(Long id) {\n</code></pre>\n','2021-06-21 17:56:28',_binary '\0','2021-06-21 17:56:28',0,66756927),(66774699,'<p><strong>Updated answer</strong><br></p>\n<blockquote>\n<p>If saving in json format is not your prime concern, then you can\nfollow this answer.</p>\n</blockquote>\n<p>You can just do one thing to achieve it easily. Convert your key string with associated entities to a class and make it Embedded:</p>\n<pre><code>{&quot;key&quot;: &quot;97773e0b-3639-4af5-9585-93bc176715c0&quot;, &quot;fieldName&quot;: &quot;esn&quot;, &quot;operator&quot;: &quot;eq&quot;, &quot;operands&quot;: [&quot;599320&quot;]}.\n</code></pre>\n<p>Create the embeddable class:</p>\n<pre><code>@Embeddable\nPublic class Rules\n{\n private String key;\nprivate String fieldName;\nprivate String operator;\nprivate String eq;\nList&lt;String&gt; operands;\n//getters and setters\n}\n</code></pre>\n<p>Now in your <code>SaveFilter</code> class, add the Rules entity with embedded annotation:</p>\n<pre><code> @Embedded\n @Column(name=&quot;rules&quot;)\n private Rules rules;\n</code></pre>\n<p>This will save your full object like a different column for each entity of the embedded object.</p>\n','2021-03-24 04:17:35',_binary '\0','2021-03-24 05:47:10',0,66770409),(66785271,'<p>I was able to save the jsonb object with the help of 2 things -</p>\n<ol>\n<li>Used a third party library for Hibernate Types <code>implementation group: \'com.vladmihalcea\', name: \'hibernate-types-52\', version: \'2.10.3\'</code></li>\n<li>Defined a POJO called Rules and used it in DTO and Entity class</li>\n</ol>\n<p>public class Rules implements Serializable{</p>\n<pre><code>    private String key;\n    private String fieldName;\n    private String operator;\n    private String eq;\n    List&lt;String&gt; operands;\n\n}\n</code></pre>\n<p>My Revised Entity class :</p>\n<pre><code>@Getter @Setter @AllArgsConstructor @NoArgsConstructor\n@Builder(toBuilder=true)\n@Table(name=&quot;saved_filters&quot;)\n@TypeDef(\n        name = &quot;jsonb&quot;,\n        typeClass = JsonBinaryType.class\n    )\npublic class SavedFilter implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name=&quot;id&quot;)\n    private int id;\n\n    @Column(name=&quot;name&quot;)\n    private String name;\n\n  \n    @Column(name=&quot;rule_matching&quot;)\n    private String ruleMatching;\n    \n    \n    @Column(name=&quot;rules&quot;, columnDefinition= &quot;jsonb&quot;)\n    @Type(type = &quot;jsonb&quot;)\n    private Rules rules;\n\n    @JsonIgnore\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;user_sso&quot;)\n    private User user;\n</code></pre>\n<p>And My Revised DTO class:</p>\n<pre><code>@SuppressWarnings(&quot;serial&quot;)\n@Data\n@Getter @Setter @AllArgsConstructor @NoArgsConstructor\n@Builder(toBuilder=true)\npublic class SavedFilterDto implements Serializable {\n\n    private int id;\n\n    private String name;\n    \n    @JsonProperty(&quot;rules&quot;)\n    private Rules rules;\n    \n    private String ruleMatching;\n\n    private String sso;      \n    \n}\n</code></pre>\n','2021-03-24 16:25:27',_binary '','2021-03-24 16:25:27',0,66770409),(66777651,'<p>You didn\'t ask a question but it seems the question is supposed to be:</p>\n<blockquote>\n<p>How do I perform the mapping from entity to DTO in the service layer but outside the Hibernate session in an elegant way.</p>\n</blockquote>\n<p>I\'d recommend the <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/support/TransactionTemplate.html\" rel=\"nofollow noreferrer\"><code>TransactionTemplate</code></a> for this.\nUsage looks like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Autowired \nVacancyRepository repo;\n\n@Autowired\nTransactionTemplate tx;\n\nvoid someMethod(String company, String city){\n\n    VacancyEntity vac = tx.execute(__ -&gt; repo.findWithCompanyAndCity(company, city));\n    \n    return mappToDto(vac);\n}\n</code></pre>\n<p>That said, I think you are using the wrong a approach to solve the underlying problem.\nI suggest you take a look at having a test to verify the number of SQL statements executed.\nSee <a href=\"https://vladmihalcea.com/how-to-detect-the-n-plus-one-query-problem-during-testing/\" rel=\"nofollow noreferrer\">https://vladmihalcea.com/how-to-detect-the-n-plus-one-query-problem-during-testing/</a> for a way to do that.</p>\n','2021-03-24 08:55:26',_binary '','2021-03-24 08:55:26',1,66771544),(66817347,'<p>To avoid the N + 1 problem you still need to use an entity graph, although I think this is a perfect use case for <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a>.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(VacancyEntity.class)\npublic interface VacancyDto {\n    @IdMapping\n    Integer getId();\n    String getTitle();\n    CompanyDto getCompany();\n    EmployerProfileDto getEmployerCreatedBy();\n    JobCategoryDto getJobCategory();\n\n    @EntityView(CompanyEntity.class)\n    interface CompanyDto {\n        @IdMapping\n        Integer getId();\n        String getName();\n    }\n\n    @EntityView(EmployerProfileEntity.class)\n    interface EmployerProfileDto {\n        @IdMapping\n        Integer getId();\n        String getName();\n    }\n\n    @EntityView(JobCategoryEntity.class)\n    interface JobCategoryDto {\n        @IdMapping\n        Integer getId();\n        String getName();\n    }\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>VacancyDto a = entityViewManager.find(entityManager, VacancyDto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n<pre><code>Page&lt;VacancyDto&gt; findAll(Pageable pageable);\n</code></pre>\n<p>The best part is, it will only fetch the state that is actually necessary!</p>\n','2021-03-26 12:53:49',_binary '\0','2021-03-26 12:53:49',0,66771544),(66782384,'<p>You don\'t have any transaction boundaries declared.\nAs a result of this every call to a repository runs in its own transaction.\nAnd this is why the entity gets loaded (again) as part of the <code>save</code> operation.</p>\n<p>If you wrap the load, wait, save cycle into a single transaction you\'ll see your desired behaviour.</p>\n<p>In your test you can do that using a <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/support/TransactionTemplate.html\" rel=\"nofollow noreferrer\"><code>TransactionTemplate</code></a> for which the <a href=\"https://docs.spring.io/spring-framework/docs/5.3.5-SNAPSHOT/reference/html/data-access.html#tx-prog-template\" rel=\"nofollow noreferrer\">usage is described in the Spring Reference Documentation</a>.</p>\n<p>Regarding the follow up questions:</p>\n<blockquote>\n<p>Any ideas of why <code>VERSION</code> works?</p>\n</blockquote>\n<p>I don\'t have prove of the following, but this is what I strongly suspect.</p>\n<p>With <code>DIRTY</code> the original state of all the columns is stored in the session, therefor it is the state of the load operation within the current transaction.</p>\n<p>With <code>VERSION</code> the original state is part of the entity and therefore it survives across transaction boundaries.</p>\n<blockquote>\n<p>If I have to wrap everything since load into a transaction, wouldn’t that be a bad practice depending on what I’m doing between load and save?</p>\n</blockquote>\n<p>While I agree that transactions should be as short as possible, they shouldn\'t be shorter than they need to be in order to do their job. I wouldn\'t expect transactions of a few seconds to be problematic as long as you don\'t have any blocking locks.</p>\n<p>If you want to point at a bad practice, i.e. one that needs a good explanation why you use it, that would probably using <code>OptimisticLockType.DIRTY</code>. There is a reason why <code>OptimisticLockType.VERSION</code> is recommended and the default.</p>\n','2021-03-24 13:44:25',_binary '','2021-03-25 06:30:28',2,66781158),(66799982,'<p>When you use <code>FetchType.LAZY</code>, Hibernate ORM doesn\'t really return an initialized collection when you find the entity. The association is going to be a proxy and when you need access to the collection, Hibernate ORM is going to query the database and get it.</p>\n<p>To achieve this, the entity (the <code>NpmPackage</code>) needs to be in a managed state. If the entity is not managed and you try to access a lazy association (<code>versions</code> in this case), you get the <code>LazyInitializationException</code>.</p>\n<p>In your example, when you use <code>@Transactional</code>, the entity stays managed for the duration of the method. Without it, it becomes not managed as soon as you return from <code>findByNameIgnoreCase</code>.</p>\n<p>If you know that you will need the association <code>versions</code>, you could also use a fetch join query to get the <code>NpmPackage</code>:</p>\n<pre><code>from NpmPackage p left join fetch p.versions where p.name=:name\n</code></pre>\n<p>This way the associations stays lazy but you can get it with a single query.</p>\n','2021-03-25 12:56:54',_binary '\0','2021-03-27 19:04:47',1,66799679),(66814466,'<p><code>user</code> is a reserved keyword, so you must use square brackets to make it explicit that you mean the <em>object</em> named &quot;user&quot; it, i.e. use <code>[user]</code> instead of <code>user</code>.</p>\n','2021-03-26 09:47:11',_binary '\0','2021-03-26 09:47:11',0,66813575),(67005383,'<p>Pessimistic locking is implemented only in JBPM see <a href=\"https://github.com/lucamolteni/jbpm/blob/6a0cc1ff1874563afefe635b5c63e8b6278b007a/jbpm-test-coverage/src/test/java/org/jbpm/test/functional/task/PessimisticLockTasksServiceTest.java#L94\" rel=\"nofollow noreferrer\">here</a></p>\n<p>There\'s no such functionality in Drools persistence, <code>SessionInfo</code> will always use OptimisticLocking based on JPA\'s <code>@Version</code> annotation.</p>\n<p>If you need such feature, please file a feature request on Drools\' <a href=\"https://issues.redhat.com/secure/Dashboard.jspa\" rel=\"nofollow noreferrer\">Jira</a></p>\n','2021-04-08 13:48:02',_binary '','2021-04-08 13:48:02',1,66841081),(66859483,'<p>Don\'t map on the Id. Map means entity mapping not id mapping.</p>\n<pre><code>public class Endereco {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n\n    @OneToOne\n    private Usuario usuario\n\n     ....\n   }\n</code></pre>\n<p>Or if you don\'t want Endereco to hold a reference to a Usuario just remove it. But you can\'t place <code>@OneToOne</code> on the id field. If you have only on one side the <code>@OneToOne</code> then you need also the annotation <code> @MapsId</code>.</p>\n<pre><code>public class Usario {\n\n        @NotNull\n        @MapsId\n        @OneToOne(cascade = CascadeType.ALL)\n        private Endereco endereco;\n\n public class Endereco {\n    \n        @Id\n        @GeneratedValue(strategy = GenerationType.AUTO)\n        private Integer id\n\n       }\n</code></pre>\n<p>Because <code>@OneToOne</code> tries to Map with an entity which means to a table in Database. For id there isn\'t any entity or Table in the database. That is why it complains</p>\n','2021-03-29 18:17:25',_binary '','2021-03-29 18:54:16',2,66859274),(66866241,'<p>You are fetching the <code>application</code> information from DB.</p>\n<pre><code>final ApplicationEntity applicationEntity =\n    applicationRepository.findByName(app, service);\n</code></pre>\n<p>you are using that for Organization. So I could suggest to use <code>@Transactional</code> annotation on the method <code>createOrganizationEntity</code>.</p>\n<p>if not resolve please share the complete entity classes as well for better understanding.</p>\n','2021-03-30 07:09:45',_binary '\0','2021-03-30 07:09:45',0,66866096),(66873613,'<p>When you use</p>\n<pre><code>@ManyToOne(fetch = FetchType.EAGER)\n@JoinColumn(name = &quot;FK_BAR&quot;, nullable = false)\nprivate Bar bar;\n</code></pre>\n<p>don\'t need FetchType.EAGER beacuse that is default value;</p>\n<p>Take a look a good way to do that link:\n<a href=\"https://medium.com/@rajibrath20/the-best-way-to-map-a-onetomany-relationship-with-jpa-and-hibernate-dbbf6dba00d3\" rel=\"nofollow noreferrer\">https://medium.com/@rajibrath20/the-best-way-to-map-a-onetomany-relationship-with-jpa-and-hibernate-dbbf6dba00d3</a></p>\n','2021-03-30 15:08:56',_binary '\0','2021-03-30 15:08:56',0,66873045),(66903333,'<p>I suppose you didn\'t post the full model here? The error suggests that you have some kind of mapping to an object named <code>tips</code> which does not exist. See the error message <code>ORA-06576: not a valid function of procedure name tips</code></p>\n<p>Please check your model again and update the question.</p>\n','2021-04-01 11:02:16',_binary '','2021-04-01 11:02:16',0,66873045),(66881573,'<p>As suggested by @code_mechanic in comments, there are two ways to solve this problem:</p>\n<ol>\n<li>Initialize all the lazy references in <code>Transaction</code> (your service layer)</li>\n<li>Set all the lazy references to null in <code>Controller</code> before returning the API response.</li>\n</ol>\n<p>I have developed two utility methods, which you can use to dynamically check whether the lazy object was initialized or not. You can use these methods in controller layer:</p>\n<pre><code>/**\n * Was collection initialized.\n *\n * @param c the c\n * @return true, if successful\n */\npublic static boolean wasCollectionInitialized(Object c) {\n    if (!(c instanceof PersistentCollection)) {\n        return true;\n    }\n\n    PersistentCollection pc = (PersistentCollection) c;\n    return pc.wasInitialized();\n}\n\n/**\n * Was object initialized.\n *\n * @param c the c\n * @return true, if successful\n */\npublic static boolean wasObjectInitialized(Object c) {\n    if (!(c instanceof HibernateProxy)) {\n        return true;\n    }\n\n    HibernateProxy pc = (HibernateProxy) c;\n    return !pc.getHibernateLazyInitializer().isUninitialized();\n}\n</code></pre>\n','2021-03-31 04:15:42',_binary '\0','2021-03-31 04:15:42',0,66881177),(66886479,'<p>It\'s look like the changes made to the model may not impact the database, try recreating the database (or at least creating a new one) and scaffolding.</p>\n','2021-03-31 10:58:17',_binary '\0','2021-03-31 10:58:17',0,66886376),(66918630,'<p>I think I\'ve figured it out.</p>\n<p>As I said, I\'m pretty new to hibernate. Apparently, we cannot use a non primary column(without the <code>@Id</code> annonation), for <code>referencedColumnName</code>.</p>\n<p>Replaced <code>parent</code> in <code>FileSystemEntity</code> as follows:</p>\n<pre><code>    /**\n     * Each FileSystemEntity CAN have a parent.\n     * For entities without a parent, this is null\n     */\n    @OneToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = &quot;parent_folder&quot;, referencedColumnName = &quot;id&quot;)// changed from name\n    @OnDelete(action = OnDeleteAction.CASCADE)\n    private Folder parent;\n</code></pre>\n<p>This created the tables and mapped Foreign key references.</p>\n','2021-04-02 11:28:46',_binary '\0','2021-04-02 11:28:46',0,66909351),(66918955,'<p>This is a duplicate of <a href=\"https://stackoverflow.com/questions/3774198/org-hibernate-mappingexception-could-not-determine-type-for-java-util-list-at\">org.hibernate.MappingException: Could not determine type for: java.util.List, at table: College, for columns: [org.hibernate.mapping.Column(students)]</a></p>\n<p>You have to remove the <code>@Id</code> annotation from <code>getId()</code> in <code>Author</code> and <code>Book</code></p>\n','2021-04-02 11:56:17',_binary '','2021-04-02 11:56:17',1,66917234),(66929522,'<p><code>==</code> is java, not sql syntax. Its better to use <code> is null</code> though</p>\n','2021-04-03 09:24:58',_binary '\0','2021-04-03 09:24:58',1,66929486),(66929586,'<p>The syntax of your SQL query inside the @Formula annotation is wrong. You are missing the closing bracket too. I think it should look like the following:</p>\n<pre><code>@Formula(&quot;(SELECT COUNT(*) FROM SaveMetadata WHERE deletedTimestamp is NULL)&quot;)\nprivate Long instanceCount;\n</code></pre>\n<p>Off-topic: I would consider changing the approach. Do you really need to store the value in each entity instance?</p>\n','2021-04-03 09:33:18',_binary '','2021-04-03 09:33:18',1,66929486),(66944511,'<p>From the code snippet, what I see is that there are some unique constraints applied on the column \'discordId\'.</p>\n<pre><code>@Table(name = &quot;profile&quot;, uniqueConstraints = @UniqueConstraint(columnNames = &quot;discordId&quot;))\n</code></pre>\n<p>and</p>\n<pre><code>@Column(name=&quot;discordId&quot;, insertable=true, updatable=false)\nprivate String discordId;\n</code></pre>\n<p>As you can see, there is a parameter \'updatable\' which is set to false. Therefore, when you are trying to update an already existing object, hibernate is throwing UniqueConstraintViolationException.</p>\n<p>To fix this, set \'updatable=true\' or remove it altogether and it should work fine.</p>\n<pre><code>@Column(name=&quot;discordId&quot;, insertable=true, updatable=true)\nprivate String discordId;\n</code></pre>\n','2021-04-04 18:22:41',_binary '\0','2021-04-04 18:28:42',1,66943758),(66965072,'<p>Although this is not a direct answer to your question, I think this is a perfect use case for <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a>.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A possible DTO model could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(User.class)\npublic interface UserDto {\n    @IdMapping\n    Long getId();\n    String getName();\n    Set&lt;RoleDto&gt; getRoles();\n\n    @EntityView(Role.class)\n    interface RoleDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>UserDto a = entityViewManager.find(entityManager, UserDto.class, id);</code></p>\n<p>The best part is, it will only fetch the state that is actually necessary! There is a Quarkus integration, so you can even use this with native images if you want.</p>\n','2021-04-06 08:21:43',_binary '\0','2021-04-06 08:21:43',0,66945998),(66970738,'<p>If you have the customer id, you can try this:</p>\n<pre><code>Customer customer = entityManager.getReference(Customer.class, customerId);\nunderWriter.setCustomer(customer);\nsave(underWriter);\n</code></pre>\n<p>But the customer must exist in the database.\nOtherwise you must first persist the customer.</p>\n','2021-04-06 14:35:42',_binary '\0','2021-04-06 15:37:06',0,66970591),(66973897,'<p>The issue is probably due to the <code>CascadeType.ALL</code> setting on the <code>user</code> field of the <code>Participant</code>. This cascading means that whenever you save a <code>Participant</code> object (i.e. in the line <code>participantRepository.save(build);</code>, it will also insert the associated <code>User</code> object. Since you are already saving the <code>User</code> objects in the first loop, the second time the <code>User</code> is inserted will cause a violation because the email should be unique.</p>\n<p>You can simply avoid saving the <code>User</code> objects the first time, and instead save them in memory (e.g. an <code>ArrayList</code>), which you can use to set the user for each <code>Participant</code>.</p>\n<p>Otherwise you should not have a <code>CascadeType.ALL</code> setting in the <code>Participant#user</code> field.</p>\n','2021-04-06 17:50:05',_binary '','2021-04-06 17:50:05',0,66973615),(67002253,'<p>Remove <code>@SecondaryTable</code>. Hibernate ORM already knows that there is a secondary table because of the mapping with <code>@ElementCollection</code>.</p>\n<p><code>@SecondaryTable</code> is used if you have the property of a single entity spread in multiple tables. This is not your case because what you are mapping in the other table is an association.</p>\n','2021-04-08 10:37:49',_binary '','2021-04-08 10:37:49',1,67000842),(67004344,'<p><code>@OneToOne</code> annotation should be used on both parent and child side to create a bidirectional one-to-one mapping.</p>\n<p>As the error says: <code>Referenced property not a (One|Many)ToOne</code> There is no mapping on the <code>Ingredient</code> side.</p>\n<p>You should specify the entity association for <code>foodInfo</code> field with <code>@OneToOne</code>:</p>\n<pre><code>@Entity\n@Table(name=&quot;ingredient&quot;)\npublic class Ingredient {\n    // ...\n    @OneToOne\n    @JoinColumn(name = &quot;code&quot;)\n    private FoodInfo foodInfo;\n}\n</code></pre>\n<hr />\n<p>Update for <code>com.fasterxml.jackson.databind</code> exception:</p>\n<p>When serializing bidirectional relationships with jackson, cyclic dependency leads to an endless loop. To break the cycle you should add <code>@JsonManagedReference</code> and <code>@JsonBackReference</code> annotations:</p>\n<p>FoodInfo class:</p>\n<pre><code>@Entity\n@Table(name=&quot;food&quot;)\npublic class FoodInfo {\n    // ...\n    @OneToOne(mappedBy = &quot;foodInfo&quot;, cascade = CascadeType.ALL)\n    @JsonManagedReference\n    private Ingredient ingredient;\n}\n</code></pre>\n<p>Ingredient class:</p>\n<pre><code>@Entity\n@Table(name=&quot;ingredient&quot;)\npublic class Ingredient {\n    //...\n    @OneToOne\n    @JoinColumn(name = &quot;code&quot;)\n    @JsonBackReference\n    private FoodInfo foodInfo;\n}\n</code></pre>\n','2021-04-08 12:49:54',_binary '','2021-04-08 14:11:29',2,67003899),(67006730,'<p>The problem is your mapping, you are overriding/redefining the <a href=\"https://docs.oracle.com/javaee/7/api/javax/persistence/DiscriminatorColumn.html\" rel=\"nofollow noreferrer\"><code>@DiscriminatorColumn</code></a>. You should use <a href=\"https://docs.oracle.com/javaee/7/api/javax/persistence/DiscriminatorValue.html\" rel=\"nofollow noreferrer\"><code>@DiscriminatorValue</code></a> instead.</p>\n<p>The <code>@DiscriminatorColumn</code> defines which column contains the value to use for mapping the row to the proper entity class. With <code>@DiscriminatorValue</code> you specify which value maps to which class.</p>\n<p>Your code should look something like this.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity(name = &quot;Players&quot;)\n@DiscriminatorValue(&quot;player&quot;)\n@DiscriminatorOptions(force=true)\npublic class Player extends User {\n\n    private String dateOfBirth;\n    private String notes;\n\n}\n</code></pre>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity(name = &quot;Coaches&quot;)\n@DiscriminatorValue(&quot;coach&quot;)\n@DiscriminatorOptions(force=true)\npublic class Coach extends User{\n\n}\n</code></pre>\n<p>Additionally, you might want to make your user <code>abstract</code> and add <code>@MappedSuperclass</code> to it as well.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n@DiscriminatorColumn(name = &quot;User_Type&quot;)\n@MappedSuperclass\npublic abstract class User { ... }\n</code></pre>\n<p>Unless there are also users that aren\'t players or coaches in your system (but then you would need an additional <code>@DiscriminatorValue</code> for that as well.</p>\n','2021-04-08 15:01:38',_binary '','2021-04-08 15:01:38',2,67005973),(67010228,'<p>I have used this with db2 database .It is generating the correct show_id with correct prefix. This issue\nseems to be only with h2 in memory database</p>\n','2021-04-08 18:56:20',_binary '\0','2021-04-08 18:56:20',0,67008975),(67011701,'<p>If you want to run a JPA query, it should look something like this:</p>\n<pre><code>private static final String MY_REQUEST =\n          &quot;SELECT us.login, cd.date, us.password &quot; +\n          &quot;FROM User us JOIN us.commands cd &quot; +\n          &quot;WHERE us.idUser = 1&quot;;\n</code></pre>\n<p>and make sure to use <code>createQuery</code>:</p>\n<pre><code>List&lt;Object[]&gt; = sessionFactory.getCurrentSession().createQuery(MY_REQUEST)\n    .list();\n</code></pre>\n<p><code>createSQLQuery</code> is for when you want to run a native SQL query.\nIn this case it would look like:</p>\n<pre><code>private static final String MY_REQUEST = \n    &quot;select us.USER_ID, cd.CMD_DATE, us.USER_PASSWORD &quot; +\n    &quot;from Users us JOIN ComaCommands cd ON us.USER_ID = cd.USER_ID &quot; +\n    &quot;where us.USER_ID = 1&quot;;\n\n\nList&lt;Object[]&gt; = sessionFactory.getCurrentSession().createSQLQuery(MY_REQUEST)\n    .list();\n\n</code></pre>\n<p>But you should use JPQL queries when possible.</p>\n','2021-04-08 20:51:18',_binary '\0','2021-04-09 00:36:06',1,67011460),(67043924,'<p>You can specify <code>ON DELETE CASCADE</code> for the <a href=\"https://www.postgresql.org/docs/13/ddl-constraints.html#DDL-CONSTRAINTS-FK\" rel=\"nofollow noreferrer\">foreign key constraint</a> <code>fka7me64vk6jtx81wt2ggbvm6ur</code> on the table <code>users_songs</code> like below:</p>\n<pre><code>@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n@JoinTable(\n   name = &quot;users_songs&quot;,\n   joinColumns = @JoinColumn(\n      name = &quot;u_id&quot;,\n      referencedColumnName = &quot;user_id&quot;\n   ),\n   inverseJoinColumns = @JoinColumn(\n      name = &quot;s_id&quot;,\n      referencedColumnName = &quot;song_id&quot;\n   ),\n   inverseForeignKey = @ForeignKey(\n      name = &quot;users_songs_songs_FK&quot;,  // fka7me64vk6jtx81wt2ggbvm6ur renamed to users_songs_songs_FK\n      foreignKeyDefinition = &quot;FOREIGN KEY (s_id) REFERENCES songs(song_id) ON DELETE CASCADE&quot;\n   )\n)\nprivate List&lt;Song&gt; songs = new ArrayList&lt;&gt;();\n</code></pre>\n<p>and after database schema regeneration your initial query should work as expected.</p>\n','2021-04-11 10:32:49',_binary '\0','2021-04-11 13:45:29',2,67043733),(67056482,'<p>The error happens because you are treating a <code>DTO</code> as an entity.\nRemove the JPA annotations from the <code>DTOs</code> and don\'t use those classes for connecting to the db.</p>\n<p>You will convert the results from your queries from entities to DTO and vice-versa.</p>\n<p>I would also suggest to have a look at <a href=\"https://mapstruct.org/\" rel=\"nofollow noreferrer\">Mapstruct</a> for the creation of DTO. This will probably make it easier to separate the entities from the DTOs.</p>\n','2021-04-12 10:04:32',_binary '','2021-04-12 10:45:55',0,67056309),(67058018,'<p>As far I understand You may have done wrong in your controller class.</p>\n<p>If you want to create a user when posting your entity. At first, you have to save your user in your controller class.</p>\n<pre><code>company.setUsers(userRepository.save(company.getUser));\nreturn companyRepository.save(company);\n</code></pre>\n<p>If you want to use existing users then you have to load user using id in your controller.</p>\n','2021-04-12 12:03:05',_binary '','2021-04-12 12:03:05',0,67057440),(67064946,'<p>I hope the issue is with data you are passing to the Book and Author object are incorrect and wrong.</p>\n<p>Example <code>Book_ID</code> does not map to Book pojo object actually it is <code>id</code> but for Author object you are passing the right one\n<code>authorId</code></p>\n<p>As per my understanding Book is trying to save the Author object based on <code>authorId</code> of 6. But Author object with 6 is already presented in the database.</p>\n<p>Basically this is because of <code>@OneToOne(cascade = CascadeType.ALL)</code> option</p>\n<p>So the exact JSON to inserting a new record is</p>\n<pre><code>{\n  &quot;title&quot;: &quot;Java&quot;,\n  &quot;author&quot;: {\n    &quot;firstName&quot;: &quot;Mayank&quot;,\n    &quot;lastName&quot;: &quot;kumar&quot;,\n    &quot;language&quot;: &quot;English&quot;\n  }\n}\n</code></pre>\n<p>I hope this will work.</p>\n','2021-04-12 20:01:03',_binary '','2021-04-14 05:23:54',1,67064404),(67067364,'<p>I think it’s a good practice for One-To-One mapping to have it Bidirectional.\nIn your current setup, it is Unidirectional where the Book is the owning/parent entity. Should it be the Author?</p>\n<p>If we will refactor your code, it should look similar to this (not tested).\n<strong>NOTE:</strong> This assumes that the <em>Author</em> exists. Otherwise, we will use the <code>AuthorController, AuthorService, AuthorRepository</code>.</p>\n<p><strong>AuthorEntity.java</strong>*</p>\n<pre><code>@Entity\n@Table(name = &quot;Author&quot;)\npublic class Author {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private int authorId;\n\n    @Column(name = &quot;first_name&quot;)\n    private String firstName;\n\n    @Column(name = “last_name&quot;)\n    private String lastName;\n\n    @Column(name = “language”)\n    private String language;\n\n    @OneToOne(\n      mappedBy = “book”,\n      orphanRemoval = true,\n      cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE },\n      fetch = FetchType.EAGER\n    )\n    private Book book;\n }\n</code></pre>\n<p><strong>BookEntity.java</strong></p>\n<pre><code>@Entity\n@Table(name = &quot;Book&quot;)\npublic class Book {\n    @Id \n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = &quot;Book_ID&quot;)\n    private int id;\n    \n    @Column(name = “title”)\n    private String title;\n\n    @JoinColumn(\n      name = “author_id&quot;,\n      referencedColumnName = &quot;id&quot;,\n      foreignKey = @ForeignKey(name = “author_book_fk&quot;)\n    )\n    private Author author;\n}\n</code></pre>\n<p>In your <strong>BookController.java</strong>, you must expect a <strong>@RequestBody</strong> the following: <code>title: ‘Data JPA’, author: 1</code></p>\n<p>In your <strong>BookService.java</strong>, you can do this.</p>\n<pre><code>public Book save(String bookTitle, Long authorId) {\n    Author author = authorService.findById(authorId); // should be formatted to 1L, 2L, etc…\n    \n    Book book = new Book();\n    book.setTitle(bookTitle);\n    book.setAuthor(author);\n\n    bookRepository.save(book);\n}\n</code></pre>\n<p>*I suggest you make use of DTO for handling data between controller&lt;-&gt;service.</p>\n','2021-04-13 00:50:47',_binary '\0','2021-04-13 00:50:47',1,67064404),(67094751,'<p>You are having this issue because there is be a possibility that composite keys (AID,AMARKET) and (BID,BMARKET) will not be unique when doing a join on keys AMARKET = BMARKET. Therefore you are getting the error <code>not mapped to a single property</code>. Please bear with me, use the following sample data to analyze the issue;</p>\n<p>For table A</p>\n<pre><code>AID  AMARKET \n 1      1       \n 2      1    \n 3      2 \n</code></pre>\n<p>For table B</p>\n<pre><code>BID  BMARKET\n 1      1   \n 2      2\n 3      2\n</code></pre>\n<p>The above scenario is absolutely possible (at least on a database level) and just using <code>AMARKET</code> and <code>BMARKET</code> to make the join <code>@OneToMany</code> is not possible. What is possible though is to use <code>@ManyToMany</code>, this will immediately solve the issue if the table structures are correct.</p>\n<p>But what if it is required to use <code>@OneToMany</code> due to some business constraint. Then you must update the table B to include <code>A.AID</code> and add a foreign key constraint to ensure data integrity. Then only the result set will be valid for the relationship <code>@OneToMany</code>. And the join will be as follows;</p>\n<pre><code>@OneToMany\n@JoinColumn(name = B.DB_AID, referencedColumnName = DB_ID)\n@JoinColumn(name = B.DB_MARKET, referencedColumnName = DB_MARKET)\npublic List&lt;B&gt; bs;\n</code></pre>\n<p>In B:</p>\n<pre><code>@Entity\n@Table(name = &quot;BTABLE&quot;)\npublic class B implements Serializable {\n    public static final String DB_ID = &quot;BID&quot;;\n    public static final String DB_MARKET = &quot;BMARKET&quot;;\n    public static final String DB_AID = &quot;AID&quot;;\n\n    @EmbeddedId\n    @AttributeOverrides({\n            @AttributeOverride(name = &quot;id&quot;, column = @Column(name = DB_ID)),\n            @AttributeOverride(name = &quot;market&quot;, column = @Column(name = DB_MARKET))\n    })\n    public BIdClass id;\n\n    @Column(name = DB_AID)\n    private Long aid; // assuming aid is a Long\n}\n</code></pre>\n<p>Now the join is being done on the composite primary key of A.</p>\n','2021-04-14 15:35:20',_binary '','2021-04-17 10:36:27',1,67078033),(67092861,'<p>you have to manually set each and every <code>ExchangeRate</code> object with <code>ExchangeRatesTable</code> object, as you have <code>ExchangeRatesTable</code> setter method. then it will not be empty and get save in the DB as well.</p>\n<pre><code>Parent parent = new Parent();\nChild child1 = new Child();\nchild1.setParent(parent);\nparent.setChildren(Arrays.asList(child1));\njpa.save(parent);\n</code></pre>\n<p>in your code you can iterate <code>ExchangeRateList</code> and set <code>ExchangeRatesTable</code> obj to all elements.</p>\n','2021-04-14 13:35:10',_binary '','2021-04-14 13:35:10',1,67092679),(67111025,'<p>You can get your complete objects tree with :</p>\n<pre class=\"lang-java prettyprint-override\"><code>import org.springframework.transaction.annotation.Transactional;\n\n@Transactional\npublic List&lt;Answer&gt; getAnswers(Long id) {\n    return repository.findByMessagesidOrderBySenddateDesc(id);\n}\n</code></pre>\n','2021-04-15 15:07:32',_binary '\0','2021-04-15 15:07:32',0,67093035),(67123440,'<p>The type of <code>md</code> is <code>String</code> this is why you see an error. What you need is something like this:</p>\n<pre><code>@Lock(LockModeType.PESSIMISTIC_WRITE)\n@Query(value = &quot;SELECT d FROM Document d INNER JOIN d.documentMetadata md WHERE (KEY(md).id NOT IN (:documentMetadataId))&quot;)\nList&lt;Document&gt; findAllByDocumentRequiredMetadataNotSet(long documentMetadataId);\n</code></pre>\n<p>You also had a ON clause which is no necessary/wrong. I think you should read into HQL/JPQL first as you don\'t seem to understand that a join of an association, will add the join predicate in the SQL automatically.</p>\n<p>Note though, that the syntax <code>KEY(..).id</code> is only supported in newer Hibernate versions, so you might have to update.</p>\n','2021-04-16 10:20:40',_binary '','2021-04-16 10:20:40',0,67100233),(67155451,'<p>Add <code>@Id</code> annotation before <code>private String id;</code> field, I also recommend to add smth like <code>@GeneratedValue</code> for id auto generation</p>\n','2021-04-19 03:02:38',_binary '\0','2021-04-19 03:02:38',1,67154805),(67170454,'<p>The key message is:</p>\n<blockquote>\n<p>ERROR: relation &quot;userdetails&quot; does not exist</p>\n</blockquote>\n<p>This indicates that your Hibernate configuration has <strong>NOT</strong> auto-created the table. You will either need to manually create the table, or add the following hibernate property:</p>\n<pre><code> hibernate.hbm2ddl.auto=update\n</code></pre>\n','2021-04-19 23:16:41',_binary '\0','2021-04-19 23:16:41',0,67170318),(67176119,'<p>The field category is of type <code>List</code>:</p>\n<pre><code>List&lt;Category&gt; category \n</code></pre>\n<p>but it seems you are trying to assign a <code>LinkedHashMap</code>, that\'s a <code>Map</code>.</p>\n<p>Didn\'t you mean to use a <code>LinkedList</code>?\nWe need to see how you are assigning the field category to help you more.</p>\n','2021-04-20 09:26:55',_binary '','2021-04-20 09:26:55',1,67170937),(67176553,'<p>I think your case resembles what has been described <a href=\"https://vladmihalcea.com/the-best-way-to-map-a-onetoone-relationship-with-jpa-and-hibernate/\" rel=\"nofollow noreferrer\">here</a>. Note that if the parent <em>entity</em> is not already saved, you have to save it from the dependent <code>PostsDetail</code>. So, it should be okay if you do the following:</p>\n<pre><code>Posts posts = new Posts(); \n//Posts savedPost = postsRepository.save(posts); // &lt;-- here\nPostsDetail postsDetail = new PostsDetail();\npostsDetail.setPosts(posts); // &lt;-- here\npostsDetailRepository.save(postsDetail);\n</code></pre>\n<p>Since <code>save()</code> does not flush your data immediately, <code>savedPost</code> will remain not persisted when you do <code>postsDetailRepository.save(postsDetail);</code></p>\n','2021-04-20 09:52:24',_binary '','2021-04-20 09:52:24',0,67175068),(67175647,'<p>if you are expecting that <code>Moneda</code> object has many <code>Documento</code> object then you should make it <code>List&lt;Documento&gt;</code> because <code>@OneToMany</code> annotation expects the property to be a <code>collection</code> of some objects.</p>\n','2021-04-20 08:56:30',_binary '','2021-04-20 08:56:30',2,67175487),(67189381,'<p>I agree with Andriy\'s comment with a slight addition of &quot;You should not access [lazily loaded] entity details outside transaction bounds&quot;. But, for starters, is there some reason you want the OneToOne to be FetchType.LAZY to begin with? If you changed it to EAGER, your &quot;lazy&quot; problem would be resolved by virtue of it no longer being a lazy reference but being a real hydrated object.</p>\n<p>If that is not the exact route you want to take, there are a dozen ways to EAGERLY fetch things in general and frankly too many to present a single solution here as best/ideal. As your code exists, since all the dereferencing (for now) is happening inside your Controller, then Andriy\'s suggestion to add @Transaction to the Controller may suffice in that it will be lazily fetched when you need it.</p>\n<p>But in the future, if you have Lazy elements in a POJO that get returned to the stack higher than the controller, say, just before they are serialized to JSON for example, then even the CONTROLLER\'s @Transactional wouldn\'t be &quot;high&quot; enough in the stack and you\'ll end up with the same Lazy init problem..</p>\n<p>Also, by having it be Lazy and then dereferencing it elsewhere, you\'re guaranteeing two trips to the Database. With proper FETCH/JOIN eager loads, you would limit that to one, which can be another performance benefit.</p>\n<p>So either way, you\'re back to the real problem at hand.. looking for ways to ensure your operations occur ENTIRELY inside a Transaction boundary <em>OR</em> having to completely hydrate the object so no &quot;Lazy&quot; danglers get dereferenced outside of that.. i.e. by making them eager or by force-initializing any potential Lazy proxies/collections.</p>\n','2021-04-21 04:40:32',_binary '\0','2021-04-21 04:40:32',0,67175957),(67203798,'<p>You are trying to use lazy data after closing a transaction, and yes, one of the ways is usage EAGER.\nAnother way - usage @Transactional on a method that using this data.</p>\n','2021-04-21 21:36:36',_binary '\0','2021-04-21 21:36:36',4,67197737),(70447006,'<p>I was getting this error:</p>\n<blockquote>\n<p>Method threw \'org.hibernate.LazyInitializationException\' exception.</p>\n</blockquote>\n<p>This is because currently there is no session present. Hibernate opens a session and closes it, but for &quot;lazy = true&quot; or &quot;fetch = FetchType.LAZY&quot; such fields are populated by proxies. When you try to find the value for such a field, it will attempt to go to the database using the active session to retrieve the data. If no such session can be found, you get this exception.</p>\n<p>You can fix it using &quot;lazy=false&quot; or check whether you have used @Transcational properly (try to use this in your service layer than your data access layer), you can also use</p>\n<blockquote>\n<p>@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</p>\n</blockquote>\n<p>OR</p>\n<blockquote>\n<p>@Transactional</p>\n</blockquote>\n','2021-12-22 09:40:17',_binary '\0','2021-12-22 09:40:17',1,67197737),(67214512,'<p>Just declare in repository (without @Query annotation):</p>\n<pre class=\"lang-java prettyprint-override\"><code>Optional&lt;Brand&gt; findByBrandName(String brandName);\n</code></pre>\n<p>And now you can simplify service\'s code:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Override\npublic Brand getBrandByName(String brandName) {\n    return brandRepository.findByBrandName(brandName).orElseThrow(() -&gt; new RecordNotFoundException());\n}\n</code></pre>\n<p>Under the hood Spring Data automaticaly generates SQL according to method name and parameters. To learn more, check out this <a href=\"https://baeldung.com/spring-data-derived-queries\" rel=\"nofollow noreferrer\">article</a>.</p>\n<p>In addition, this approach allows to perform only one query instead of two.</p>\n','2021-04-22 13:44:48',_binary '\0','2021-04-22 16:08:27',1,67213857),(67219346,'<p>It is a Dialect issue, instead of <code>org.hibernate.dialect.MySQLDialect</code> use <code>org.hibernate.dialect.MySQL5Dialect</code>.</p>\n<p>Also as a general advice I would recommend you to always have a look at stack trace as it provides lots of hints.</p>\n','2021-04-22 19:05:44',_binary '','2021-04-22 19:05:44',0,67219203),(67247024,'<p>Because <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-nonaggregated\" rel=\"nofollow noreferrer\">you are using <code>@IdClass</code></a> you don\'t need to annotate <code>PatientDiseaseId</code> with <code>@Embedded</code> and <code>@Column</code>.  And you have to refer to the entities.</p>\n<p>This is what it should look like:</p>\n<pre><code>public class PatientDiseaseId implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    \n    private Patient patient;\n    \n    private Disease disease;\n\n    //getters and setters\n    //hashCode and equals\n}\n</code></pre>\n','2021-04-24 20:11:23',_binary '','2021-04-26 08:52:53',0,67226915),(67241401,'<p>You have to make sure that both save operations are in the same transaction otherwise the first entity is detached an this leads to this exception.</p>\n<p>So simply add <code>@Transactional</code> to the run method:</p>\n<pre><code>@Transactional\n@Override\npublic void run(String... args) throws Exception {\n</code></pre>\n','2021-04-24 09:49:54',_binary '\0','2021-04-24 09:49:54',0,67240157),(67269024,'<p>I found the solution. Your Hibernate settings are also\n<code>settings.put (Environment.USE_LEGACY_LIMIT_HANDLERS, &quot;true&quot;);</code> needs to be added. Also, createQuery should be used on sessionFactory instead of createSqlQuery. For example;</p>\n<pre><code>List &lt;Products&gt; products = (List &lt;Products&gt;) session.createQuery(&quot;PRODUCTS ProductStock&gt; 0 AND CategoryID = 1&quot;).SetFirstResult(8).setMaxResults(8).list ();\n</code></pre>\n<p>The problem is that it doesn\'t support the SQL query offset on hibernate. Maybe someone is useful, thanks everyone.</p>\n','2021-04-26 14:59:52',_binary '','2021-04-26 14:59:52',0,67268223),(67278838,'<p>Associations need to be associated to other entities (or embeddables). The error is telling you what\'s wrong: you are trying to associate a one to one to a <code>String</code> in <code>Result.answer</code>.</p>\n<p>What you need to do is to map all three tables as entities:</p>\n<pre><code>@Entity\n@Table(name = &quot;Antworten&quot;)\nclass Antwort {\n...\n}\n\n@Entity\n@Table(name = &quot;AntwortUndTag&quot;)\nclass Result {\n    ...\n}\n\n\n@Entity\n@Table(name = &quot;Tags&quot;)\nclass Tag {\n...\n}\n\n</code></pre>\n<p>Now you can create the association in <code>Result</code>:</p>\n<pre><code>@Entity\n@Table(name = &quot;AntwortUndTag&quot;)\nclass Result {\n\n   @ManyToOne\n   @JoinColumn(name=&quot;antwortID&quot;)\n   Antwort answer;\n\n   @ManyToOne\n   @JoinColumn(name=&quot;tagID&quot;)\n   Tag tag;\n}\n</code></pre>\n<p>Note that I\'ve used a <code>@ManyToOne</code> because from the diagram it seems that an answer can have multiple tags.</p>\n<p>You can find a lot of examples on <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations\" rel=\"nofollow noreferrer\">how to map associations</a> in the Hibernate ORM documentation. In particular see <em>Example 172. Bidirectional many-to-many with link entity</em>. It seems that\'s the mapping that you need.</p>\n','2021-04-27 07:41:23',_binary '','2021-04-27 07:52:29',2,67278635),(67287840,'<p><strong>For Hibernate 5.x</strong></p>\n<p>You can probably use <code>@PrePersist</code>:</p>\n<pre><code>@Entity\n@Table(name = &quot;ACQUISTO_EVENTI&quot;)\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class PropostaAcquisto implements Serializable {\n\n    @PrePersist\n    public void createKey() {\n        this.codPropostaEventoPrimaryKey = this.codProposta + &quot;_&quot; + this.eventoId;\n    }\n\n}\n</code></pre>\n<p>See the Hibernate ORM documentation for more info <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#events-jpa-callbacks\" rel=\"nofollow noreferrer\">about JPA Callbacks</a>.</p>\n<p><strong>For Hibernate ORM 4.3.x</strong></p>\n<p>If you are using an older version of Hibernate ORM, you can probably achieve the same <a href=\"https://docs.jboss.org/hibernate/orm/4.3/devguide/en-US/html_single/#registering-listeners-example\" rel=\"nofollow noreferrer\">registering an event listener</a> on the <code>EventType.PERSIST</code>:</p>\n<pre><code>public class MyIntegrator implements org.hibernate.integrator.spi.Integrator {\n\n    public void integrate(\n            Configuration configuration,\n            SessionFactoryImplementor sessionFactory,\n            SessionFactoryServiceRegistry serviceRegistry) {\n\n        final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService( EventListenerRegistry.class );\n\n        // If you wish to have custom determination and handling of &quot;duplicate&quot; listeners, you would have to add an\n        // implementation of the org.hibernate.event.service.spi.DuplicationStrategy contract like this\n        eventListenerRegistry.addDuplicationStrategy( myDuplicationStrategy );\n\n        // This form adds the specified listener(s) to the beginning of the listener chain\n        eventListenerRegistry.prependListeners( EventType.PERSIST, new CreatePKBeforePersist() );\n}\n</code></pre>\n<p>Where <code>CreatePKBeforePersist</code> is a class implementing <code>PersistEventListener</code>.</p>\n<p>Because you cannot bind the listener to a specific entity, you will have to check the object before applying the change:</p>\n<pre><code>public class CreatePKBeforePersist implements PersistEventListener {\n\n    public void onPersist(PersistEvent event) throws HibernateException {\n        if (event.getObject() instanceof PropostaAcquisto) {\n            PropostaAcquisto pa = (PropostaAcquisto) event.getObject();\n            pa.createKey();\n        }\n    }\n\n    ...\n}\n</code></pre>\n<p><a href=\"https://in.relation.to/2012/01/09/event-listener-registration/\" rel=\"nofollow noreferrer\">This article explains how you can register an integrator</a>:</p>\n<p>Add a text file in:</p>\n<pre><code>/META-INF/services/org.hibernate.integrator.spi.Integrator\n</code></pre>\n<p>the file will contain only the full name of your class:</p>\n<pre><code>org.project.MyIntegrator\n</code></pre>\n<p>You can check the <code>java.util.ServiceLoader</code> JavaDocs for a complete explanation of what\'s possible to inlcude in the file.</p>\n','2021-04-27 17:23:06',_binary '','2021-04-30 10:24:50',0,67280621),(67317763,'<p>For some reason, the entity that you registered is not picked up. Maybe you are using a Session/SessionFactory that uses a different configuration file?</p>\n','2021-04-29 12:51:00',_binary '\0','2021-04-29 12:51:00',0,67290738),(67367371,'<p>\'User\' is a reserved word in mysql maybe that is the cause?</p>\n','2021-05-03 10:27:31',_binary '\0','2021-05-03 10:27:31',0,67290738),(67388027,'<p><strong>Entities</strong>\nYou may change two things in your code</p>\n<pre><code>@Id\n@GeneratedValue(strategy = GenerationType.AUTO)\nprivate int id;\n</code></pre>\n<p>all generated ID\'s change to:</p>\n<pre><code> @Id\n @GeneratedValue(strategy = GenerationType.IDENTITY)\n private int id;\n</code></pre>\n<p><strong>HibernateUtil</strong>\nApply the following change</p>\n<pre><code>Metadata metadata = new MetadataSources(serviceRegistry).getMetadataBuilder().build();\nreturn metadata.getSessionFactoryBuilder().build();\n</code></pre>\n','2021-05-04 15:48:44',_binary '\0','2021-05-04 15:48:44',0,67290738),(67391599,'<p>With version 5 hibernate changed the naming strategies. So I think \'User\' in the query does not match the \'User\' class nor the \'USER\' table in the database anymore.</p>\n<p>I suggest that you change the query to use the actual table name in the database.</p>\n<p>According to the @Table annotation, the query should look as follows:</p>\n<pre><code>&quot;select password, salt from USER where userName=:fullName&quot;\n</code></pre>\n<p>if \'USER\' is the actual table name.</p>\n','2021-05-04 20:14:06',_binary '\0','2021-05-04 20:14:06',0,67290738),(67336224,'<p>Fetch performance is a difficult topic and I totally understand that you don\'t want to change the fetch type or mode on entity level. Usually, this can be solved by using entity graphs for defining a graph of associations to fetch which are per-query. In your particular case, the problem is that the threads do not fetch all the state that is later needed. When you access that state later in a different thread, the proxy has no reference to a persistence context anymore (because it\'s bound to a transaction/thread) and fails with the LazyInitializationException you are seeing. You can solve this by using an entity graph so that no lazy loading happens, or by enabling the <code>hibernate.enable_lazy_load_no_trans</code> property which will create a session on-demand for fetching the data, but I think this is a perfect use case for <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a>.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(TransSalesOrder.class)\npublic interface TransSalesOrderOnlyResponseDto {\n    @IdMapping\n    Long getId();\n    String getName();\n    List&lt;TransDeliveryOrderDto&gt; transDeliveryOrder;\n\n    @EntityView(TransDeliveryOrder.class)\n    interface TransDeliveryOrderDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>TransSalesOrderOnlyResponseDto a = entityViewManager.find(entityManager, TransSalesOrderOnlyResponseDto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n<pre><code>Page&lt;TransSalesOrderOnlyResponseDto&gt; findAll(Pageable pageable);\n</code></pre>\n<p>The best part is, it will only fetch the state that is actually necessary!</p>\n','2021-04-30 15:07:08',_binary '\0','2021-04-30 15:07:08',0,67302678),(67307231,'<p>The <a href=\"https://javaee.github.io/javaee-spec/javadocs/javax/persistence/JoinTable.html\" rel=\"nofollow noreferrer\">@JoinTable</a> annotation should be used only on <em>the owning side of the association</em>, the other one being referred to as the inverse (or the <code>mappedBy</code>) side.</p>\n<p>The correct mapping for your case should be like below:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\nclass Product {\n    \n   // ...\n       \n   @ManyToOne\n   @JoinTable(name=&quot;user&quot;,\n      joinColumns= @JoinColumn(name=&quot;stud_id&quot;),\n      inverseJoinColumns = @JoinColumn(name = &quot;product_id&quot;)\n   )\n   Student s;\n\n   // ...\n}\n\n@Entity\nclass Student {\n\n        \n   @OneToMany(mappedBy = &quot;s&quot;)\n   List&lt;Product&gt; products;\n}\n</code></pre>\n<p>P.S. Usually join table is used for modeling <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-many-to-many\" rel=\"nofollow noreferrer\">@ManyToMany</a> association. A common case of the <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-one-to-many-bidirectional\" rel=\"nofollow noreferrer\">bidirectional @OneToMany</a> association is required only one foreign key on  the owning side.</p>\n','2021-04-28 20:09:25',_binary '\0','2021-04-28 20:31:55',0,67305443),(67314775,'<p>The message error is telling what\'s wrong:</p>\n<pre><code>org.hibernate.QueryException:Named parameter not bound : date\n</code></pre>\n<p>The query has a parameter but the value of the parameter is not set.\nYou need to call <code>setParameter</code>:</p>\n<pre><code>Query query = em.createQuery(&quot;from Order ord where ord.orderDate=:date&quot;);\nquery = query.setParameter(&quot;date&quot;, date);\nList&lt;Order&gt; orders= query.getResultList();\n</code></pre>\n<p>The other error, as you\'ve already guessed, was a typo. You need to use the attribute name of the entity in JPQL queries, so it\'s <code>orderDate</code> (and not <code>orderdate</code>).</p>\n','2021-04-29 09:37:29',_binary '','2021-04-29 17:12:44',0,67311463),(67351544,'<p>Based on your mapping, a <code>FeatureRole</code> can be associated to a single <code>Features</code> (many-to-one). In your code, you are looping over several <code>Features</code> and rewriting the association every time you call\n<code>fr.setFeatures(fe);</code>.</p>\n<p>This means that only the last <code>Features</code> in the loop will have the correct association because <code>fr</code> is only associated to a single element.</p>\n<p>Assuming that a <code>Features</code> can have many <code>FeatureRole</code>, you need to decide which use case applies:</p>\n<p><strong>1. A <code>FeatureRole</code> can have many <code>Features</code></strong></p>\n<p>Then it\'s a <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-many-to-many-bidirectional\" rel=\"nofollow noreferrer\">bidirectional many-to-many association</a> and you have to rewrite your mapping to something similar to:</p>\n<pre><code>...\nclass FeatureRole {\n    ...\n    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n    private List&lt;Features&gt; features;\n    ...\n    public void addFeature(Features features) {\n     this.features.add( features );\n     features.getFeatureRoles().add( this );\n }\n</code></pre>\n<pre><code>...\nclass Features {\n    ...\n    @ManyToMany(mappedby=&quot;features&quot;)\n    private List&lt;FeatureRole&gt; featureRoles =new ArrayList&lt;&gt;()\n    ...\n}\n</code></pre>\n<p>and then the code in the loop becomes:</p>\n<pre><code>for (Features fe: t) {\n    fr.addFeatures(fe);\n}\n</code></pre>\n<p><strong>2. A single <code>FeatureRole</code> can only be associated to one <code>Features</code></strong></p>\n<p>Then something need to change in the logic of the loop.\nBut I need more details to help you in that case.</p>\n','2021-05-01 22:57:27',_binary '\0','2021-05-01 22:57:27',0,67334056),(67348364,'<p>There are a couple of things that don\'t seem right at first glance:</p>\n<p><strong>1. many-to-many association</strong></p>\n<p>You used a <code>@ManyToMany</code> on a single field:</p>\n<pre><code>@ManyToMany\nprivate Parlamentare parlamentare;\n</code></pre>\n<p>This is not correct because you cannot have many <code>Parlamentare</code> if the association doesn\'t use a <code>Collection</code>. You need to change it to:</p>\n<pre><code>@ManyToMany\nSet&lt;Parlamentare&gt; parlamentari;\n</code></pre>\n<p>or</p>\n<pre><code>@ManyToOne\nParlamentare parlamentare;\n</code></pre>\n<p>If it refers to a single parlamentare.</p>\n<p>Check the Hibernate ORM documentation for examples of <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-many-to-many\" rel=\"nofollow noreferrer\"><code>@ManyToMany</code> associations</a> and <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-many-to-one\" rel=\"nofollow noreferrer\"><code>@ManyToOne</code> associations</a>.</p>\n<p><strong>2. @IdClass</strong></p>\n<p>You can use <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-nonaggregated\" rel=\"nofollow noreferrer\"><code>@IdClass</code> to create composite identifiers</a>, but you have to create a class that maps the identifier:</p>\n<pre><code>@Entity\n@Table(name = &quot;parlamentari&quot;)\n@IdClass(ParlamentarePK.class)\npublic class Parlamentare implements Serializable{\n\n@Id\n@GeneratedValue(strategy= GenerationType.AUTO)\n@Column(name = &quot;nome&quot;)\n String nome;\n\n@Id\n@Column(name = &quot;partito&quot;)\n String partito;\n\n@Id\n@Column(name = &quot;circoscrizione&quot;)\nString circoscrizione;\n ...\n}\n\npublic class ParlamentarePK implements Serializable {\n\n    String nome;\n\n    String partito;\n\n    String circoscrizione;\n\n   ...// getters,setters and so on\n}\n</code></pre>\n<p><strong>3. EAGER associations</strong></p>\n<pre><code>@ManyToMany(mappedBy =&quot;parlamentare&quot;,fetch=FetchType.EAGER)\nprivate List&lt;Range2&lt;LocalDate&gt;&gt; periodo_carica = new ArrayList&lt;Range2&lt;LocalDate&gt;&gt;();\n</code></pre>\n<p>This might be correct, but it\'s usually discouraged to map associations as eager. It may lead to poor performance because the association will always be loaded even when you don\'t need it.</p>\n<p>You can eagerly fetch associations <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#fetching-strategies-dynamic-fetching\" rel=\"nofollow noreferrer\">via queries</a> or <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#fetching-strategies-dynamic-fetching-entity-graph\" rel=\"nofollow noreferrer\">via an entity graph</a> only when you need them instead.</p>\n<p>To make it lazy, you can change the mapping to:</p>\n<pre><code>@ManyToMany(mappedBy =&quot;parlamentare&quot;,fetch=FetchType.LAZY)\nprivate List&lt;Range2&lt;LocalDate&gt;&gt; periodo_carica = new ArrayList&lt;Range2&lt;LocalDate&gt;&gt;();\n</code></pre>\n<p><strong>4. Arrays as type</strong></p>\n<p>Example:</p>\n<pre><code>String[] commissioni;\n</code></pre>\n<p>Hibernate ORM will save this values as <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#collections-array-binary\" rel=\"nofollow noreferrer\">an array of binary bytes</a>.\nI\'m not sure if this is what you want.\n<a href=\"https://thorben-janssen.com/mapping-arrays-with-hibernate/\" rel=\"nofollow noreferrer\">This article about mapping arrays</a> explain all the options.</p>\n','2021-05-01 16:15:30',_binary '','2021-05-02 09:57:25',1,67345497),(67350048,'<p>Since no repository is planned anyway, it is possible to change the <code>CourseMembership</code> from an <code>@Entity</code> to an <code>@Embeddable</code> and the association in <code>Student</code> from <code>@OneToMany</code> to an <code>@ElementCollection</code>:</p>\n<pre><code>@Embeddable\n@Getter\n@Setter\npublic class CourseMembership {\n\n    @ManyToOne\n    @JoinColumn(name = &quot;course&quot;, nullable = false)\n    private Course course;\n\n}\n</code></pre>\n<pre><code>@Entity\n@Table(name = &quot;students&quot;)\n@Getter\n@Setter\n@EqualsAndHashCode(callSuper = true)\n@ToString(callSuper = true)\npublic class Student extends AbstractPersistable&lt;Long&gt; implements Serializable {\n\n    private static final long serialVersionUID = 2741464453152791261L;\n\n    @Column(name = &quot;name&quot;, nullable = false)\n    private String name;\n\n    @ElementCollection\n    @CollectionTable(name = &quot;course_memberships&quot;, joinColumns = { @JoinColumn(name = &quot;student&quot;) })\n    private List&lt;CourseMembership&gt; courseMemberships = new ArrayList&lt;&gt;();\n\n}\n</code></pre>\n<p>Given that, the PATCH operations of the question works as expected and I also think, looking to the model this would be the cleaner way (álá &quot;<code>CourseMembership</code> as <code>@Embeddable</code> more expresses that there is a composition and is useless without <code>Student</code>&quot;)</p>\n','2021-05-01 19:17:44',_binary '','2021-05-01 19:17:44',1,67349612),(67378941,'<p>You seem to have two assets (one is mAsset, other is among mDepot.trades... asset) that are equal (i.e. asset1.equals(asset2)) but they are different objects (i.e. asset1 != asset2). Persisting a trader turns on cascade persisting of included objects but indeed Hibernate concerns having two different objects with the same ID</p>\n','2021-05-04 04:46:21',_binary '\0','2021-05-04 04:46:21',1,67358311),(67399667,'<p>Looks like the constructor of <code>Tabcadastro</code> throws a <code>RuntimeException</code>. Did you recompile your code? Are you using some kind of Java Agent that transforms the constructor somehow?</p>\n','2021-05-05 10:37:46',_binary '\0','2021-05-05 10:37:46',0,67369090),(67572607,'<p>I ran into a similar issue recently, in a web app with relatively basic java code for entity persistence to a database, restful web services, and web UI code and supporting files such as images, for testing the restful services. The code was stable and functioned properly for several years, but after upgrading the environment and dev tools and rebuilding, I started getting an error during deployment to wildfly. The server produced the same stack trace - except originating from a different entity class - during deployment as described in this issue, on both wildfly 22 and 23, and a similar but not identical error on wildfly 11.</p>\n<p>Eventually I found that the built-in deploy function in Netbeans fails, but building a war file and deploying it by hand to wildfly 23 succeeds. Specifically, the deploy function in netbeans deploys the project as a folder, projectname.war, and it fails to deploy properly in wildfly. Building the same project sources into war file in netbeans, projectname.war, and then deploying that war file by hand, by simply dropping it in the standalone deployment folder, succeeds. Whether the problem reported in the original post is due a similar issue is difficult to determine.</p>\n<p>p.s. Here\'s the environment for my case:</p>\n<ul>\n<li>windows 10</li>\n<li>Apache Netbeans 12.3</li>\n<li>adoptopenjdk\'s jdk-11.0.10.9-hotspot</li>\n<li>wildfly (multiple versions tested)</li>\n<li>postgresql 13 database running on the same box</li>\n<li>postgresql jdbc driver 42.2.20</li>\n<li>minimal persistence.xml referencing a jndi data source configured in wildfly</li>\n</ul>\n','2021-05-17 15:23:50',_binary '','2021-05-17 17:07:37',0,67369090),(67385348,'<p>found the bug!\nin my value object the attribute was:</p>\n<p>public FlugZeit(String <strong>flugZeit</strong>)</p>\n<p>and in my main class the attribute was:</p>\n<p>@AttributeOverride(name = &quot;<strong>flugzeit</strong>&quot;</p>\n<p>These two must be exactly the same to work!</p>\n','2021-05-04 13:04:09',_binary '','2021-05-04 13:04:09',0,67384635),(67387528,'<p>try in json <code>&quot;seller&quot;:{&quot;id&quot;:15}</code> insted of <code>&quot;seller_id&quot;:15</code></p>\n','2021-05-04 15:16:53',_binary '\0','2021-05-04 15:16:53',2,67387173),(67387560,'<p>So , there are few corrections :\nWhen your payload contains existing seller\'s id :</p>\n<ol>\n<li>Send existing seller id with payload</li>\n</ol>\n<pre><code>{\n    &quot;code&quot; : 216,\n    &quot;name&quot; : &quot;addclientforseller5&quot;,\n    &quot;seller&quot; :\n        {\n            &quot;id&quot; : 5\n        }   \n}\n\n</code></pre>\n<ol start=\"2\">\n<li>Add this code in your service Implementation</li>\n</ol>\n<pre><code>\n    public Client createClients(Client client) {\n        Long sellerId = client.getSeller().getId();\n        Optional&lt;Seller&gt; existingSeller = sellerRepository.findById(sellerId);\n        if (existingSeller.isPresent()) {\n            Seller savedSellerObject = existingSeller.get();\n            client.setSeller(savedSellerObject);\n        } else {\n            // throw exception\n        }\n\n        return clientSellerRepository.save(client); // you can return ResponseEntity also\n    }\n</code></pre>\n<p>When your payload contains Seller object to create new Seller do this :</p>\n<ol>\n<li>payload should look like this</li>\n</ol>\n<pre><code>{\n    &quot;code&quot; : 112,\n    &quot;name&quot; : &quot;Pure&quot;,\n    &quot;seller&quot; :{\n        &quot;code&quot; : 1111,\n        &quot;name&quot; : &quot;Guava&quot;\n    }\n}\n</code></pre>\n<ol start=\"2\">\n<li>add this code in your service Implementation</li>\n</ol>\n<pre><code>    @Autowired\n    ClientRepository clientRepository;\n\n    @Autowired\n    SellerRepository sellerRepository;\n\npublic Client createClients(Client client) {\n        Seller seller = new Seller();\n        seller.setCode(client.getSeller().getCode());\n        seller.setName(client.getSeller().getName());\n        Seller savedSeller = sellerRepository.save(seller);\n        client.setSeller(savedSeller);\n        return clientRepository.save(client);\n    }\n</code></pre>\n<ol start=\"3\">\n<li>remove @JsonIngnore from seller field in Client class.</li>\n</ol>\n<pre><code>    @ManyToOne(fetch = FetchType.LAZY, optional = false)\n    @JoinColumn(name = &quot;seller_id&quot;, referencedColumnName = &quot;id&quot;)\n    @OnDelete(action = OnDeleteAction.CASCADE)\n    //@JsonIgnore\n    private Seller seller;\n</code></pre>\n','2021-05-04 15:18:42',_binary '\0','2021-05-04 18:13:27',1,67387173),(67389786,'<p>I\'ve simulated your code &amp; have the below observations to make it work.</p>\n<ul>\n<li>Remove @JsonIgnore Annotation from the Client Model</li>\n<li>Jpa works based on the object references &amp; not the values alone. So you might have to modify the Client service code.</li>\n</ul>\n<pre><code> try {\n           Optional&lt;Seller&gt; seller = sellerRepository.findById(client.getSeller().getId());\n           if(seller.isPresent()){\n               client.setSeller(seller.get());\n               client = this.repository.save(client);\n           }\n            return new ResponseEntity(client, HttpStatus.OK);\n        } catch (Exception e) {\n            return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);\n        }\n</code></pre>\n<p>In the above code, we use the seller id from our request client model &amp; get the seller object from db. Then we set the reference to the client model.</p>\n<ul>\n<li>Pass the Json input for createClient as shown</li>\n</ul>\n<pre><code>{\n    &quot;id&quot;: 1,\n    &quot;code&quot;: 2,\n    &quot;name&quot;: &quot;Client_1&quot;,\n    &quot;seller&quot;: {\n        &quot;id&quot;: 1\n    }\n}\n</code></pre>\n<p>Note: You\'ll have to create a valid seller first before creating the client by passing the seller id.</p>\n','2021-05-04 17:53:07',_binary '\0','2021-05-04 17:58:21',1,67387173),(67390021,'<p>I had to add the constructor into the <code>OrganizationCyclePlageKey</code> class to init the foreign keys values as well a default constructor via <code>@NoArgsConstructor</code> annotation:</p>\n<pre class=\"lang-java prettyprint-override\"><code>    public OrganizationCyclePlageKey(Long organizationId, Long cyclePlagesId) {\n        this.organizationId = organizationId;\n        this.cyclePlagesId = cyclePlagesId;\n    }\n</code></pre>\n<p>and init the <code>OrganizationCyclePlageKey</code> instance in the <code>OrganizationCyclePlage</code> class:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class OrganizationCyclePlage {\n    private OrganizationCyclePlageKey id = new OrganizationCyclePlageKey();\n...\n}\n</code></pre>\n','2021-05-04 18:11:08',_binary '','2021-05-04 18:11:08',0,67388956),(67390167,'<p>if the GroupRole is assigned to the owning entity then you can use <code>Collections</code> not <code>Map</code></p>\n','2021-05-04 18:22:55',_binary '\0','2021-05-04 18:22:55',0,67390072),(67406808,'<p>Oracle does not have a separator between the table name and alias in the from clause, so I guess you are either using a wrong/unsupported native query or the configured Hibernate dialect is wrong.</p>\n','2021-05-05 18:24:26',_binary '\0','2021-05-05 18:24:26',0,67399502),(67426058,'<p>JDBC type 100 is an Oracle-specific type, and it is <a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/jajdb/constant-values.html#oracle_jdbc_OracleTypes_BINARY_FLOAT\" rel=\"nofollow noreferrer\"><code>BINARY_FLOAT</code></a>.</p>\n','2021-05-06 21:16:31',_binary '','2021-05-06 21:16:31',0,67425168),(67501095,'<p>The exception says it already. You are sharing entities and collections between two Hibernate sessions which is not supported. You will have to close the first session before being able to update the entity/collection with the second session. Another way to handle this is to detach the entity/collection from the first session.</p>\n<p>Sessions are cheap, so usually they should only span for a transaction. I don\'t know your setup, but I guess you are sharing a session for the whole request. In one service you then create another session and try to save data with the session of the service that was previously loaded by the session that spans the whole request.</p>\n','2021-05-12 09:42:12',_binary '\0','2021-05-12 09:42:12',0,67432940),(67458575,'<p>I finally figured this problem out.  It wasn\'t so much the application.properties file, but I am going to share what I have now.  I know it may seem like over-kill on some of this, and some properties are redundant.  But, now that I have my DAO layer working, I can tweak the properties to get just what I need.</p>\n<p>application.properties</p>\n<pre><code>spring.datasource.url=jdbc:mysql://localhost:3306/phonebook?serverTimezone=UTC\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.username=username\nspring.datasource.password=password\nspring.jpa.database=mysql\nspring.jpa.show-sql=true\nspring.jpa.hibernate.ddl-auto=none\nspring.jpa.hibernate.naming.physical-strategy=\n    org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\nspring.data.jpa.repositories.enabled=true\nspring.jpa.database-platform=rg.hibernate.dialect.MySQL8Dialect\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\nspring.jpa.properties.hibernate.dialect.storage_engine=innodb\nspring.jpa.properties.hibernate.format_sql=true\n</code></pre>\n<p>The real fix came from fixing the Configuration class that I had.  You can see what I used to have above.  I shortened it to the following, and THIS is what made it work.</p>\n<pre><code>@Configuration\n@PropertySource(value = &quot;classpath:application.properties&quot;)\n@EnableAutoConfiguration\npublic class RepositoryContextConfiguration  {\n}\n</code></pre>\n<p>The original way I had this file, I was trying to set a whole bunch of different things.  There was obviously something not being set in this Configuration class, and I didn\'t know what that was.   Using the @EnableAutoConfiguration took care of whatever wasn\'t being done, and NOW it works.</p>\n<p>I\'ve have been using Spring Boot since the first iterations of Spring Boot 2.x.   At that time, I was still using Junit 4 for testing, and XML application-context files for configuration.   As the months and years went by, I\'ve always updated this app to the latest versions of Spring Boot and Hibernate.   Whenever I updated Spring Boot, the code had to change with it, it was never a simple change.</p>\n<p>Anyway, I hope this issue helps someone else out.\nAnyway, I hope this helps someone else out.</p>\n','2021-05-09 14:02:04',_binary '','2021-05-09 14:02:04',0,67440400),(67449756,'<ul>\n<li>The problem you got must have related to how you use those 2 entities so you need to provide more information about how you use it.</li>\n<li>You might want to look out for your problem in this tutorial: <a href=\"https://www.baeldung.com/hibernate-initialize-proxy-exception\" rel=\"nofollow noreferrer\">https://www.baeldung.com/hibernate-initialize-proxy-exception</a></li>\n</ul>\n','2021-05-08 16:24:12',_binary '\0','2021-05-08 16:24:12',0,67449606),(67453986,'<p>Do not use Lombok\'s @Data annotation on @Entity classes.</p>\n<p>Reason: @Data generates hashcode(), equals() and toString() methods that use the generated getters. Using the getter means of course fetching new data even if the property was marked with FetchType=LAZY.</p>\n<p>Somewhere along the way hibernate tries to log the data with toString() and it crashes</p>\n<p>EDIT\nyou can exclude the relation from the toString method by adding, for example in my case:\n@ToString(exclude = {&quot;students&quot;})</p>\n','2021-05-09 03:14:26',_binary '','2021-05-12 02:52:13',0,67449606),(67450228,'<p>I do not think that usage of <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#events-jpa-callbacks\" rel=\"nofollow noreferrer\">JPA Callbacks</a> is a proper approach for your problem (See also <a href=\"https://dzone.com/articles/are-jpa-callback-methods\" rel=\"nofollow noreferrer\">this article</a>). I would suggest you to use <a href=\"https://javaee.github.io/javaee-spec/javadocs/javax/persistence/MapsId.html\" rel=\"nofollow noreferrer\">@MapsId</a> annotation. You can correct the mapping in the following way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Post {\n\n   @Id\n   @GeneratedValue\n   private Long id;\n\n   @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = &quot;post&quot;)\n   private List&lt;Comment&gt; comments;\n}\n\n@Entity\npublic class Comment {\n\n  @EmbeddedId\n  CommentPK id;\n  \n\n  @MapsId(&quot;post&quot;)\n  @ManyToOne\n  private Post post;\n\n  // \n}\n\n@Embeddable\nclass CommentPK implements Serializable {\n   private Long post;\n   private Long id;\n   \n   // getters, setters, equals, hashCode\n}\n</code></pre>\n<p>The <code>CommentPK.post</code> value will be derived from the <code>Comment.post</code> association.</p>\n','2021-05-08 17:15:18',_binary '\0','2021-05-08 17:48:40',0,67449827),(67459364,'<p>You get the exception because you do not provide an ID value in your insert statement. And  ID can not be null. You annotated your id field in your entity with generator annotations, but they only work, if you save an entity through JPA. JPA is not involved when you execute a native sql in your script. <em>So, you have to provide an ID in your insert statement in data.sql.</em></p>\n<p>This is the important part of your stacktrace, and the cause of the startup failure:</p>\n<pre><code>Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: NULL not allowed for column &quot;ROLE_ID&quot;; SQL statement:\ninsert into roles(name) values(\'ROLE_ADMIN\')\n</code></pre>\n','2021-05-09 15:22:45',_binary '\0','2021-05-09 15:22:45',0,67459156),(67460190,'<p>You can manually add UUID by using java.util.UUID.randomUUID()\nOR\nif you are using hibernate 5, below code should work</p>\n<pre><code>@Id \n@GeneratedValue\nprivate java.util.UUID id;\n</code></pre>\n<p>id column should have type BINARY(16) in MySQL or it\'s equivalent in other SQL implementations.</p>\n','2021-05-09 16:46:19',_binary '\0','2021-05-09 16:46:19',2,67459156),(67496350,'<p>Since your indicates you\'re using ORACLE, I have to ask if you plan to use a database-side sequence (I would recommend it). Assuming you\'ve created it, you should wire it in using something like <code>@SequenceGenerator(name=&quot;my_entity_seq_gen&quot;, sequenceName=&quot;MY_ENTITY_SEQ&quot;)</code>.</p>\n<p>It would go with the same ID field you have your @GeneratedValue annotation placed on.</p>\n<p>Here is another SO question that discusses it and shows the syntax: <a href=\"https://stackoverflow.com/questions/3068692/hibernate-sequence-on-oracle-generatedvaluestrategy-generationtype-auto\">Hibernate sequence on oracle, @GeneratedValue(strategy = GenerationType.AUTO)</a></p>\n<p>With that your ORM should be able to defer to Oracle to generate a proper sequence for the ID to be saved upon initial persistence of the object (i.e. when you would be INSERTING it for the first time).</p>\n<p>I think you can get away with NOT using an Oracle sequence, but I\'m not 100% sure. (When I used oracle, I always did).</p>\n<p>Another good thread on the topic: <a href=\"https://stackoverflow.com/questions/20603638/what-is-the-use-of-annotations-id-and-generatedvaluestrategy-generationtype\">what is the use of annotations @Id and @GeneratedValue(strategy = GenerationType.IDENTITY)? Why the generationtype is identity?</a></p>\n<p>Be sure to follow the &quot;Oracle&quot; tracks when reading these threads.</p>\n','2021-05-12 01:46:17',_binary '\0','2021-05-12 01:46:17',0,67496019),(67497542,'<p>Since you have <code> @GeneratedValue(strategy = GenerationType.IDENTITY)</code> as the strategy the table in database must have identity generator. As explained in JPA docs below -</p>\n<blockquote>\n<p>IDENTITY public static final GenerationType IDENTITY Indicates that\nthe persistence provider must assign primary keys for the entity using\na database identity column.</p>\n</blockquote>\n<p>For example in Oracle 12c you can define identity column as</p>\n<pre><code>create table test (\n    test_col1 NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),\n    test_col2 VARCHAR2(10)\n    );\n</code></pre>\n','2021-05-12 04:56:16',_binary '\0','2021-05-12 04:56:16',0,67496019),(67558591,'<p>try the following query</p>\n<pre><code>@Override\n@Query(&quot;select x from MessageBZCEntity x join x.messageEntity as me join fetch me.applicationParamter as ap &quot; +\n        &quot;where me.comments like ?1 or ap.parameterName like ?1 or x.zipCode like ?1 or x.userUpdated like ?1&quot;)\nPage&lt;MessageBZCEntity&gt; searchByText(String searchText, Pageable pageable);\n</code></pre>\n','2021-05-16 15:40:09',_binary '\0','2021-05-16 15:40:09',0,67518426),(67524732,'<p>During spring bean initialization make your your entity class is being initialize. If its not added in componant scan then it will not considerd as bean class and Hibernate will through the error.</p>\n','2021-05-13 18:58:16',_binary '\0','2021-05-13 18:58:16',0,67524476),(67524931,'<p>The issue was that in the Hibernate config class, setPackagesToScan() was referencing the incorrect package. Thank you Alex.</p>\n','2021-05-13 19:13:50',_binary '\0','2021-05-13 19:13:50',0,67524476),(67532796,'<p>Delete method expects the ID(primary key) as input</p>\n<p>you can use the following code</p>\n<pre><code>paisRepo.findById(pais_id).orElseThrow(()-&gt;new YourCustomeException(Message)));\n</code></pre>\n<p>If the above statement doesn\'t fail... you go ahead and delete the object</p>\n<pre><code>paisRepo.deleteById(pais_id);\n</code></pre>\n','2021-05-14 10:26:53',_binary '\0','2021-05-14 15:25:13',0,67532342),(67546820,'<p><code>One To Many</code> attribute value type <strong>should not be <code>Embeddable</code></strong>.</p>\n<p>If you want to use embeddable type you can do the <strong><code>@ElementCollection</code></strong>:</p>\n<blockquote>\n<p><strong>@ElementCollection</strong> is mainly for mapping non-entities (embeddable or\nbasic) while <strong>@OneToMany</strong> is used to map entities.</p>\n</blockquote>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = &quot;Attendance&quot;)\npublic class Attendance {\n\n    @Id\n    @Column(name = &quot;Id&quot;)\n    int id;\n\n    @ElementCollection\n    private List&lt;SessionsMissed&gt; days;\n\n    // getter / setter ..\n}\n</code></pre>\n<pre class=\"lang-java prettyprint-override\"><code>@Embeddable\npublic class SessionsMissed {\n\n    @Column(name = &quot;Date&quot;)\n    String date;\n\n    @Column(name = &quot;Session1&quot;)\n    String presentForOne;\n  \n    @Column(name = &quot;Session2&quot;)    \n    String presentForTwo;\n\n    // getter / setter ..\n}\n</code></pre>\n<p>You can take a look at the short and detailed explanations of the definitions. <a href=\"https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#annotations-jpa-elementcollection\" rel=\"nofollow noreferrer\">https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#annotations-jpa-elementcollection</a></p>\n','2021-05-15 12:39:07',_binary '\0','2021-07-29 11:53:16',0,67546589),(67553242,'<p>if you are trying to save or update <code>realstates</code> then make sure that you are properly setting the <code>resident</code> object to <code>realstate</code>. The error log shows that there is foreign key violation while saving <code>realstates</code> which happens when the realstate object does not have <code>resident</code> object at the time of saving it.</p>\n','2021-05-16 04:44:30',_binary '\0','2021-05-16 04:44:30',1,67552949),(67555131,'<p>According to your <code>RESIDENTS</code> table definition:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>CREATE TABLE RESIDENTS (\n  -- ...\n  FOREIGN KEY (address, block, internal_id) REFERENCES REAL_STATES (address, block, internal_id)\n);\n</code></pre>\n<p>the owner side of the <code>Resident - RealState</code> association should be defined in the <code>Resident</code> entity like below:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = &quot;residents&quot;)\npublic class Resident implements Serializable {\n   // ...\n\n   @ManyToOne\n   @JoinColumns({\n      @JoinColumn(name=&quot;address&quot;, referencedColumnName = &quot;address&quot;),\n      @JoinColumn(name=&quot;block&quot;, referencedColumnName = &quot;block&quot;),\n      @JoinColumn(name=&quot;internal_id&quot;, referencedColumnName = &quot;internal_id&quot;)\n   })\n   private RealState realState;\n}\n</code></pre>\n<p>and then <code>mappedBy</code> side in the <code>RealState</code> entity.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name = &quot;real_states&quot;)\npublic class RealState implements Serializable {\n   // ...\n   @OneToMany(mappedBy = &quot;realState&quot;, fetch= FetchType.EAGER, cascade = CascadeType.ALL)\n   private List&lt;Resident&gt; resident;\n}\n</code></pre>\n','2021-05-16 09:44:09',_binary '','2021-05-16 09:50:15',1,67552949),(67559264,'<p>Trying to replicate your setup <a href=\"https://github.com/fladdimir/so-jpa/tree/mapped-superclass/src/main/java/org/demo/mappedSuperclass\" rel=\"nofollow noreferrer\">as follows</a>, I did not discover any problems while running <a href=\"https://github.com/fladdimir/so-jpa/blob/mapped-superclass/src/test/java/org/demo/mappedSuperclass/MappedSuperclassTest.java\" rel=\"nofollow noreferrer\">this integration-test</a>).</p>\n<p>So yes it is possible and your setup seems correct so far, so there must be a different problem somewhere?</p>\n','2021-05-16 16:46:29',_binary '','2021-05-16 16:46:29',1,67557542),(67568684,'<p>First a disclaimer: It\'s been a while since I\'ve worked with JPA directly so take the answer below with a grain of salt.</p>\n<p>Your model currently defines that <code>Pais</code> and <code>Moneda</code> have a <a href=\"https://www.uml-diagrams.org/composition.html\" rel=\"nofollow noreferrer\">composition</a> relationship, i.e. if you remove the <code>Pais</code> instance the related <code>Moneda</code> will be removed as well.</p>\n<p>This is expressed in 2 ways in the one-to-one annotation on <code>Pais.moneda</code>:</p>\n<ul>\n<li><code>orphanRemoval = true</code> defines that if you remove <code>Moneda</code> from the <code>Pais</code> (by setting <code>moneda</code> to <code>null</code>) the <code>Moneda</code> instance gets &quot;orphaned&quot; and thus removed</li>\n<li><code>cascade = CascadeType.ALL</code> states that all operations should be cascaded to the related <code>Moneda</code> instance which includes deletes.</li>\n</ul>\n<p>So when you delete the <code>Pais</code> the delete will be cascaded to the <code>Moneda</code> while first removing the relation would cause the orphan removal to hit here.</p>\n<p>Your <code>@JoinColumn</code> on <code>Monda.pais</code> contains <code>nullable = true</code> so it seems you want <code>Moneda</code> to actually have an <a href=\"https://www.uml-diagrams.org/aggregation.html\" rel=\"nofollow noreferrer\">aggregation</a> relationship with <code>Pais</code>, i.e. it could exist with <code>pais</code> being <code>null</code> as well.</p>\n<p>Thus you\'d need to change <code>Pais.moneda</code> to the following:</p>\n<pre><code>//remove orphanRemoval as the default is false anyway\n//define the array of cascade types you want - without CascadeType.REMOVE\n@OneToOne(mappedBy = &quot;pais&quot;, cascade = {CascadeType.PERSIST, CascadeType.MERGE, ...})\n@JsonIgnore\nprivate Moneda moneda;\n</code></pre>\n<p>Additionally your model states that the relation between <code>Pais</code> and <code>Moneda</code> is actually maintained by <code>Moneda</code> (indicated by the <code>mappedBy = &quot;pais&quot;</code> attribute of the annotation) so if you just set <code>Pais.moneda</code> to <code>null</code> won\'t have any effect with the changes above. You\'d now have to set <code>Moneda.pais</code> to <code>null</code> before removing the <code>Pais</code> instance, so you might try to change your <code>getEliminaPais()</code> or, if this method isn\'t transactional`, provide a custom repository method.</p>\n<p>Basically you\'d need to do <code>p.moneda.pais = null</code> before deleting <code>p</code>.</p>\n<p>Finally, you might to rethink your design: supposing you want to keep the 1:1 relation between countries (pais) and currency (moneda) it might make sense to make <code>Pais</code> own the relation. After all, a currency could exist without a country (e.g. Bitcoin) but a country would have some form of currency and countries might even share a currency (e.g. the European countries share the Euro). Thus you might actually want this to be a 1:n relation, i.e. <code>ManyToOne</code> in <code>Pais</code> and <code>OneToMany</code> in <code>Moneda</code>.</p>\n','2021-05-17 11:21:20',_binary '','2021-05-17 11:21:20',0,67567791),(67582056,'<p>In your <code>Toy</code> class you are using <code>@EqualsAndHashCode</code> which will be resolved in an <code>hashCode()</code> implementation calculating the hashCode based on all properties of that class.</p>\n<p>That means that the hashCode method in your <code>Toy</code> class invokes the <code>hasCode</code> method on <code>Cat</code>. In cat there is a <code>Set</code> of <code>CatFoods</code> which is mapped by <code>Cat</code> which means that to calculate the <code>hashCode</code> of <code>catFoods</code> the <code>Cat</code> property is involved. To calculate the hashCode of Cat it begins again calculating the <code>hashCode</code> of the <code>Set</code> of <code>CatFoods</code></p>\n<p><em>(Sounds confusing but currently I am unable to describe it better)</em></p>\n<p>As there is no session active the Lazy collection can not be fetched which is required to calculate the hashCod. Thats why you get this exception.</p>\n<p>Takeaway: explicitly exclude <code>LAZY</code> fetched properties from <code>@EqualsAndHashCode</code> calculation. You can annotate these properties using <code>@EqualsAndHashCode.Exclude</code> to exclude them from the hashCode calculation.</p>\n<p>To see implementation of the hashCode calculation you can use the DeLombok functionality of IntelliJ.</p>\n','2021-05-18 07:52:14',_binary '','2021-05-18 08:00:12',0,67581052),(67582632,'<p>Replace this:</p>\n<pre><code> @Query(&quot;SELECT id, name, author, reviewer FROM Book&quot;)\nList&lt;Book&gt; testQuery();\n</code></pre>\n<p>with below (Use aliases)</p>\n<pre><code>@Query(&quot;SELECT id, name, b.author, b.reviewer FROM Book b&quot;)\nList&lt;Book&gt; testQuery();\n</code></pre>\n','2021-05-18 08:32:02',_binary '','2021-05-18 08:32:02',0,67582049),(67602353,'<p>I am editing my answer please  check example</p>\n<pre><code>@EntityScan(basePackages = {&quot;com.botscrew&quot;, \n&quot;com.botscrew.demoadminpanel.entity.jpa&quot;,&quot;com.botscrew.admin.entity.services.configs.*&quot;})\n</code></pre>\n','2021-05-19 11:28:53',_binary '\0','2021-05-20 17:16:22',0,67602224),(67610009,'<p>before invoking blogRepository.deleteById you should delete also ParentChildComment whose comments are in the Blog\'s collection of comments.</p>\n','2021-05-19 19:54:09',_binary '','2021-05-19 19:54:09',0,67608760),(67625025,'<ul>\n<li>You can add fetch = FetchType.LAZY to your @ManyToMany or @OneToMany annotation like this: @ManyToMany(fetch = FetchType.LAZY). More instruction is at <a href=\"https://www.baeldung.com/hibernate-lazy-eager-loading\" rel=\"nofollow noreferrer\">https://www.baeldung.com/hibernate-lazy-eager-loading</a></li>\n</ul>\n','2021-05-20 17:10:26',_binary '\0','2021-05-20 17:10:26',0,67624223),(67633213,'<p>Please check example</p>\n<pre><code> @Query(&quot;SELECT c FROM category c &quot; +\n            &quot;LEFT JOIN category_parent cp ON c.id = cp.id_category &quot; +\n            &quot;WHERE c.show_on_trending = 1&quot;,\n)\n</code></pre>\n','2021-05-21 08:21:39',_binary '\0','2021-05-21 17:41:10',0,67627616),(67643713,'<p>In addition to <strong>FINAL EDIT</strong></p>\n<p>It\'s not an issue, but documented behaviour. The root cause is in the inheritance strategy - using <code>JOINED</code> makes <code>Hibernate</code> generate extra sql code to provide ability distinguish among polymorphic classes. And it would be similarly like this:</p>\n<pre><code>select \n  entity0_.Id as Id27_,   \n  [category fields]\n  case \n    when entity0_1_.EntityId is not null then 1     \n    when entity0_.Id is not null then 0 \n  end as clazz_ \nfrom \n  category entity0_ \n  left outer join category_parent entity0_1_ on entity0_.Id=entity0_1_.EntityId \n</code></pre>\n<p>So anyway it has some sence from the point of view of <code>Hibernate</code> despite the obvious ugliness. Briefly you can just leave it like you showed above or add this <code>case</code> part into the native query. <a href=\"https://www.methodicmadness.com/2009/01/nhibernate-what-is-heck-clazz.html\" rel=\"nofollow noreferrer\">Here is</a> a nice research article about the issue</p>\n','2021-05-21 20:51:52',_binary '\0','2021-05-21 20:51:52',0,67627616),(67649410,'<p>It seems that LazyLoading was a red herring on this question. The issue is with how the dialogs are invoked. The jsf snippet includes line selection on the dataTable, but the dialogs are invoked by buttons. The two can be out of sync. Instead, set the current row selection when the dialog is invoked, as follows:</p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;p:dataTable id=&quot;usertbl&quot; var=&quot;user&quot; value=&quot;#{userBean.userModel}&quot; lazy=&quot;true&quot; \n             paginator=&quot;true&quot; rows=&quot;#{userBean.userModel.pageSize}&quot;\n             paginatorPosition=&quot;bottom&quot; emptyMessage=&quot;no data&quot; &gt;\n    .\n    .\n    &lt;p:column style=&quot;width:4%&quot;&gt;\n        &lt;p:commandButton update=&quot;:userform:editUserPopup&quot; \n                         oncomplete=&quot;PF(\'editUserPopupWgt\').show()&quot; \n                         icon=&quot;ui-icon-search&quot; title=&quot;View&quot;&gt;\n            &lt;f:setPropertyActionListener value=&quot;#{user}&quot; \n                                         target=&quot;#{userBean.selectedUser}&quot;/&gt;\n        &lt;/p:commandButton&gt;\n    &lt;/p:column&gt;\n</code></pre>\n<p>The exact reason why this issue resulted in a Hibernate &quot;no Session&quot; error remains a mystery.</p>\n','2021-05-22 12:23:20',_binary '','2021-05-22 16:53:52',0,67633613),(67645996,'<p>Use <code>CascadeType.PERSIST</code> , Parent entity :</p>\n<pre><code>@OneToMany(fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, orphanRemoval = true)\n@JoinColumn(name = &quot;parent_id&quot;)\nprivate Set&lt;Child&gt; children;\n</code></pre>\n<p>And Child entity :</p>\n<pre><code>@ManyToOne(fetch = FetchType.LAZY)\nprivate Parent parent;\n</code></pre>\n<p>It\'ll insert children after parent is inserted with just one <em>jpa</em> query -&gt;</p>\n<pre><code>repository.save(parent);\n</code></pre>\n','2021-05-22 04:01:02',_binary '\0','2021-05-22 04:01:02',0,67643829),(67651452,'<p>Please correct me if I got something wrong, but there could be multiple <code>TableB</code> entities having the same &quot;ID1&quot; value, so a toOne-relation is not suitable here, right?</p>\n<p>I guess a simple way to retrieve a list of all &quot;related&quot; <code>TableB</code> entities would be to query separately for a specific &quot;ID1&quot;, e.g. via <code>tableBRpository.findByIdId1(tableA.id.id1)</code></p>\n','2021-05-22 15:48:47',_binary '\0','2021-05-22 15:48:47',0,67647092),(67699962,'<p>I think you went wrong in Mapping Parent\'s PK to Child\'s FK in One To Many Relationship.</p>\n<p><strong>Your parent class (AutomationEntity) must be like this: (Delete @JoinColumn from parent class and put it in child class where FK is defined.)</strong></p>\n<pre><code>@OneToMany(mappedBy=&quot;automationEntity&quot;,targetEntity=PolicyType.class,fetch=FetchType.LAZY, cascade = CascadeType.ALL)\nprivate Set&lt;AutomationPhaseEntity&gt; resources;\n</code></pre>\n<p><strong>Your child class (AutomationPhaseEntity ) must be like this:</strong></p>\n<pre><code>@Column(name=&quot;automation_entity_id&quot;)\nprivate int automationEntityId; // FK that references to automationEntity PK\n\n@ManyToOne(fetch = FetchType.EAGER )\n@JoinColumn(name = &quot;automation_entity_id&quot;, insertable=false, updatable=false);\nprivate AutomationEntity automationEntity;\n</code></pre>\n<p>It will work but anyway if you want to get PK from parent and inject it to child FK with sql queries, you can use sql procedures but in this case the procedure should run via CallableStatement of jdbc connection but I think you don\'t need it because you use hibernate. you shoud just correct your entities as mentioned above.</p>\n','2021-05-26 06:56:52',_binary '\0','2021-05-26 07:02:51',1,67675170),(67687725,'<p>I\'m assuming that an <code>Account</code> can be the sender/receiver in multiple transactions:</p>\n<ol>\n<li><p>Sender and Receiver are actually a <code>@ManyToOne</code>:</p>\n<pre><code>public class Transaction {\n @Id\n @GeneratedValue(strategy= GenerationType.AUTO)\n private Integer id;\n\n @ManyToOne(fetch=FetchType.LAZY, optional = false)\n private Account sender;\n\n @ManyToOne(fetch=FetchType.LAZY, optional = false)\n private Account recipient;\n\n private BigDecimal amount;\n\n public Transaction(Account sender, Account recipient, BigDecimal amount {\n     this.sender = sender;\n     this.recipient = recipient;\n     this.amount = amount;\n }\n}\n</code></pre>\n<p>That\'s because a single <code>Account</code> can be the sender for many transactions, but a single <code>Transaction</code> can only have a sender. The same for the receiver.\nI\'m also assuming that all the transactions must have a sender and receiver.</p>\n</li>\n<li><p><code>@OneToMany</code> to two different colums.</p>\n<p>You are creating a one-to-many in <code>Account</code>, but which column do you expect to map the association on the <code>Transaction</code>? Because there are two possible columns containing an account, Hibernate ORM doesn\'t know which one to use and throws an exception.</p>\n</li>\n</ol>\n<p>Removing the association from <code>Account</code> should solve your issue:</p>\n<pre><code>public class Account {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Integer id;\n\n    private BigDecimal balance;\n\n    public Account(final BigDecimal balance) {\n        this.balance = balance;\n    }\n}\n</code></pre>\n<p>When you need all the transactions for a specific account you can run the following JPQL query. For example, using the EntityManager:</p>\n<pre><code>entityManager\n    .createQuery(&quot;FROM Transaction t WHERE t.sender=:account OR t.recipient=:account&quot;)\n    .setParameter(&quot;account&quot;, account )\n    .getResultList();\n</code></pre>\n','2021-05-25 12:17:00',_binary '','2021-05-25 12:17:00',1,67680500),(67705793,'<p>I assume you really map <code>User#email</code> to a column named <code>email_address</code>?  That is the column that the database is complaining about but you do not show a mapping to that column.</p>\n<p>Assuming that is true, you have defined that this attribute should be non-null which also seems to be how the database is defined.  This would suggest that you are trying to save a User and did not set its email property.</p>\n<p>Or maybe you really have not mapped that column and so Hibernate never tries to write to it.  Hard to tell from just what you have given us.</p>\n','2021-05-26 13:20:43',_binary '','2021-05-26 13:20:43',0,67705577),(67712804,'<p>Hibernate needs to know where to look for entity classes.</p>\n<p>You\'re doing <code>em.setPackagesToScan(&quot;com.cbc.coorporateblinddateservice.entities.dates&quot;)</code>\nBut <code>MeetingsSetting</code> is in the <code>com.cbc.coorporateblinddateservice.entities.meetinsSetting</code> package, so you need to scan that package too.</p>\n','2021-05-26 21:13:48',_binary '\0','2021-05-26 21:23:18',1,67712064),(67713524,'<p>You probably want:</p>\n<pre><code>String hql = &quot;from Movie m join m.users u where u.id = &quot;+ String.valueOf(id);\n</code></pre>\n','2021-05-26 22:34:12',_binary '','2021-05-26 22:34:12',0,67713484),(67771068,'<p>There is a way to pass complex parameters with Hibernate but I don\'t think Spring integrates with that Hibernate API in any way.</p>\n<p>If you want to model a complex data type like this you usually have to implement the <code>SQLData</code> interface and also provide a custom user type like I described here: <a href=\"https://stackoverflow.com/questions/66025382/map-oracles-type-with-hibernate/66043935\">Map oracle&#39;s type with hibernate</a></p>\n','2021-05-31 09:21:11',_binary '\0','2021-05-31 09:21:11',0,67718391),(67771298,'<p>Please also show the queries that are generated. I guess that your data might be messed up i.e. you have a <code>AMap</code> that refers to a <code>BFilter</code> rather than an <code>AFilter</code>. Maybe you need to force the use of discriminators by annotating <code>@DiscriminatorOptions(force = true)</code> on <code>Filter</code>.</p>\n<p>UPDATE:</p>\n<p>The key point is that the fields have distinct names in the subtypes. Hibernate supports implicit downcasts i.e. it would be possible to use <code>select m.filter from Map m</code> and that would resolve to the downcasted association. Since there are multiple possible downcasts that have that property, there is a conflict. I actually implemented support for this part in Hibernate, but I guess that the discriminator is simply missing in that special case.</p>\n','2021-05-31 09:36:22',_binary '','2021-06-04 10:26:55',0,67743689),(67884812,'<p>Instead of:</p>\n<pre><code>properties.setProperty(&quot;hibernate.ddl-auto&quot;, &quot;create&quot;);\n</code></pre>\n<p>Use:</p>\n<pre><code>properties.setProperty(&quot;hibernate.hbm2ddl.auto&quot;, &quot;update&quot;);\n</code></pre>\n','2021-06-08 09:17:16',_binary '','2021-06-08 09:17:16',0,67751000),(67752484,'<p>As it\'s noted <a href=\"https://stackoverflow.com/questions/1413190/hibernate-mapping-package\">here</a>:</p>\n<blockquote>\n<p>The <code>&lt;mapping package=&quot;...&quot;/&gt;</code> entry is for configuring meta-data defined on the package itself, not for classes in that package.</p>\n</blockquote>\n<p>So, you should use some solutions proposed in the mentioned question or expliсitly provide a list of all entities in the <code>hibernate.cfg.xml</code>:</p>\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;mapping class=&quot;com.mycompany.mavenproject1.entity.Book&quot;/&gt;\n&lt;!--  other entities  --&gt;\n</code></pre>\n','2021-05-29 14:26:25',_binary '\0','2021-05-29 14:26:25',0,67752316),(67769951,'<p>found a hint since Hibernate 5.x there have been changes implemented.</p>\n<p>with this code the tutorial is working fine.</p>\n<pre><code>StandardServiceRegistry standardRegistry = new StandardServiceRegistryBuilder()\n                .configure()\n                .build();\n\n        Metadata metadata = new MetadataSources(standardRegistry)\n                .getMetadataBuilder()\n                .build();\n\n        return metadata.getSessionFactoryBuilder().build();\n</code></pre>\n','2021-05-31 08:03:47',_binary '\0','2021-05-31 08:03:47',0,67752316),(67754628,'<p>If you wanted to select custom colums, you would create a custom dto and load data into it. You cant load custom data into managed entities, but you can use jpql to select into your custom dto.</p>\n<pre><code>package my.class.package;\n\nclass Chars{\n    private String name;\n    private IDONTKNOW image;  \n    [other fields, constructors, getters,setters ...]\n}\n</code></pre>\n<p>Then you can query into it:</p>\n<pre><code>@Query(&quot;SELECT new my.class.package.Chars(c.name,c.image) FROM characters c&quot;)\nPage&lt;Chars&gt; getCharacters(Pageable pageable);\n</code></pre>\n<p>You can also use this kind of queries to load fields from different tables (entities) by joining those.</p>\n<p>For example (one of my old, but maybe it will help you):</p>\n<pre><code>   public class ProgrammerNameAndCity {\n       private String name;\n       private String city;\n   }\n    \n    @Entity\n    @Table(name = &quot;programmer&quot;)\n    public class Programmer extends BaseEntity {\n    \n        @Basic\n        private String name;\n    \n        @Column(name = &quot;id_number&quot;, nullable = false, unique = true)\n        private String idNumber;\n    \n        //hibernate specific\n        @Type(type = &quot;yes_no&quot;)\n        private Boolean senior;\n    \n        @Basic\n        private Integer salary;\n    \n        @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n        @JoinColumn(name = &quot;address_id&quot;)\n        private Address address;\n    \n    }\n    \n    @Entity\n    @Table\n    public class Address extends BaseEntity {\n    \n        @Basic\n        private Integer zip;\n    \n        @Basic\n        private String city;\n    \n        @Basic\n        private String street;\n    \n        @Column(name = &quot;house_number&quot;)\n        private Integer houseNumber;\n    \n        @OneToOne(mappedBy = &quot;address&quot;)\n        private Programmer programmer;\n    \n    }\n    \n   @Query(&quot;select new mypackage.ProgrammerNameAndCity(p.name,p.address.city) from Programmer p where  p.idNumber=?1&quot;)\n   ProgrammerNameAndCity findNameAndCityByIdNumber(String idNumber);\n</code></pre>\n','2021-05-29 18:28:03',_binary '\0','2021-05-29 18:36:39',0,67754264),(67754880,'<p>Instead of returning Page you can change the return type to Page&lt;Object[]&gt; :</p>\n<pre><code>@Query(value = &quot;SELECT name, image FROM characters&quot;, countQuery = &quot;SELECT COUNT(name) FROM characters&quot;, nativeQuery = true)\nPage&lt;Object[]&gt; getCharacters(Pageable pageable);\n</code></pre>\n','2021-05-29 19:02:03',_binary '','2021-05-29 19:02:03',0,67754264),(67771520,'<p>I think this is a perfect use case for <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a>.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(CharacterEntity.class)\npublic interface CharacterImageDto {\n    @IdMapping\n    Long getId();\n    String getImage();\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>CharacterImageDto a = entityViewManager.find(entityManager, CharacterImageDto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n<pre><code>Page&lt;CharacterImageDto&gt; findAll(Pageable pageable);\n</code></pre>\n<p>The best part is, it will only fetch the state that is actually necessary! And Blaze-Persistence Entity-Views supports mapping collections as well e.g.</p>\n<pre><code>@EntityView(CharacterEntity.class)\npublic interface CharacterDto {\n    @IdMapping\n    Long getId();\n    String getImage();\n    Set&lt;MovieDto&gt; getMovies();\n\n    @EntityView(MovieDetailEntity.class)\n    interface MovieDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n}\n</code></pre>\n','2021-05-31 09:50:44',_binary '\0','2021-05-31 09:50:44',0,67754264),(67764368,'<p>Every bidirectional association must have one <em>owning side only</em> (the child side), the other one being referred to as the inverse (or the <code>mappedBy</code>) side. As <code>@ManyToMany</code> association is symmetric, the owning side can be either one.</p>\n<p>The <code>@JoinTable</code> annotation should be used on the owning side. So, you should correct your mapping in the following way:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class ManagerOVARecord extends OVARecord {\n\n   // ...\n\n   @ManyToMany\n   @JoinTable(name = &quot;vm_ova_sensors&quot;, \n             joinColumns = @JoinColumn(name = &quot;ova_id&quot;), \n             inverseJoinColumns = @JoinColumn(name = &quot;sensor_id&quot;)\n   )\n   private Set&lt;Sensor&gt; availableOnSensors = new HashSet&lt;&gt;();\n\n   // ...\n}\n\n@Entity\n@Table(name = &quot;ts_sensors&quot;)\npublic class Sensor implements Identifiable, Serializable {\n\n   // ...\n    \n   @ManyToMany(mappedBy = &quot;availableOnSensors&quot;)\n   private Set&lt;ManagerOVARecord&gt; availableOvas = new HashSet&lt;&gt;(); \n\n   // ...\n}\n</code></pre>\n<p>See also <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#associations-many-to-many-bidirectional\" rel=\"nofollow noreferrer\">this section</a> of the hibernate documentation.</p>\n','2021-05-30 18:07:13',_binary '','2021-05-30 18:07:13',1,67762372),(67771672,'<p>Try this way:</p>\n<pre><code>@Entity\n@Table(name = &quot;users&quot;)\npublic class User {\n    ...\n    @OneToOne\n    @JoinColumn(name = &quot;carId&quot;)\n    private Car car;\n    ...\n}\n\n@Entity\n@Table(name = &quot;cars&quot;)\npublic class Car {\n    ...\n    @OneToOne(mappedBy = &quot;car&quot;)\n    @JoinColumn(name = &quot;userId&quot;)\n    private User user;\n    ...\n}\n</code></pre>\n','2021-05-31 10:00:38',_binary '\0','2021-05-31 10:00:38',0,67767764),(67772649,'<p>So i missed adding <code>@valid</code> to the property.\nWe should add a @valid to a cascading property.</p>\n<pre><code>private FplUserInfo fplUserInfo;\n</code></pre>\n<p>in FplUser.java class.</p>\n<p>Earlier -</p>\n<pre><code>@OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REFRESH, CascadeType.REMOVE}, targetEntity = FplUserInfo.class, fetch = FetchType.LAZY, mappedBy = &quot;fplUser&quot;)\n    private FplUserInfo fplUserInfo;\n</code></pre>\n<p>Correction -</p>\n<pre><code> @Valid\n    @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REFRESH, CascadeType.REMOVE}, targetEntity = FplUserInfo.class, fetch = FetchType.LAZY, mappedBy = &quot;fplUser&quot;)\n        private FplUserInfo fplUserInfo;\n</code></pre>\n','2021-05-31 11:13:16',_binary '','2021-05-31 11:13:16',0,67772206),(67801030,'<h3>Regarding the error</h3>\n<p>I\'m assuming you have missing dependencies on your code generation class path. Once you update your question, I\'ll update my answer.</p>\n<h3>Regarding jOOQ code generation support for <code>@TypeDef</code> etc.</h3>\n<p>jOOQ won\'t support your generated composite types in generated code out of the box, you\'ll still have to add forced type configurations for that, possibly embeddable type configurations:</p>\n<ul>\n<li><a href=\"https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-forced-types/\" rel=\"nofollow noreferrer\">https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-forced-types/</a></li>\n<li><a href=\"https://www.jooq.org/doc/latest/manual/code-generation/codegen-embeddable-types/\" rel=\"nofollow noreferrer\">https://www.jooq.org/doc/latest/manual/code-generation/codegen-embeddable-types/</a></li>\n</ul>\n<p>Note that the <code>JPADatabase</code> offers a quick win by integrating with simple JPA defined schemas very quickly. It has its caveats. For best results, I recommend going DDL first (and generate both jOOQ code and JPA model from that), because it will be much easier to put your schema change management under version control, e.g. via Flyway or Liquibase.</p>\n','2021-06-02 07:53:47',_binary '','2021-06-02 07:53:47',1,67784647),(67789187,'<p>Your entities are missing the <code>@Entity</code> annotation:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Shoppingcart { \n    \n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int id;\n    private Customer customer;\n    @OneToMany(mappedBy=&quot;cartID&quot;)\n    private Set&lt;ShoppingcartItem&gt; cartItems = new HashSet&lt;&gt;();\n    //...\n}\n\n@Entity\npublic class Customer{\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    @OneToOne(mappedBy=&quot;CUSTID&quot;)\n    private long id;\n    @Column(name=&quot;CUSTOMERFIRSTNAME&quot;)\n    private String firstname;\n    @Column(name=&quot;CUSTOMERLASTNAME&quot;)\n    private String lastname;\n    //...\n}\n\n@Entity\npublic class Product {\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private long id;\n    private double price;\n    private String product;\n    //...\n}\n\n@Entity\npublic class ShoppingcartItem {\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private long itemId; \n    private Shoppingcart shoppingcart; \n    @ManyToOne\n    private Product product;\n    private int amount;    \n    //...\n}\n</code></pre>\n','2021-06-01 12:49:18',_binary '\0','2021-06-27 05:48:16',1,67789067),(67802813,'<p>Given the error message, could it be the case that the customer entity is not included in the scanned packages, specified e.g. within an <code>@EntityScan</code> annotation?</p>\n','2021-06-02 09:53:03',_binary '','2021-06-02 09:53:03',1,67802174),(67810331,'<p>Without additional configuration Spring AOP does not work on private methods, so change it to public</p>\n<pre><code>@Transactional\npublic void testowy(StudentRepository studentRepository){\n</code></pre>\n','2021-06-02 18:04:04',_binary '\0','2021-06-02 18:18:37',2,67810254),(67843041,'<p>You are under the misconception that <code>EAGER</code> loading means Hibernate will fetch all data with one statement, this is false. With <code>EAGER</code> as a strategy, the framework will just do every query required to fetch all data for every entity.</p>\n<p>Example: If one entity has 2 <code>EAGER</code> relationships, fetching one will result in 3 statements, one to load the entity, one for each of its relationships. If you have 3 entities, you will have 7 statements, the initial statement loading the 3 objects, plus 2 per object.</p>\n<p>When your treatment requires everything, there is no real performance impact at the moment. But most applications are not made of one treatment. This means every treatment in your application will load everything which is <code>EAGER</code>, even if not needed. This will effectively slow everything down. You also risk loading all your database in memory if everything is in <code>EAGER</code>.</p>\n<p>This is why <code>LAZY</code> is the recommended approach.</p>\n<p>As for your <code>LazyInitializationException</code>, it seems in your stack trace that you are using the <code>stream</code> API. It\'s a wild guess due to missing details, but JPA/Hibernate doesn\'t handle sharing a session between threads, so if you are using <code>parrallelStream</code> it could cause the problem.</p>\n','2021-06-04 19:33:52',_binary '\0','2021-06-04 19:33:52',0,67815811),(67919668,'<p>First of all, it\'s always better to use <code>FetchType.LAZY</code> instead of <code>FetchType.EAGER</code>. Why? Because you might not need all the data every time. If you want to return a list of <code>Person</code>s and display them somehow, somewhere, do you need to fetch all of their cards as well? If not, then <code>FetchType.LAZY</code> would be the better option, and you would then control how much data you need.</p>\n<p><code>LazyInitializationException</code> usually indicates that you didn\'t fetch all the data you need while your <code>Session</code> was opened. There are many ways to fetch associated data (<strong>none of which is keeping the <code>Session</code> opened while processing request</strong>):</p>\n<h4>1. using <a href=\"https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/queryhql.html\" rel=\"nofollow noreferrer\"><code>join fetch</code></a> in your JPQL/HQL</h4>\n<pre><code>@Query(&quot;select p from Person p join fetch p.cards where ...&quot;)\nList&lt;Person&gt; getCardsPerPerson(Timestamp param1, Timestamp param2);\n</code></pre>\n<h4>2. if you\'re using Spring Data, you could use <a href=\"https://docs.spring.io/spring-data/jpa/docs/2.1.0.M3/api/org/springframework/data/jpa/repository/EntityGraph.html\" rel=\"nofollow noreferrer\"><code>@EntityGraph</code></a> instead of <code>join fetch</code></h4>\n<pre><code>@EntityGraph(attributePaths = { &quot;cards&quot; })\nList&lt;Person&gt; getPersons();\n</code></pre>\n<p>That way, every time you call <code>getPersons</code>, it will fetch cards as well. Of course, you couldn\'t use this one if you have to write <code>@Query</code>.</p>\n<p>If you\'re using <a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation\" rel=\"nofollow noreferrer\">Spring Data\'s naming conventions</a> for some simple queries, then <code>@EntityGraph</code> would be an option for fetching associations.</p>\n<h4>3. using <a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/gjrij.html\" rel=\"nofollow noreferrer\">Criteria API</a></h4>\n<p>Again, if you\'re using Spring Data, this is just a fallback solution in case you end up with <a href=\"https://docs.jboss.org/hibernate/orm/5.2/javadocs/org/hibernate/loader/MultipleBagFetchException.html\" rel=\"nofollow noreferrer\"><code>MultipleBagFetchException</code></a>. I will not go into details for this one, but in case you encounter this exception, you\'ll find solution in <a href=\"https://stackoverflow.com/users/1025118/vlad-mihalcea\">Vlad Mihalcea</a>\'s blog post <a href=\"https://vladmihalcea.com/hibernate-multiplebagfetchexception/\" rel=\"nofollow noreferrer\">The best way to fix the Hibernate MultipleBagFetchException</a>.</p>\n','2021-06-10 10:50:14',_binary '','2021-06-10 10:50:14',1,67815811),(67869781,'<p>This happed to me also, so as the solution I added the mapping column as Entity variable. In your case if I say, your <code>Bid</code> entity is missing the <code>offer_id</code> column mapping, although it mentioned the relationship. Add below entry in your <code>Bid</code> table as below:</p>\n<pre><code>@Column(name = &quot;offer_id&quot;)\nprivate Long offerId;\n// generate setter-getter\n</code></pre>\n','2021-06-07 10:13:10',_binary '\0','2021-06-07 10:13:10',0,67869156),(67870041,'<p>add referencedColumn on the @JoinColumn annotation.</p>\n<pre><code>@JoinColumn(name = &quot;offerId&quot;, referencedColumn = &quot;id&quot;)\nprivate Offer offer;\n</code></pre>\n','2021-06-07 10:32:59',_binary '\0','2021-06-07 10:32:59',0,67869156),(67892398,'<p>You need to fetch the child first in your first case from database to get it into the Hibernate session storage and to be managed by hibernate.</p>\n<p><code>new Child()</code> =&gt; transient entity. Then you are setting excplicitly the ID of the new child. Hibernate assumes that its an managed entity (<em>because if it has an ID it has to be in my state</em>). But that is not the case in your code. Therefore persisting the entity results in the posted exception.Detached means that it is an entity which was persisted in the past and is not longer maintained / managed by hibernate. This happens because you are manually set the ID of that entity after creating a new instance. Instead of creating a new instance, fetch the child from the database and set it to the parent.</p>\n<ol>\n<li>Fetch the child entity first (now its managed by hibernate)</li>\n<li>Set the child to the parent entity</li>\n<li>Save the parent</li>\n<li>Be happy :D</li>\n</ol>\n','2021-06-08 18:05:36',_binary '\0','2021-06-08 18:05:36',0,67886754),(67970584,'<p>If you search for questions about <code>LazyInitializationException</code> you will find a ton of questions with answers that explain why you get that exception and how you can resolve this. In short, the entity manager to which the lazy collection proxy for <code>privilegesEntities</code> is connected is not available anymore. The easiest solution and in your case also probably the most appropriate one is to let the transaction (to which the EntityManager is bound) span over the whole method, by annotating the method with <code>@Transactional</code></p>\n','2021-06-14 12:52:18',_binary '\0','2021-06-21 07:47:23',0,67889943),(67892733,'<p>If you call <code>warehouse.setAddress(newAddress);</code> <strong>first</strong> you modify the managed entity (<em>managed entity because you have fetched the warehouse from the database =&gt; now managed by hibernate</em>). After that you are performing a query operation =&gt; Hibernate flushes your previous changes to the database to prevent dirty reads before performing the database query operation. In this case the properties of <code>newAddress</code> are not set which leads to the constraint violation exception. Same goes for the</p>\n<blockquote>\n<p>Hibernate seems to &quot;magically&quot; populate the id field in\nWarehouseAddress after calling\nnewAddress.setProvince(provinceService.findByCode(&quot;AR-C&quot;));,</p>\n</blockquote>\n<p>The <code>WarehouseAddress</code> gets persisted before performing the query operation and has therefore an id.</p>\n','2021-06-08 18:32:21',_binary '','2021-06-08 18:32:21',0,67892333),(67981655,'<p>Issue fixed with adding the following annotations to the RequestEventDto</p>\n<pre><code>@NoArgsConstructor\n@AllArgsConstructor\npublic class RequestEventDto {\n\n</code></pre>\n<p>It seems it is due to the constructor not there when serialization happening.</p>\n','2021-06-15 07:13:19',_binary '\0','2021-06-15 07:20:55',0,67946882),(67958381,'<p>QuestDB has Postgres compatibility on transport level so that if you run QuestDB SQL query you be able to get back the data. The query language is not 100% same and QuestDB misses a lot of schema table / views Postgres.</p>\n<p>Making any ORM work with QuestDB using Postgres driver is much more than binary protocol compatibility so it is expected to not work. In this case it\'s missing <code>information_schema.sequences</code> table / view. Even if this view added by QuestDB (as empty, sequences are not supported) there probably be more queries of the schema type and SQL syntax differences so it is quite challenging to make an ORM work via Postgres driver with QuestDB.</p>\n<p>So the choice is to switch off all ORM smart features like schema queries (if it\'s possible in Micronaut) or ask for the support of the ORM in github.</p>\n','2021-06-13 12:41:27',_binary '\0','2021-06-13 12:41:27',1,67952899),(67964845,'<p>You can simply initialize the variable and it sets that value as the default.\n@Column(nullable = false)\nprivate Boolean isProtected = false;</p>\n<p>Else, you can use columnDefinition property of the @Column annotation, for example:</p>\n<p>@Column(columnDefinition=“boolean default false&quot;)\nprivate Boolean isProtected;</p>\n','2021-06-14 04:34:26',_binary '\0','2021-06-14 04:34:26',0,67964703),(67970760,'<p>I realized where ı went wrong.As you can see aboce in main .I wrote</p>\n<pre><code>HibernateUtil.getSessionFactory().openSession();\n</code></pre>\n<p>like this inside</p>\n<pre><code>@Component\npublic class HibernateUtil {\n    private static SessionFactory sessionFactory ;\n    static {\n        Configuration configuration = new Configuration().configure(&quot;shoes.hbm.xml&quot;);\n        StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());\n        sessionFactory = configuration.buildSessionFactory(builder.build());\n    }\n    public static SessionFactory getSessionFactory() {\n        return sessionFactory;\n    }\n}\n</code></pre>\n<p>here -&gt;Configuration().configure(&quot;shoes.hbm.xml&quot;);\nI had not given the file path inside the configure before and so it could not see where the filter was defined.</p>\n','2021-06-14 13:04:51',_binary '\0','2021-06-14 13:04:51',0,67968015),(67969722,'<p>This is happening because there is no Transaction opened in DTO(object become detached). Wherever you have fetched the object from the DB call <code>contractFile.getContract()</code> so that the ORM framework loads the lazy-loaded object.</p>\n','2021-06-14 11:51:14',_binary '\0','2021-06-14 11:51:14',0,67969544),(67969725,'<p>As the linked question explains the error is most probably because you fetch the instance of <code>ContractEntity</code> in a separate transaction and while contract is not needed it is not populated because lazy.</p>\n<p>You can still force contract to be populated if not willing to use eager but you need to do it in a context of the transaction where entity is fetched.</p>\n<p>You might have a code that retrieves this entity and finally passes it to a DTO constructor:</p>\n<pre><code>ContractFile cf = repo.findById(...);\n// tx ends\n...\nDTO dto = new DTO(cf); // fails\n</code></pre>\n<p>Now, before tx ends ofr right after repo call invoke contract getter, like</p>\n<pre><code>ContractFile cf = repo.findById(...);\nContract contract = contractFile.getContract();\n// maybe do something else with it\n// tx ends\nDTO dto = new DTO(cf); // should now work    \n</code></pre>\n<p>However, first of all you might need to check the flow of your code because it might be able to be refactoer inside same transaction to avoid this kind of a hack.</p>\n','2021-06-14 11:51:29',_binary '','2021-06-14 11:51:29',1,67969544),(67983824,'<p>I don\'t know if this is the best solution at the moment, but I have simplified the constructors of each of my DAOs so that they take a session as a parameter:</p>\n<pre><code>@Repository\npublic class NationalityDAO {\n    private Session session;\n\n    public NationalityDAO(Session session) {\n        this.session = session;\n    }\n\n    public List&lt;Nationality&gt; findAll() {\n        return CastService.castList(Nationality.class,\n            this.session\n            .createCriteria(Nationality.class)\n            .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list());\n    }\n}\n</code></pre>\n<p>And then the magic happens in the corresponding service to retrieve de current session through JPA:</p>\n<pre><code>@Service\n@Transactional\npublic class NationalityService {\n    private NationalityDAO nationalityDAO;\n\n    @Autowired\n    public NationalityService(EntityManager entityManager) {\n        if (entityManager.unwrap(Session.class) == null) {\n            throw new NullPointerException();\n        }\n\n        this.nationalityDAO = new NationalityDAO(entityManager.unwrap(Session.class));\n    }\n}\n</code></pre>\n<p>Now its works.</p>\n','2021-06-15 09:42:20',_binary '\0','2021-06-15 09:42:20',0,67970207),(67975970,'<pre><code>@Column(name = &quot;movie_id&quot;)\nprivate Integer movieId;\n\n@ManyToOne\n@JoinColumn(name = &quot;movie_id&quot;, nullable = false)\nprivate Movie movie;\n</code></pre>\n<p>U have a column with the same as <strong>movie_id</strong> in Rating and also in Movie. Hence there is a conflict.</p>\n<p>Change either one of them.</p>\n','2021-06-14 19:11:49',_binary '\0','2021-06-14 19:11:49',0,67973696),(68004214,'<p>What was missing was the <code>targetEntity = Rating.class</code> param to <code>@OneToMany</code>. So the functional annotations within the different classes are as follows:</p>\n<p><strong>Movie</strong></p>\n<pre><code>@OneToMany(fetch = FetchType.LAZY, targetEntity = Rating.class, mappedBy = &quot;movie&quot;)\nprivate List&lt;Rating&gt; ratings\n</code></pre>\n<p><strong>Rater</strong></p>\n<pre><code>@OneToMany(fetch = FetchType.LAZY, targetEntity = Rating.class, mappedBy = &quot;rater&quot;)\nprivate List&lt;Rating&gt; ratings\n</code></pre>\n<p><strong>Rating</strong></p>\n<pre><code>@ManyToOne\n@JoinColumn(name = &quot;rater_id&quot;, nullable = false)\nprivate Rater rater;\n\n@ManyToOne\n@JoinColumn(name = &quot;movie_id&quot;, nullable = false)\nprivate Movie movie;\n</code></pre>\n<p>Thanks to all who took a look at this!</p>\n','2021-06-16 14:00:21',_binary '','2021-06-16 14:00:21',0,67973696),(67987015,'<p>You should have a setter like below:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public void setEntryId(RelationshipViewPersonPK entryId) {\n    this.entryId.setViewId(entryId.getViewId());\n    this.entryId.setPersonId(entryId.getPersonId());\n}\n</code></pre>\n<p>instead of (or in addition to) this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public void setEntryId(Long viewId, String personId) {\n    this.entryId.setViewId(viewId);\n    this.entryId.setPersonId(personId);\n}\n</code></pre>\n','2021-06-15 13:16:30',_binary '\0','2021-06-15 13:16:30',0,67983041),(68043284,'<p>Did you create sequence in the database as below?\nCREATE SEQUENCE id_seq\nINCREMENT BY 1\nSTART WITH 0\nMINVALUE 0\nMAXVALUE 100\nNOCYCLE\nNOCACHE;</p>\n<p>Or did you add below property in application properties file\nspring.jpa.hibernate.ddl-auto = update\nIt will create sequence in the database if not excit.</p>\n','2021-06-19 03:13:34',_binary '','2021-06-19 03:13:34',0,68042441),(68056305,'<p>I found the solution : by removing @Data and @EqualsAndHashCode of lombok, the collection is loaded. Hascode and equals of lombok probably includes association information</p>\n','2021-06-20 13:30:05',_binary '\0','2021-06-20 13:30:05',0,68055362),(68116007,'<p>calling <code>post.getComments().clear()</code>, saving the post, and <em>then</em> deleting the post is the process that works for me (please do let me know if there is a better way!).</p>\n<p>I believe that, when a @JoinTable is present the only way to tell Hibernate to first remove the join table entries and then remove the entities is to remove the elements from the list and save that operation.</p>\n<p>The parent child items can then be removed separately, either by Cascade or manually.</p>\n','2021-06-24 12:42:00',_binary '','2021-06-24 12:42:00',0,68107292),(68147518,'<p>When you are using @id on String then you have to specify the generation type otherwise it take default auto increment from database as int. That\'s why you got error.</p>\n<pre><code>@id\nprivate int id;\n</code></pre>\n<p>you will have do define your own custom generator for string attribute.</p>\n<pre><code>@Id\n@GeneratedValue(//add the generation type here)\nprivate Long id;\n</code></pre>\n','2021-06-27 02:33:55',_binary '\0','2021-06-27 02:33:55',0,68142383),(68146621,'<p>First u need to delete the entry of that user from UserRole table then only it will allow you to remove from the user table because of the reference</p>\n','2021-06-26 22:17:03',_binary '\0','2021-06-26 22:17:03',0,68145694),(69955676,'<p>First check if there is constraint , if so delete the related rows then you can delete.</p>\n','2021-11-13 15:27:09',_binary '\0','2021-11-13 15:27:09',-1,68145694),(68146708,'<p>There is no way to make it work with two Hibernate Session Factories.\nI also would not recommend trying to force Hibernate to create a single one for this case.</p>\n<p>Easies workaround I see is on the DB side.\nConsider creating a view of <code>person</code> table in your <code>user</code> schema and map your <code>Person</code> entity to the view, not to the table.</p>\n<p>This approach will not allow you to update the <code>person</code> table using your <code>userEntityManager</code> (unless you are using Oracle DB). If you need to do it at some point, you can use your <code>crmEntityManager</code> to find the corresponding <code>person</code> in the table and update it.</p>\n<p>Keep in mind, that transactionality may be harmed if you have to update both <code>person</code> and <code>user</code> as a part of a single operation due to the same reason you mentioned (different Session Factories).</p>\n','2021-06-26 22:32:28',_binary '','2021-06-26 22:32:28',1,68145876),(68212373,'<p>Add <code>em.flush();</code> to force Hibernate to actually flush pending operations to the database.</p>\n','2021-07-01 14:49:05',_binary '\0','2021-07-01 14:49:05',1,68181952),(68281138,'<p>I guess you are using the OSIV (open session in view) anti-pattern which is enabled by default in Spring? This is a common problem with that approach. The problem is that your first level cache (persistence context) contains the entity with an uninitialized proxy for the student field. Now, even if you select that entity again and join fetch the association, Hibernate will not replace the object because it has to retain object identity and also will not replace the proxy. To solve this, you will have to clear the persistence context before doing the query by using <code>EntityManager.clear()</code></p>\n','2021-07-07 06:34:59',_binary '\0','2021-07-07 06:34:59',0,68182822),(68224251,'<p>Whatever version of Spring/Hibernate you are using, it is not compatible with the Java version that you are using. Try updating Spring/Hibernate or use an older Java version.</p>\n','2021-07-02 11:16:43',_binary '\0','2021-07-02 11:16:43',0,68183528),(68419717,'<p>I´d guess it´s not connected to the Enum, it´s because of the way how Hibernate manages sessions and connections.</p>\n<p>In very simple words: by annotating a function as <code>@Transactional</code> a new session is opened, and you probably need a session for the actions you want to perform in the repository function.</p>\n<p>I´d bet that it´s also enough to just annotate the <code>Repository.findFrames</code> function as <code>@Transactional</code> and leave the rest as is.</p>\n','2021-07-17 10:37:58',_binary '\0','2021-07-17 10:37:58',0,68198743),(68282558,'<p>Make the associations bidirectional and map the to-one association in <code>VerortungDAO</code>, or if you don\'t want that, at least map the FK-columns. If you map it bidirectional, use <code>@OneToMany(mappedBy = &quot;...&quot;)</code>. Either way, you will have to initialize the two to-one associations or FK-columns on the <code>VerortungDAO</code> objects.</p>\n<p>PS: An entity isn\'t a DAO (data access object), so the naming <code>xxDAO</code> is quite confusing for an entity.</p>\n','2021-07-07 08:27:34',_binary '\0','2021-07-07 08:27:34',0,68222350),(68240528,'<p>i read your question and here is what i propose:</p>\n<p>To use Peagable with <code>@Query</code> annotation, you have to specify the countBy property to your Query.</p>\n<pre><code>@Query(\nvalue = &quot;select po from Post po INNER JOIN FETCH po.posttags pts INNER JOIN FETCH pts.tag t INNER JOIN FETCH pts.items i INNER JOIN FETCH i.subitems LEFT OUTER JOIN po.posttags pts2 where (t.tagName like :tName) and (pts.someDateField between :startDate and :endDate) order by pts2.someDateField desc&quot;, countQuery = &quot;select count(po) from Post po INNER JOIN po.posttags pts INNER JOIN pts.tag t INNER JOIN pts.items i INNER JOIN i.subitems LEFT OUTER JOIN po.posttags pts2 where (t.tagName like :tName) and (pts.someDateField between :startDate and :endDate) order by pts2.someDateField desc&quot;,\ncountBy = &quot;select count(po) from Post po INNER JOIN FETCH po.posttags pts INNER JOIN FETCH pts.tag t INNER JOIN FETCH pts.items i INNER JOIN FETCH i.subitems LEFT OUTER JOIN po.posttags pts2 where (t.tagName like :tName) and (pts.someDateField between :startDate and :endDate) order by pts2.someDateField desc&quot;, countQuery = &quot;select count(po) from Post po INNER JOIN po.posttags pts INNER JOIN pts.tag t INNER JOIN pts.items i INNER JOIN i.subitems LEFT OUTER JOIN po.posttags pts2 where (t.tagName like :tName) and (pts.someDateField between :startDate and :endDate)&quot;)\nPage&lt;Post&gt; findAllInOneQuery(String tName, String startDate, String endDate, Pageable pageable);\n</code></pre>\n','2021-07-03 23:02:45',_binary '\0','2021-07-03 23:02:45',0,68227456),(68281315,'<p>I thinking your code is a bad pattern, when you call\n<code>serviceJpa.saveRole(role);</code>\njpa first loading roll.userList and adding user into it, then saving it\'s relation.\ntherefore , <strong>jpa first load roll.userList</strong>, but you set roll.userList load as lazy so jpa can not load userList beacuse your session closed!!!\nplease read this <a href=\"https://thorben-janssen.com/lazyinitializationexception/\" rel=\"nofollow noreferrer\">tutorial</a></p>\n','2021-07-07 06:51:08',_binary '\0','2021-07-07 06:51:08',0,68250815),(68255121,'<p>In your user <a href=\"https://github.com/ajkr195/springbootrocks/blob/master/src/main/java/com/spring/boot/rocks/model/AppUser.java\" rel=\"nofollow noreferrer\">model</a> set lazy fetch as follows:</p>\n<pre><code>@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(name = &quot;app_user_role&quot;, joinColumns = @JoinColumn(name = &quot;userid&quot;), inverseJoinColumns = @JoinColumn(name = &quot;roleid&quot;))\n    private List&lt;Role&gt; roles;\n</code></pre>\n<p>To compensate lazy loading, initialize it somewhere in your <a href=\"https://github.com/ajkr195/springbootrocks/blob/master/src/main/java/com/spring/boot/rocks/controller/AppUserController.java\" rel=\"nofollow noreferrer\">controller</a> like below (just to give you hint):</p>\n<pre><code>@ModelAttribute(&quot;roles&quot;)\n    public List&lt;Role&gt; initializeRoles() {\n        return (List&lt;Role&gt;) roleJPARepository.findAll();\n    }\n</code></pre>\n<p>Then, somewhere in your code (say a <a href=\"https://github.com/ajkr195/springbootrocks/blob/master/src/main/java/com/spring/boot/rocks/service/AppUserServiceImpl.java\" rel=\"nofollow noreferrer\">Service</a>), set the role to the user like below:</p>\n<pre><code>entity.setRoles(user.getRoles());\n</code></pre>\n<p>For a full blown example where you set/edit the role to user through UI, is here in my GitHub Repo - <a href=\"https://github.com/ajkr195/springbootrocks\" rel=\"nofollow noreferrer\">https://github.com/ajkr195/springbootrocks</a></p>\n<p>This is pretty much close to what you are looking for.</p>\n','2021-07-05 11:10:20',_binary '\0','2021-07-05 11:16:22',0,68254776),(68372057,'<pre><code>  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @JoinTable(name = &quot;user_role&quot;,\n            joinColumns = {@JoinColumn(name = &quot;user_id&quot;)},\n            inverseJoinColumns = {@JoinColumn(name = &quot;role_id&quot;)}\n    )\nprivate List&lt;RoleUser&gt; roleUserList;\n</code></pre>\n<p>you can try this it may be helpful</p>\n','2021-07-14 04:28:01',_binary '\0','2021-07-14 04:28:01',0,68254776),(68271235,'<p>Entities are not Spring beans and therefor you cannot use dependency injection in entities.</p>\n<p>If you want to access a Spring bean from within an entity you can use a helper class like this:</p>\n<pre><code>@Service\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n    private static ApplicationContext context;\n\n    public static &lt;T&gt; T bean(Class&lt;T&gt; beanType) {\n        return context.getBean(beanType);\n    }\n\n    public static Object bean(String name) {\n        return context.getBean(name);\n    }\n\n    @Override\n    public void setApplicationContext(@SuppressWarnings(&quot;NullableProblems&quot;) ApplicationContext ac) {\n        context = ac;\n    }\n\n}\n</code></pre>\n<p>Then you can use <code>ApplicationContextProvider.getBean(Messages.class)</code> to get access to the Messages.</p>\n','2021-07-06 13:12:01',_binary '','2021-07-06 13:12:01',1,68270959),(68277639,'<p>First off, maybe call the ingredients <code>Ingredient</code>s and not <code>Product</code>s.</p>\n<p>Second, the problem probably lies in the code of method <code>parseFoodToProduct(foodList);</code> that we cannot see, in connection with the directive</p>\n<pre><code>@JsonManagedReference\n@ManyToMany(cascade ={ CascadeType.PERSIST, CascadeType.MERGE})\nprivate Set&lt;Product&gt; foodList = new HashSet&lt;&gt;();\n</code></pre>\n<p>If you create new <code>Product</code>s (<code>xxx = new Product(...)</code>) in <code>parseFoodToProduct(foodList);</code>, instead of loading them from the database, this surely will backfire.</p>\n<p>Leave out the <code>CascadeType</code>, and always create/retrieve/update/store the <code>Product</code>s on their own so they\'re completely independent of where they are used/referenced.</p>\n','2021-07-06 21:42:01',_binary '','2021-07-06 21:42:01',0,68277402),(68279656,'<p>There is constraints issue with your json or json not correctly binding or theme object have null value for name and description.</p>\n<p>Carefully check the error message they are null due to that you got <code>constraint violations</code></p>\n<pre><code>@NotBlank(message = &quot;A description must be given&quot;)\n@NotBlank(message = &quot;A name must be given&quot;)\n</code></pre>\n<p>nList of constraint violations:[\\n\\tConstraintViolationImpl{interpolatedMessage=\'A name must be given\'\n, messageTemplate=\'A name must be given\'}\\n\\tConstraintViolationImpl{interpolatedMessage=\'A description must be given\',</p>\n','2021-07-07 03:31:43',_binary '\0','2021-07-07 03:31:43',1,68278326),(68288786,'<p>I added the Jackson dependency to my pom.xml, and it appears everything is working fine.</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>EDIT on the next day, not only that but there was 2 other issues:</p>\n<ol>\n<li>the &quot;target&quot; folder becomes trashy and it\'s always good to delete before running spring boot again and retrying.</li>\n<li>including this line in application.properties &quot;logging.level.org.springframework.data.jpa=DEBUG&quot;\nI could see that the problem is that a NOT NULL field in the DB, demands a default value in the entity, if there is not, it will crash in a 500 error, instead a 400 bad request as it should do.</li>\n</ol>\n','2021-07-07 15:20:31',_binary '\0','2021-07-08 20:14:17',0,68278326),(68280951,'<blockquote>\n<p>To set OneToMany Relation ship between Order and OrderLineItem  need\nto pass Order Id in the refrencedcolumnName\nLike This\nOrder.kt</p>\n</blockquote>\n<pre><code>package com.main.serviceorder.entity\n\nimport javax.persistence.*\n\n@Entity\ndata class Order(\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    val oId:Long=-1,\n    val orderNumber:String?=&quot;&quot;,\n    @OneToMany(fetch = FetchType.LAZY, cascade = [CascadeType.ALL])\n    @JoinColumn(name = &quot;oli_id&quot;, referencedColumnName = &quot;oId&quot;)\n    val orderLineItem:MutableList&lt;OrderLineItem&gt;?=ArrayList(),\n)\n</code></pre>\n<blockquote>\n<p>OrderLineItem.kt</p>\n</blockquote>\n<pre><code>package com.main.serviceorder.entity\n\n\nimport javax.persistence.*\n\n@Entity\n@Table(name = &quot;order_line_items&quot;)\ndata class OrderLineItem(\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    val id:Long=-1,\n    val skuCode:String?=&quot;&quot;,\n    val price:Float=0.0f,\n    val quantity:Int=0,\n    val order:Order\n)\n</code></pre>\n','2021-07-07 06:18:10',_binary '\0','2021-07-07 06:18:10',0,68280137),(68296240,'<p><code>@ManyToMany</code> relations are fetched lazily by default, which means your currency objects hold proxies for the countries property which load the countries from the database when you access them, e.g. by iterating over the set. To do so, you need an active session. Try annotating the method which calls <code>findAll()</code> and accesses the countries property with <code>@Transactional</code>.</p>\n','2021-07-08 05:46:55',_binary '\0','2021-07-08 05:46:55',0,68292897),(68316074,'<p>The source of the error was the <strong>AuditReader</strong> it doesn\'t fetch all eager properties even if they are annotated as <strong>Fetch.EAGER</strong>\nIt looks like the <strong>AuditReader</strong> only fetches <strong>one level</strong> of eager relations:</p>\n<p>Article -&gt; SurchargeGroup -&gt;  SurchargeGroup -&gt; ...\n(fetched)  (fetched)          (not fetched)</p>\n','2021-07-09 11:34:26',_binary '\0','2021-07-09 11:34:26',0,68309871),(68323079,'<p>Hibernate needs to stop eagerly fetching associations at some point, otherwise it would need to join an infinite number of times the <code>SurchargeGroup</code> entity (since it references itself).</p>\n<p>The depth these fetches can be controlled application wide using the <code>hibernate.max_fetch_depth</code> property.</p>\n','2021-07-09 22:00:49',_binary '','2021-07-09 22:00:49',1,68309871),(68324385,'<pre><code>org.hibernate.AnnotationException: No identifier specified for entity: springmvc.miniproject.entity.Review\n</code></pre>\n<p>Looks like you are missing <code>@Id</code> annotation on <code>Review</code> entity</p>\n','2021-07-10 03:10:11',_binary '','2021-07-10 03:10:11',1,68324358),(68333462,'<p>You have cascade type correctly In your code should work. Try add below things on both side.</p>\n<pre><code>cascade = [(CascadeType.REMOVE)]\n</code></pre>\n','2021-07-11 05:31:44',_binary '\0','2021-07-11 05:37:15',0,68331589),(68338168,'<p>You should define mapping only on one side (the one that holds the relation), eg. like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name=&quot;storages&quot;)\nclass Storage {\n\n    @OneToMany(mappedBy = &quot;storage&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private Set&lt;Item&gt; items;\n\n    void putItemToStorage() {\n        Item item = new Item();\n        item.setStorage(this);\n        items.add(item);\n    }\n\n}\n\n@Entity\n@Table(name=&quot;items&quot;)\nclass Item {\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;storage_id&quot;, referencedColumnName = &quot;id&quot;)\n    private Storage storage;\n\n    public void setStorage(Storage storage) {\n        this.storage = storage;\n    }\n}\n</code></pre>\n<p>Notice that this approach will most likely result in 2 queries:</p>\n<ol>\n<li>That will create <code>Item</code> record in DB with <code>storage_id = null</code></li>\n<li>That will update recods and set <code>storage_id</code> to value that it should be</li>\n</ol>\n<p>To prevent it adjust annotations on field <code>storage</code>:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name=&quot;items&quot;)\nclass Item {\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = &quot;storage_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false, updatable = false)\n    private Storage storage;\n\n}\n</code></pre>\n<p>You might also consider adding <code>orphanRemoval = true</code> to <code>items</code> in case you will want to delete record in DB.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@Table(name=&quot;storages&quot;)\nclass Storage {\n\n    @OneToMany(mappedBy = &quot;storage&quot;, cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)\n    private Set&lt;Item&gt; items;\n\n}\n</code></pre>\n<p>Your code then should looks like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>// assumming within transaction context\nvar storage = // get from eg. EntityManager or JPA repository (in spring)\nstorage.putItemToStorage();\n// There is no need to call EntityManager::persist or EntityManager::merge\n// if you are withing transaction context \n// and you are working with managed entity\n// and have cascade = CascadeType.ALL\n</code></pre>\n','2021-07-11 16:40:07',_binary '','2021-07-11 17:19:15',1,68336554),(68362748,'<p>Answer - Switch off the csrf via the WebSecurityConfig class.\nCode snippet:</p>\n<pre><code>@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception{\n        http.cors().and().csrf().disable();\n    }\n\n    @Bean\n    CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(Collections.singletonList(&quot;*&quot;));\n        configuration.setAllowedMethods(Collections.singletonList(&quot;*&quot;));\n        configuration.setAllowedHeaders(Collections.singletonList(&quot;*&quot;));\n        configuration.setAllowCredentials(true);\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(&quot;/**&quot;, configuration);\n        return source;\n    }\n}\n</code></pre>\n<p>That should fix the problem</p>\n','2021-07-13 12:50:29',_binary '','2021-07-13 12:50:29',0,68346618),(68354472,'<p>In my case, the error was because my entity has a null field, then I changed the fields</p>\n<pre><code>import com.fasterxml.jackson.annotation.JsonFormat;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.apache.log4j.Logger;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\nimport java.io.Serializable;\nimport java.util.Date;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@Table(name = &quot;test&quot;)\npublic class Test implements Serializable {\n\n    final static Logger logger = Logger.getLogger(StateDriverEntity.class);\n    private static final long serialVersionUID = -2463354084291480284L;\n\n    @Id\n    private Integer id;\n\n    @Column(nullable = false , name = &quot;a&quot;)\n    private String  a;\n\n    @Column(nullable = false , name = &quot;b&quot;)\n    private Date b;\n\n    @Column(nullable = false , name = &quot;c&quot;)\n    private Integer  c;\n\n    @Column(nullable = false , name = &quot;d&quot;)\n    private Date  d;\n\n}\n</code></pre>\n<p>The field c has this name</p>\n<pre><code>stateActive\n</code></pre>\n<p>The error was generated because when the JPA generates the mapping, it converts in camel case</p>\n<pre><code>state_active\n</code></pre>\n<p>The columns does not have data, as consequence the nullable generates an error.</p>\n<p><strong>The solution was</strong></p>\n<p>Changed the column\'s name from <code>stateActive</code> to <code>state_active</code></p>\n<p><strong>Note</strong>: it was not necessary to change the <code>spring.datasource.url</code></p>\n<pre><code>spring.datasource.url=jdbc:mysql://a:a@local/c?reconnect=true\n</code></pre>\n','2021-07-12 22:26:57',_binary '\0','2021-07-21 15:32:53',0,68353660),(68391866,'<p>This is my solution that works !</p>\n<pre><code>@Formula(&quot;SELECT AVG(cr.rating) FROM course_ratings cr WHERE cr.course_id = course_id&quot;)\n</code></pre>\n<p>I\'ve changed <code>courseId</code> to <code>course_id</code> because it\'s a raw SQL, not JPQL</p>\n','2021-07-15 10:10:44',_binary '','2021-07-15 10:10:44',0,68383630),(68403814,'<p>Found a solution\nI found running the test as follows works:</p>\n<pre><code>@Test\nvoid test() {\n    Person dave = new Person(null, &quot;Dave&quot;);\n    persons.save(dave);\n    \n    Car car = new Car(dave.getId(), dave, &quot;HAS_WHEELS&quot;);\n    dave.setCar(car); //car is set into the parent entity\n    persons.save(dave); //person is saved instead of the car\n    \n    \n    dave = persons.findById(dave.getId()).get(); \n    assertEquals(true,  dave.getCar() != null );\n    \n    cars.delete(car);\n    \n    dave = persons.findById(dave.getId()).orElseGet(()-&gt;null); //skip?\n    assertEquals(true,  dave!=null );\n}\n</code></pre>\n<p>Edit:\ncar is not deleted here as expected</p>\n<p>Edit:\nchanging @OneToOne to use <code>MERGE</code> instead of <code>ALL</code> seems to work</p>\n<pre><code>    @OneToOne(cascade = CascadeType.MERGE, mappedBy = &quot;person&quot;, optional = true)\n    @PrimaryKeyJoinColumn\n    private Car car;\n</code></pre>\n<p>This is the test I used after the change:</p>\n<pre><code>@Test\n    void test2() {\n        Person dave = new Person(null, &quot;Dave&quot;);\n        persons.save(dave);\n        \n        Car car = new Car(dave.getId(), dave, &quot;HAS_WHEELS&quot;);\n        \n        dave.setCar(car);\n        persons.save(dave);\n        \n        dave = persons.findById(dave.getId()).get(); \n        assertEquals(true,  dave.getCar() != null , &quot;Dave does not have car assigned&quot;);\n        \n        cars.delete(car);\n        \n        \n        dave = persons.findById(dave.getId()).orElseGet(()-&gt;null);\n        assertEquals(true,  dave!=null, &quot;Dave deleted&quot; );\n        \n        assertEquals( false ,  cars.existsById(car.getId()), &quot;Car not deleted&quot; );\n    }\n</code></pre>\n<p>If someone has a nicer solution I\'d still be interested. but this will work for now.</p>\n','2021-07-16 05:22:50',_binary '\0','2021-07-17 02:26:12',0,68402949),(68408093,'<p>Your generated hibernate column names are in snake_case where you\'ve mapped them in your entity class differently.</p>\n<p>Change the column names in <code>@Column</code> in your entity class as snake_case and it should solve the problem</p>\n<hr />\n<p>Problem solved by including @JsonIgnore</p>\n','2021-07-16 11:16:01',_binary '','2021-07-26 09:40:14',0,68407856),(68410635,'<p><code>user</code> is a keyword in SQL. Make it anything else other than user.</p>\n<p>For eg \'users\'</p>\n<p>But if you want to create with same name then use Below.</p>\n<pre><code>@Table(name=&quot;\\&quot;user\\&quot;&quot;)\n</code></pre>\n','2021-07-16 14:19:56',_binary '','2021-07-16 14:19:56',0,68410080),(68422998,'<p>The error is pretty clear: you have a query returnin more than 1 result and your code is defined as expecting a single result.</p>\n<p>Aren\'t you missing a <code>WHERE</code> on the <code>id</code> on the following query?</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Query(&quot;SELECT cat FROM Category cat JOIN FETCH cat.courses&quot;)\nOptional&lt;Category&gt; findById(Integer id);\n</code></pre>\n','2021-07-17 17:51:37',_binary '','2021-07-17 17:51:37',1,68422952),(68431708,'<p><code>MakeCompositeKey</code> should be annotated with <code>@Embeddable</code></p>\n<p>Look at this: <a href=\"https://stackoverflow.com/questions/3585034/how-to-map-a-composite-key-with-jpa-and-hibernate\">How to map a composite key with JPA and Hibernate?</a></p>\n','2021-07-18 17:50:10',_binary '\0','2021-07-18 17:50:10',0,68431551),(68431728,'<p>You have a typo here which probably breaks everything up.</p>\n<pre><code>public class Averages {\n  @Id\n  @Column(name = &quot;code_name&quot;)\n  private String CodeName;  // &lt;----this should be codeName instead of CodeName\n  \n  //...class implementation\n}\n</code></pre>\n','2021-07-18 17:53:05',_binary '','2021-07-19 07:25:10',1,68431551),(68530200,'<p>The default JPA optimistic locking mechanism only works when a managed object is flushed but was changed in the meantime. What you want has to be coded manually. Just add the logic to your <code>saveEntity</code> method:</p>\n<pre><code>@Transactional\npublic Entity saveEntity(BOEntity boEntity){\n Entity e = entityRepository.findById(boEntity.getId());\n if (boEntity.getVersion() != e.getVersion()) {\n  throw new OptimisticLockException();\n }\n entityMapper.updateEntity(boEntity, e);\n entityRepository.save(e);\n}\n</code></pre>\n','2021-07-26 12:51:23',_binary '\0','2021-07-26 12:51:23',0,68451600),(68469158,'<p>In class <code>DocumentDbe</code> you have mark relation as Lazy. In default relation <code>@ManyToOne</code> and <code>@OneToOne</code> is as EAGER, so if you don\'t want Lazy, you have to change</p>\n<pre><code>@OneToOne(cascade = CascadeType.PERSIST)\n</code></pre>\n<p>If you want have @lob also as eager:</p>\n<pre><code>@Lob\n@Basic( fetch = FetchType.EAGER )\n</code></pre>\n','2021-07-21 12:03:31',_binary '\0','2021-07-21 12:03:31',0,68466521),(68485816,'<p>You need to add <code>id</code> to your query since id field is required for <code>AtmCashPickup</code> entity:</p>\n<pre><code>@Repository\npublic interface CashPickupRepository extends CrudRepository&lt;AtmCashPickup, Integer&gt; {\n\n    @Query(\n            value = &quot;select id, atm_identifier atm, min(expected_pickup) start_date, max(actual_pickup) end_date\\n&quot; +\n                    &quot;from (select atm_cash_pickup.*,\\n&quot; +\n                    &quot;             count(actual_pickup) over (partition by atm_identifier order by expected_pickup desc) as grp\\n&quot; +\n                    &quot;      from atm_cash_pickup\\n&quot; +\n                    &quot;     ) atm_cash_pickup\\n&quot; +\n                    &quot;group by atm_identifier, grp;&quot;,\n            nativeQuery = true)\n    List&lt;AtmCashPickup&gt; findAtmCashPickupNonNullRanges();\n\n}\n</code></pre>\n','2021-07-22 13:36:03',_binary '','2021-07-22 13:36:03',0,68484463),(68487641,'<p>Entity or embeddable, in any case the record class wouldn\'t be suitable here because entities and their fields, including embeddable ones, are modifiable. The only exception would be for Id fields, but that doesn\'t seem like an important enough case to make this functionality for.</p>\n<p>One of the Hibernate developers explains this <a href=\"https://vladmihalcea.com/java-records-jpa-hibernate/\" rel=\"nofollow noreferrer\">here</a></p>\n','2021-07-22 15:33:17',_binary '\0','2021-07-22 15:33:17',0,68486938),(68528668,'<p>Java <code>records</code> <strong>with a single field</strong> can be used for custom ID types or any other value object with <code>AttributeConverter</code>s.</p>\n<p>In the entity class the ID type is used with <code>@Id</code> as usual:</p>\n<pre><code>@Entity\npublic class DemoEntity {\n\n    @Id\n    private Id id = new Id(UUID.randomUUID());\n\n    public static record Id(UUID value) implements Serializable {}\n}\n</code></pre>\n<p>Note that the <code>record Id</code> doesn\'t have any annotation.</p>\n<p>The converter makes it possible to use records:</p>\n<pre><code>@Converter(autoApply = true)\npublic class DemoEntityIdConverter implements AttributeConverter&lt;DemoEntity.Id, String&gt; {\n  \n    @Override\n    public String convertToDatabaseColumn(DemoEntity.Id id) {\n        return id.value().toString();\n    }\n\n    @Override\n    public DemoEntity.Id convertToEntityAttribute(String s) {\n        return new DemoEntity.Id(UUID.fromString(s));\n    }\n}\n</code></pre>\n<p>Don\'t forget to set <code>autoApply = true</code> to have this converter applied automatically (without referencing it explicitly on the respective field).</p>\n<p>Records with more than one field could be mapped with a Hibernate UserType, but that is a bit cumbersome.</p>\n','2021-07-26 11:00:14',_binary '','2021-08-02 14:56:04',0,68486938),(68508292,'<ol>\n<li>Please note that <a href=\"https://docs.jboss.org/hibernate/orm/5.2/javadocs/org/hibernate/annotations/Index.html\" rel=\"nofollow noreferrer\">@org.hibernate.annotations.Index</a> annotation was <a href=\"https://docs.jboss.org/hibernate/orm/5.2/javadocs/deprecated-list.html\" rel=\"nofollow noreferrer\">deprecated</a> even in hibernate 5.2. So, I would suggest you to correct your mapping in the following way:</li>\n</ol>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@SequenceGenerator(name = &quot;keyid_generator&quot;, sequenceName = &quot;history_entry_sequence&quot;)\n@javax.persistence.Table(\n    name = &quot;history_entry&quot;, \n    indexes = {\n        @javax.persistence.Index(...)\n        ... \n    }\n)\npublic class HistoryEntry {\n    // ...\n}\n</code></pre>\n<p>and it should work without additional custom <a href=\"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#PhysicalNamingStrategy\" rel=\"nofollow noreferrer\">PhysicalNamingStrategy</a> definition/registration.</p>\n<ol start=\"2\">\n<li>\n<blockquote>\n<p>What I don\'t understand here: if the name attribute to be provided here is actually the Entity class\' name (here: <code>HistoryEntry</code>), how is Hibernate supposed to figure out the actual table\'s name (which is <code>history_entry</code> - with an underscore between the two words)?</p>\n</blockquote>\n</li>\n</ol>\n<p>You should understand that hibernate use two phases process for resolving table/column names by appropriate entity/entity\'s field names. At the first phase hibernate checks: does an entity class have an <code>@javax.persistence.Table</code> annotation with an explicit name <em>and if no, the implicit-naming strategy implementation is asked what the table name should be.</em> The default strategy is <code>ImplicitNamingStrategyJpaCompliantImpl</code>. Then, at the second phase, hibernate applies transformation defined in the <code>PhysicalNamingStrategy</code> to all entity/column names (<em>explicitly or implicitly named</em>). It can be useful to override this strategy for example in the following case. Suppose that all table names in your application should follow the pattern <code>APP_&lt;table name&gt;</code>. One solution is to manually specify an <code>@Table</code> annotation on all entity classes. This approach is time-consuming and easily forgotten. Instead, you can implement Hibernate’s <code>PhysicalNamingStrategy</code> interface or override an existing implementation, like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>public class YourAppNamingStrategy extends org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl {\n\n   @Override\n   public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment context) {\n      return new Identifier(&quot;APP_&quot; + name.getText(), name.isQuoted());\n   }\n}\n</code></pre>\n<p>and then define your naming-strategy implementation in <code>persistence.xml</code>:</p>\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;property name=&quot;hibernate.physical_naming_strategy&quot;\nvalue=&quot;org.your.app.YourAppNamingStrategy&quot;/&gt;\n</code></pre>\n<p>It\'s difficult to say for sure, but it looks like somewhere in this chain the algorithm was changed between hibernate 3.6.10 and 5.3.8 or at least, some default values for settings that customize this process were changed and this leads to your problem.</p>\n<ol start=\"3\">\n<li>\n<blockquote>\n<p>I found that Hibernate seems to expect the Entity\'s classname as argument of the <code>appliesTo</code> parameter.</p>\n</blockquote>\n</li>\n</ol>\n<p>Actually, hibernate expects to obtain <em>a physical table name</em> here, but as you do not specify the name via the <code>@javax.persistence.Table</code> annotation by default hibernate requires the entity\'s class name. As an additional example, assuming that you use physical naming strategy from the n.2, the following mapping would be valid:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\n@javax.persistence.Table(name = &quot;history_entry&quot;)\n@org.hibernate.annotations.Table(\n    appliesTo = &quot;APP_history_entry&quot;, \n    indexes = { ... }\n)\npublic class HistoryEntry {\n    // ...\n}\n</code></pre>\n','2021-07-24 08:32:38',_binary '','2021-07-24 09:21:08',1,68499962),(68591162,'<p>Your entity mapping is wrong. You need to map your associations with <code>@ManyToOne</code></p>\n<pre><code>@Entity\n@Table(name = &quot;COMPANY_INTERVIEW_LEVELS&quot;)\n@JsonInclude(JsonInclude.Include.NON_EMPTY)\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@JsonFilter(&quot;CompanyInterviewLevels&quot;)\npublic class CompanyInterviewLevels implements Serializable\n{\n    private static final long serialVersionUID = 6868521896546285046L;\n\n    @Id\n    @Column(name = &quot;ID&quot;)\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name=&quot;IV_LEVEL&quot;)\n    private String ivLevel;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name=&quot;COMPANY_ID&quot;)\n    private Company companyId;\n\n    @NotNull\n    @Column(name = &quot;CREATED_ON&quot;)\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date createdOn = new Date();\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;CREATED_BY&quot;)\n    private User createdBy;\n}\n</code></pre>\n','2021-07-30 12:43:12',_binary '\0','2021-07-30 12:43:12',0,68547772),(68621615,'<p>Every bidirectional association <em>must have one owning side only (the child side), the other one being referred to as the inverse (or the <code>mappedBy</code>) side</em>. You should remove <code>@PrimaryKeyJoinColumn</code> annotation from the <code>Product.book</code>:</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Entity\npublic class Product {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    // ...\n\n    @OneToOne(mappedBy = &quot;product&quot;, cascade = CascadeType.ALL)\n    private Book book;\n}\n</code></pre>\n<p>as this annotation uses only on the owning (not <code>mappedBy</code>) side.</p>\n<p>And whenever a bidirectional association is formed, the application developer must make sure both sides are in-sync at all times. So, you should do something like this:</p>\n<pre class=\"lang-java prettyprint-override\"><code>Product product = new Product();\nBook book = new Book();\n// ...\nproduct.setBook(book);\nbook.setProduct(product);\nentityManager.save(product);\n</code></pre>\n','2021-08-02 12:28:03',_binary '\0','2021-08-02 13:10:32',0,68620480),(68623269,'<p>Strangely by just changing the name of type to &quot;jsonb-lob&quot; it worked -</p>\n<pre><code>@TypeDefs({ @TypeDef(name = &quot;jsonb-lob&quot;, typeClass = JsonBlobType.class) })\n@Audited\n@Table(name = &quot;hyperform_common_config&quot;)\n@Entity\npublic class CommonConfig implements Serializable{\n\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Id\n    @Column(name = &quot;id&quot;)\n    private long id;\n    @Type(type = &quot;jsonb-lob&quot;)\n    @Column(name = &quot;config_data&quot;)\n    private String configData;\n</code></pre>\n','2021-08-02 14:23:29',_binary '\0','2021-08-02 14:23:29',0,68622705),(68628058,'<p>Well we need more informations. First the declaration of the entities. Somehting might be missing. Then more code. Here we don\'t even have the declaration of the function</p>\n<p>Even if it might not be the real cause, check you have imported the spring transactional annotation and not the javax annotation</p>\n<p>Edit : as far as I remember I\'ve also worked with &quot;nested&quot; objects like this.\nNot sure, but might work : try to do this after you retrieved the singleTable2. I don\'t remember you have to do this when you access an object, but try it anyway</p>\n<pre><code> Hibernate.initialize(singleTable2)\n</code></pre>\n','2021-08-02 21:22:30',_binary '\0','2021-08-02 21:27:32',0,68627781),(68632148,'<p><strong>1st</strong></p>\n<p>While h2 will create the schema for you automatically, MySQL won\'t automatically create the database for you. You have to do it manually.</p>\n<p><a href=\"https://stackoverflow.com/q/43249308/12423505\">Cant create a mysql database using Spring Boot</a></p>\n<p><strong>2nd and 3rd</strong></p>\n<p>If you are just adding just one line in mockashop.user, you can try adding the data using @EventListner</p>\n<p>You can then remove the data.sql file</p>\n<pre><code>@Component\npublic class Data {\n    @Autowired\n    UserRepository userRepository;\n\n    @EventListener\n    public void appReady(ApplicationReadyEvent event){\n        rolesRepository.save(new User(\'20003\', \'ROLE_USER\', \'+6592212152\', \'shah3@gmail.com\', \'shah3\', \'shahshah\', \'777.55\'));\n    }\n}\n</code></pre>\n<p><strong>4th</strong></p>\n<p>That is because every time you run this application the spring tries to add the same value over and over again and the user_id would have a UNIQUE constraint. That\'s why you are getting that error.</p>\n<p>I believe the solution in the <strong>2nd and 3rd</strong> point would also solve this problem as the save method of JPA would update the values in the database if the primary key value that is being passed is already present in the database.</p>\n','2021-08-03 07:44:18',_binary '\0','2021-08-03 07:44:18',0,68629827),(68649842,'<p>When using the Hibernate session you must make sure to ALWAYS close it, no matter what. Meaning your method should use the try-finally pattern.</p>\n<pre><code>public Boolean isUserFieldExist(String field, String value) {\n    final Session session = hibernateManager.getSession();\n    try {\n        Criteria criteria = session.createCriteria(UserEntity.class);\n        criteria.add(Restrictions.eq(field, value));\n        criteria.setProjection(Projections.rowCount());\n        long count = (long) criteria.uniqueResult();\n        return count != 0;\n    } finally {\n        session.close();\n    }\n}\n</code></pre>\n<p>You have to do this everywhere you use create a new session. Though in general if you\'re using a comprehensive system with EJB injection, you should just inject an <code>EntityManager</code> instead of managing it manually like this.</p>\n','2021-08-04 10:44:50',_binary '\0','2021-08-04 10:44:50',1,68649589),(68679105,'<p>The exception message is quite informative regarding the error you are experiencing. Take a look at the following part:</p>\n<blockquote>\n<p>NULL not allowed for column &quot;USER_ID&quot;; SQL statement: update history\nset action=?, description=?, ticket_id=?, user_id=? where id=?</p>\n</blockquote>\n<p>What you attempt to do is to save an instance of a <code>History</code> entity which without passing in a reference to a <code>User</code> object. Since your relation dictates that the <code>user</code> reference cannot be null:</p>\n<pre><code>@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n@JoinColumn(name = &quot;user_id&quot;, nullable = false)\n</code></pre>\n<p>To fix this, either make sure that a non-null reference to a <code>User</code> object is passed in when inserting/updating the <code>History</code> reference, or modify your database constraint design to allow for null user references at the <code>History</code> entity.</p>\n','2021-08-06 09:14:16',_binary '\0','2021-08-06 09:14:16',0,68679008),(68755654,'<p>My problem was related to test, but in the further development I faced it again. So I want to share my solution.\nMaybe it will help you.\nPay attention to CascadeType! Cascading operations must be specified above the link to the child relation. In my case, I have to remove this relation or leave Ticket with CascadeType.PERSIST</p>\n<p>Fixed class Attachment:</p>\n<pre><code>@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Attachment {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String filename;\n\n    @Column(columnDefinition = &quot;bytea&quot;)\n    private byte[] file;\n\n    @ManyToOne(fetch = FetchType.LAZY)  // or cascade = CascadeType.PERSIST\n    @JoinColumn(name = &quot;ticket_id&quot;, nullable = false)\n    private Ticket ticket;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = &quot;user_id&quot;, nullable = false)\n    private User user;\n}\n</code></pre>\n','2021-08-12 10:26:42',_binary '\0','2021-08-12 10:26:42',0,68679008),(68708077,'<p>AFAIK, fetching collections is not possible through the JPA result set mapping annotations. There are Hibernate specific APIs to do this though if you want, which would look similar to this:</p>\n<pre><code>SQLQuery q = session.createNativeQuery(...);\nq.addRoot(&quot;o&quot;, Test.class)\n .addProperty(&quot;id&quot;, &quot;o.id&quot;)\n .addProperty(&quot;version&quot;, &quot;o.version&quot;);\nq.addFetch(&quot;a&quot;, &quot;o&quot;, &quot;addresses&quot;)\n .addProperty(&quot;id&quot;, &quot;a.id&quot;)\n .addProperty(&quot;organisation&quot;, &quot;a.organisation_id&quot;);\n</code></pre>\n<p>But if you just want efficient pagination, I would recommend you look into <a href=\"https://github.com/Blazebit/blaze-persistence#core-quick-start\" rel=\"nofollow noreferrer\">Blaze-Persistence</a> which comes with a specialized implementation and <a href=\"https://persistence.blazebit.com/documentation/1.6/entity-view/manual/en_US/#spring-data-integration\" rel=\"nofollow noreferrer\">spring-data integration</a> that just works:</p>\n<pre><code>@Repository\ninterface TestRepository : JpaRepository&lt;Test, Long&gt; {\n    @EntityGraph(&quot;addresses&quot;)\n    fun getRankedTests(\n        pageable: Pageable\n    ): Page&lt;Test&gt;\n}\n</code></pre>\n','2021-08-09 07:08:37',_binary '\0','2021-08-09 07:08:37',0,68698938),(68718168,'<p>Cudos to <a href=\"https://stackoverflow.com/users/412446/christian-beikov\">Christian Beikov</a> for a good proposal. The missing link here was the ResultTransformer. Since the native query will end up with both the parent and child on the same JDBC row, we will end up with an object array containing both. The ResultTransformer will have the responsibility of mapping that object array back to an entity hierarchy. Here\'s how I fixed it:</p>\n<p>Added a DAO for fetching the results with an entityManager:</p>\n<pre><code>@Repository\nclass Dao(\n    @PersistenceContext\n    private val entityManager: EntityManager\n) {\n\n    fun getRankedTests(): List&lt;Test&gt; =\n        entityManager.createNamedQuery(&quot;Test.getRankedTests&quot;)\n            .setParameter(&quot;max&quot;, 5)\n            .setHint(QueryHints.HINT_READONLY, true)\n            .unwrap(NativeQuery::class.java)\n            .setResultTransformer(TestResultTransformer(entityManager))\n            .resultList.filterIsInstance(Test::class.java)\n}\n</code></pre>\n<p>Created the following ResultTransformer:</p>\n<pre><code>class TestResultTransformer(private val entityManager: EntityManager) : BasicTransformerAdapter() {\n    override fun transformList(\n        list: List&lt;*&gt;\n    ): List&lt;Test&gt; {\n        val identifiableMap: MutableMap&lt;Long, Test&gt; = mutableMapOf()\n        for (entityArray in list) {\n            if (entityArray is Array&lt;*&gt;) {\n                var test: Test? = null\n                var testChild: TestChild? = null\n                for (tuple in entityArray) {\n                    entityManager.detach(tuple);\n                    when (tuple) {\n                        is Test -&gt; test = tuple\n                        is TestChild -&gt; testChild = tuple\n                        else -&gt; {\n                            throw UnsupportedOperationException(\n                                &quot;Tuple &quot; + tuple?.javaClass + &quot; is not supported!&quot;\n                            )\n                        }\n                    }\n                }\n                if (test != null) {\n                    val key = test.id\n                    if (!identifiableMap.containsKey(key)) {\n                        identifiableMap[key] = test\n                        test.addresses = mutableListOf()\n                    }\n                    if (testChild != null) {\n                        test.addresses.add(testChild)\n                    }\n                }\n            }\n        }\n        return identifiableMap.values.toList()\n    }\n}\n</code></pre>\n','2021-08-09 20:22:33',_binary '','2021-08-09 20:22:33',0,68698938),(68726617,'<p>I solved the issue by using @EmbeddedId and @Embeddable instaead of @Idclass etc.</p>\n','2021-08-10 12:12:17',_binary '\0','2021-08-10 12:12:17',0,68704838),(68713744,'<p>I guess the problem you\'re having comes from closing the <code>entityManager.close();</code>.</p>\n<p>As <code>User</code>\'s reference to <code>Activity</code> is <code>LAZY</code>, JPA will load it only once you try to access it via code, like anything accessing the variable <code>User.activities</code> in any way.\nThis makes JPA load the referenced <code>Activity</code>s.</p>\n<p><strong>What I <em>think</em> happens there:</strong></p>\n<ol>\n<li>When you create (read from Database) those <code>User</code>s in your <code>getUserByUserName()</code> method, JPA keeps (has those created <code>User</code>s keep) a reference to the <code>EntityManager entityManager</code> they were created with.</li>\n<li>So if you <strong>later on</strong> try to access <code>User.activities</code>, JPA will try to load those activities using the <code>EntityManager entityManager</code>.</li>\n<li>If you have already closed that <code>EntityManager entityManager</code> (as you did in your <code>final</code> statement), then the loading will fail with that <code>LazyInitializationException</code> you then get.</li>\n</ol>\n<p><strong>Solution:</strong></p>\n<p>As I am not sing Hibernate, nor checking its codebase, I do not know whether <code>entityManagerFactory.createEntityManager();</code> is actually creating separate instances if already present, and how all the <code>EntityManager</code> instances are managed.</p>\n<p>But probably it\'s simply best to never close any <code>EntityManager</code>; instead, let the JPA implementation (Hibernate) take care of that. With all the possibilities of dependency-injecting stuff into your classes, I bet Hibernate has some pretty good mechanisms in place for dealing with that kind of resource management.</p>\n<p>As an alternative, let Hiberante inject the <code>EntityManager</code>, so you don\'t even have to take care of creating it in the first place.</p>\n<p><strong>Finally</strong>, you can still stick to the LAZY loading, if that improves initial and long-term performance for you. Just don\'t close those <code>EntityManager</code>s.</p>\n<p>If you need deeper insights into that matter,</p>\n<ul>\n<li>check Hibernate\'s source code / preprocessors / code injection / bytecode weaving mechanisms</li>\n<li>or use some JVM memory analysis tool to see if the number of instantiated <code>EntityManager</code>s increase linearly with calls to your <code>getUserByUserName()</code> method.</li>\n</ul>\n<p><strong>Update:</strong> Showing a completely different alternative</p>\n<p>I personally use Payara, and use <code>@EJB private UserCRUD mUserCRUD;</code> to inject Data Access Objects, that I called CRUD (for Create Retriece Update Delete) a long time ago and still stick to them.</p>\n<p>The basic principle is these 3 steps:</p>\n<p><strong>Step 1:</strong> I have a universal base class in a library, injecting the <code>@PersistenceContext protected EntityManager mEM;</code></p>\n<pre><code>@Stateless\npublic abstract class TemplateCRUD_Simple&lt;T&gt; implements TemplateCRUD_Simple_Interface&lt;T&gt; {\n\n    @PersistenceContext protected EntityManager mEM;\n\n    protected final Class&lt;T&gt; mType;\n\n    public TemplateCRUD_Simple(final Class&lt;T&gt; pClass) {\n        mType = pClass;\n    }\n\n\n\n    /*\n     * INTERNALS\n     */\n\n    @Override public String getTableName() {\n        return mType.getSimpleName();\n    }\n    @Override public String getNativeTableName() {\n        final Table table = mType.getAnnotation(Table.class);\n        if (table != null) return table.name();\n        return getTableName();\n    }\n    @Override public EntityManager getEntityManager() {\n        return mEM;\n    }\n\n\n\n    /*\n     * CREATE\n     */\n\n    @Override public T create(final T t) {\n        return createAny(t);\n    }\n    @Override public &lt;U&gt; U createAny(final U u) {\n        mEM.persist(u);\n        mEM.flush();\n        mEM.refresh(u);\n        return u;\n    }\n\n\n\n    /*\n     * RETRIEVE\n     */\n\n    @Override public T find(final long pID) throws JcXEntityNotFoundException {\n        final T ret = find(pID, null);\n        if (ret == null) throw new JcXEntityNotFoundException(getTableName() + &quot; with ID &quot; + pID + &quot; cannot be found!&quot;);\n        return ret;\n    }\n\n\n    @Override public T find(final long pID, final T pDefault) {\n        final T ret = mEM.find(mType, Long.valueOf(pID));\n        if (ret == null) return pDefault;\n        return ret;\n    }\n    @Override public T find(final Long pID, final T pDefault) {\n        if (pID == null) return pDefault;\n        return find(pID.longValue(), pDefault);\n    }\n    @Override public T findCreate(final long pID) throws InstantiationException, IllegalAccessException {\n        final T item = find(pID, null);\n        if (item != null) return item;\n\n        final T item2 = mType.newInstance();\n        return create(item2);\n    }\n\n    // a lot more methods here\n}\n</code></pre>\n<p>And its interface definition, also in the library:</p>\n<pre><code>public interface TemplateCRUD_Simple_Interface&lt;T&gt; {\n\n    EntityManager getEntityManager();\n    String getTableName();\n    String getNativeTableName();\n\n\n    // create\n    T create(T t);\n    &lt;U&gt; U createAny(U t);\n\n    // retrieve\n    T find(long pID) throws JcXEntityNotFoundException;\n    T find(long pID, T pDefault);\n    T find(Long pID, T pDefault);\n    T findCreate(long pID) throws InstantiationException, IllegalAccessException;\n    List&lt;T&gt; findAll(String pColName, Object pValue, final boolean pCaseSensitive);\n    List&lt;T&gt; findAll(String pColName, Object pValue);\n    List&lt;T&gt; findAll(String pColName, String pValue, final boolean pCaseSensitive);\n    List&lt;T&gt; findAll(String pColName, String pValue);\n    List&lt;T&gt; findAll(String pColName, long pValue);\n    List&lt;T&gt; findAllByFieldName(String pFieldName, Object pValue, final boolean pCaseSensitive);\n    List&lt;T&gt; findAllByFieldName(String pFieldName, Object pValue);\n    List&lt;T&gt; findWhereContains(final String pColName, final String pValue, final boolean pCaseSensitive);\n    List&lt;T&gt; findWhereContains(final String pColName, final String pValue);\n    List&lt;T&gt; getAll();\n    List&lt;Long&gt; getAllIds();\n    List&lt;T&gt; getByIds(final Collection&lt;Long&gt; pIds);\n\n    // update\n    T update(T t);\n    void updateProperties(T pItem, Map&lt;String, String[]&gt; pMatches);\n    T updateItem(Map&lt;String, String[]&gt; pMatches, long pID) throws InstantiationException, IllegalAccessException;\n    ArrayList&lt;T&gt; updateItems(String pEntityParamName, Map&lt;String, String[]&gt; pMap) throws InstantiationException, IllegalAccessException;\n\n    // delete\n    T delete(long pId);\n\n    // misc\n    long countAll();\n    Object getID(T pItem);\n    long getIDLong(T pItem);\n    boolean contains(T pItem);\n    void detach(final T pItem);\n\n    @Deprecated String getFieldNameInDb(final String pFieldName, final String pDefault);\n\n\n\n    //  private List&lt;T&gt; getOverdueForXIn(final int pDays, final String pVarName);\n    List&lt;T&gt; getOverdueForDeletion(final boolean pAddAlreadyWarned);\n    List&lt;T&gt; getOverdueForUpdate(final boolean pAddAlreadyWarned);\n\n}\n</code></pre>\n<p><strong>Step 2:</strong> For each custom Class I have a CRUD (in this example, the \'User\' Class):</p>\n<ul>\n<li>CrudBase_BaseEntity is basically derived drom TemplateCRUD_Simple, just a few more steps in between for more flexibility</li>\n<li>UserCRUD extends TemplateCRUD_Simple, so I can easily use those general methods</li>\n<li>If I need specialized methods, I simply add them to the UserCRUD\'s code</li>\n</ul>\n<p>This is an example for handling the <code>User</code> entity:</p>\n<pre><code>@Entity\n@Table(name = &quot;PT_User&quot;)\npublic class User extends _BaseEntity&lt;User&gt; {...}\n</code></pre>\n<p>And this is its CRUD/DAO:</p>\n<pre><code>@Stateless\npublic class UserCRUD extends CrudBase_BaseEntity&lt;User&gt; {\n\n    public UserCRUD() {\n        super(User.class);\n    }\n\n    public long getRegisteredUsersCount() {\n        final String sql = &quot;SELECT COUNT(d) FROM &quot; + getTableName() + &quot; d&quot;;\n        final Query q = mEM.createQuery(sql);\n        final Long count = (Long) q.getSingleResult();\n        if (count == null) return 0;\n        return count.longValue();\n    }\n\n\n\n    public User findUserByUsernameOrEmail(final String pUid, final String pMail) {\n        final TypedQuery&lt;User&gt; query = mEM.createQuery(&quot;SELECT i FROM &quot; + getTableName() + &quot; i WHERE lower(i.email)=lower(:userid) OR lower(i.email)=lower(:usermail)&quot;, mType);\n        query.setParameter(&quot;userid&quot;, pUid);\n        query.setParameter(&quot;usermail&quot;, pMail);\n        final List&lt;User&gt; list = query.getResultList();\n        if (list == null || list.size() &lt; 1) return null;\n        return list.get(0);\n    }\n\n\n\n    public List&lt;User&gt; getAllAdmins() {\n        final TypedQuery&lt;User&gt; query = mEM.createQuery(&quot;SELECT i FROM &quot; + getTableName() + &quot; i WHERE i.isAdmin = TRUE&quot;, mType);\n        final List&lt;User&gt; list = query.getResultList();\n        return list;\n    }\n\n\n\n    public List&lt;User&gt; getInvalidUsers() {\n        final TypedQuery&lt;User&gt; query = mEM.createQuery(&quot;SELECT i FROM &quot; + getTableName() + &quot; i &quot;\n                + &quot;WHERE (i.username IS NULL&quot;\n                + &quot; OR i.fullname IS NULL)&quot;\n                + &quot; AND i.email IS NULL&quot;, mType);\n        final List&lt;User&gt; list = query.getResultList();\n        return list;\n    }\n\n}\n</code></pre>\n<p><strong>Step 3:</strong> In servlets, I simply inject it via <code>@EJB</code>annotation and then use it like this:</p>\n<pre><code>@WebServlet(&quot;/dyn/user/getAll&quot;)\n@WebServletParams({})\n@WebServletDescription()\npublic class GetAll extends BaseServlet {\n    private static final long serialVersionUID = -4567235617944396165L;\n\n    @EJB private UserCRUD mCRUD;\n\n    @Override protected void doGet_(final HttpServletRequest pReq, final HttpServletResponse pResp) throws IOException {\n        USessionManager.ensureUserLoggedInAndAdmin(pReq);\n\n        final List&lt;User&gt; items = mCRUD.getAll();\n\n        items.sort((final User pO1, final User pO2) -&gt; JcUString.compareTo(pO1.getFullname(), pO2.getFullname(), false));\n\n        JSON.send(items, pResp);\n    }\n\n}\n</code></pre>\n<p>This is the way I implemented it and use it.</p>\n<ul>\n<li>At first it\'s lot of overhead</li>\n<li>But it\'s really easy to set up new Classes und CRUDs</li>\n<li>It\'s safe to use them</li>\n<li>I use this in my JEE library, so I do not have to duplicate code, and any patch or addition I make is then available to all projects that use it</li>\n<li>If need be, I could always access the (again: injected) EntityManager instance inside the TemplateCRUD.</li>\n</ul>\n<p>I believe Spring uses a quite similar system, and calls it something like \'...Repository\'. If you want, you can also check that out and take its source code and adapt it. Usually when doing that, the <code>@EJB</code> and <code>@PersistenceContext</code> and <code>@Inject</code> do not transfer well between GlassFish/Payara, Spring or Hibernate, because not all support all of those Annotations in every context. As I said, this is quite Payara specific, and I\'ve never tested it in other containers, but the approach should work everywhere.</p>\n<p>To recap: this all depends a lot on dependency injection, me letting the container do all the work.</p>\n','2021-08-09 14:22:58',_binary '\0','2021-08-09 18:50:46',0,68713012),(68874462,'<p>It seems that problem is not with the constructor. Whenever I use IF statement, I get this error. When I use IF in MySQL it works, but not here. So I changed to CASE:</p>\n<pre><code>        String hql = &quot;SELECT new com.CompanyName.DTO.TotalDTO(o.date,&quot;\n                + &quot; COALESCE(SUM(CASE WHEN o.platform = \'China\' THEN o.total ELSE 0 END), 0), &quot;\n                + &quot; COALESCE(SUM(CASE WHEN o.platform != \'China\' THEN o.total ELSE 0 END), 0), &quot;\n                + &quot; COUNT(o.orderId), &quot;\n                + &quot; COALESCE(SUM(CASE WHEN o.platform = \'coupons\' THEN o.total ELSE 0 END), 0),&quot;\n                + &quot; COALESCE(SUM(o.total), 0)) &quot;\n+ &quot; FROM OrderDTO o WHERE (o.date BETWEEN :from AND :to) GROUP BY o.date ORDER BY o.date&quot;;\n</code></pre>\n','2021-08-21 15:37:06',_binary '','2021-08-21 15:37:06',0,68717756),(68731486,'<p>Well, I actually figured it out. The count query generated by returning Page from the repository method can be avoided by supplying your own via the following conversion:</p>\n<p>Convert this:</p>\n<pre><code>@Entity\n@Table(name=`order`)\n@SqlResultSetMapping(\n    name=&quot;myDtoMapping&quot;,\n    classes={\n            @ConstructorResult(\n                    targetClass=MyDto.class,\n                    columns={\n                            @ColumnResult(name=&quot;id&quot;, type=Long.class),\n                            //Other columns...\n                    }\n            )\n    }\n)\n@NamedNativeQuery(name=&quot;Order.findtResults&quot;, query=myVariablePointingToQuery, resultSetMapping=&quot;myDtoMapping&quot;)\npublic class Order{\n...\n</code></pre>\n<p>To this:</p>\n<pre><code>@Entity\n@Table(name=`order`)\n@SqlResultSetMappings({\n    @SqlResultSetMapping(\n            name=&quot;myDtoMapping&quot;,\n            classes={\n                    @ConstructorResult(\n                            targetClass=MyDto.class,\n                            columns={\n                                    @ColumnResult(name=&quot;id&quot;, type=Long.class),\n                                    //Other columns...\n                            }\n                    )\n            }\n    ),\n    @SqlResultSetMapping(name=&quot;myDtoMapping.count&quot;, columns=@ColumnResult(name=&quot;cnt&quot;))}\n)\n@NamedNativeQueries({\n    @NamedNativeQuery(name=&quot;Order.findResults&quot;, query=myVariablePointingToQuery, resultSetMapping=&quot;myDtoMapping&quot;),\n    @NamedNativeQuery(name = &quot;Order.findResults.count&quot;, query=myVariablePointingToCOUNTINGQuery, resultSetMapping = &quot;myDtoMapping.count&quot;)\n})\n</code></pre>\n<p>Note that there is a <code>SqlResultSetMapping</code> and <code>@NamedNativeQuery</code> for count now, as well as a custom count query, which <strong>by the way is defined as</strong></p>\n<pre><code>&quot;select count(*) as cnt \\n&quot; //newline is important!\n</code></pre>\n<p><strong>because even with a trailing space, the query comes out to &quot;select count(*) as cntfrom&quot;. A bug.</strong></p>\n<p>But now everything works!</p>\n','2021-08-10 17:53:13',_binary '','2021-08-10 17:53:13',0,68729380),(68759858,'<p>I was eventually able to solve this for myself. Posting details here so someone else can get benefitted.</p>\n<h1>Some facts first:</h1>\n<ol>\n<li><p>MySQL 5.7 onwards, the default storage engine is InnoDB (<a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html\" rel=\"nofollow noreferrer\">https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html</a>)\n<code>In MySQL 5.7, InnoDB is the default MySQL storage engine. Unless you have configured a different default storage engine, issuing a CREATE TABLE statement without an ENGINE clause creates an InnoDB table.</code></p>\n</li>\n<li><p>There is no need to use <code>-Dhibernate.dialect.storage_engine=innodb</code> command line system property.</p>\n</li>\n<li><p><code>MySQL*InnoDBDialect</code> classes are deprecated</p>\n</li>\n<li><p>Dialect to be used is: <code>org.hibernate.dialect.MySQL57Dialect</code></p>\n</li>\n</ol>\n<h1>Solution:</h1>\n<p>It appears that Spring @Transactional is not properly intercepted by the default Spring Proxy AOP. The solution is to either use Aspect J (<a href=\"https://stackoverflow.com/questions/4396284/does-spring-transactional-attribute-work-on-a-private-method#4396530\">Does Spring @Transactional attribute work on a private method?</a>)</p>\n<p>OR</p>\n<p>Refactor the code to ensure that the caller of @Transactional method resides in a different class.</p>\n<p>Here is an example (just an example to show what I mean, code should be properly refactored and appropriate coding and design principles should be used)</p>\n<p>Caller code:</p>\n<pre><code>@Service\npublic class MyService {\n    @Autowired private Persister persister;\n\n    public void doSomething() {\n        // do something to get a list of entity First and Second\n        persister.persist(firstEntityList, secondEntityList);\n    }\n}\n</code></pre>\n<p>Callee:</p>\n<pre><code>public class Persister {\n    @Autowired private MySQLFirstRepository firstRepo;\n    @Autowired private MySQLSecondRepository secondRepo;\n\n    @Transactional(&quot;mysqlTransactionManager&quot;) // use other attributes to suit your needs; see some options above in the question\n    public void persist(List&lt;First&gt; firstEntityList, List&lt;Second&gt; secondEntityList) {\n        firstRepo.saveAll(firstEntityList);\n        secondRepo.saveAll(secondEntityList);\n    }\n}\n</code></pre>\n','2021-08-12 15:01:16',_binary '','2021-08-12 15:11:26',2,68750442),(68791160,'<p>Thank to @Shadov I was able to find the issue. In my case the issue was a mistake made by me when creating the DTO.</p>\n<p>I mistakenly created the DTO with fields which are Entities and not other DTOs. Once I changed them from entities to DTOs I was able to get the response I needed.</p>\n<p>Changed from this:</p>\n<pre><code>public class MachineGroupToVersionDTO {\n    private MachineGroup machineGroup;\n    private Version version;\n    private String state;\n    private Date testedTime;\n    private Date creationTime;\n}\n</code></pre>\n<p>To this:</p>\n<pre><code>public class MachineGroupToVersionDTO {\n    private MachineGroupSimpleDTO machineGroup;\n    private VersionDTO version;\n    private String state;\n    private Date testedTime;\n    private Date creationTime;\n}\n</code></pre>\n','2021-08-15 11:40:32',_binary '','2021-08-15 11:40:32',0,68756676),(68759851,'<p>You probably are trying to fetch lazy attributes without oppening a hibernate transaction session (which is required to instantiate lazy collections through hibernate proxy). Add <code>org.springframework.transaction.annotation.Transactional(readOnly = true)</code> annotation to the method which you are using to fetch your <code>MachineGroup</code> collection.</p>\n<p>Edit:\nYou\'re probably facing cyclic fetching issue, while fetching MachineGroup by Name on service method, it fetches the <code>MachineGroup</code> and also, all the users by eager mode (<code>@ManyToMany(fetch = FetchType.EAGER)</code>), which have a List of MachineGroup too.</p>\n<p>In your DTO conversion method, you are setting a <code>MachineGroup</code>, that have a list of users, and to set this list of users, each user must have a list of <code>MachineGroup</code> again, which is lazily fetched by default, and that is the exact breakpoint of the thrown exception:</p>\n<pre><code>Could not write JSON: failed to lazily initialize a collection of role: .entities.user.User.machineGroups, could not initialize proxy - no Session; nested exception is com.fasterxml.jackson.databind.JsonMappingException: failed to lazily initialize a collection of role: .entities.user.User.machineGroups, could not initialize proxy - no Session (through reference chain: java.util.ArrayList[0]-&gt;.entities.machinegrouptoversion.MachineGroupToVersionDTO[\\&quot;machineGroup\\&quot;]-&gt;.entities.machinegroup.MachineGroup[\\&quot;users\\&quot;]-&gt;org.hibernate.collection.internal.PersistentSet[0]-&gt;.entities.user.User[\\&quot;machineGroups\\&quot;])\n</code></pre>\n<p>If you need to retrieve the information of the many-to-many table <code>machine_groups_to_users</code> I suggest you to create an entity with a  <a href=\"https://stackoverflow.com/questions/3585034/how-to-map-a-composite-key-with-jpa-and-hibernate\">composite primary key</a> and remove the List of <code>MachineGroup</code> from your user entity.</p>\n','2021-08-12 15:00:52',_binary '\0','2021-08-12 17:23:43',0,68758636),(68935611,'<p>The problem is that in your <code>MachineGroupToVersionDTO</code> the <code>machineGroup</code> your are setting, the <code>MachineGroup#users</code> collection contains at least one <code>User</code> referring to some <code>MachineGroup</code> through <code>User#machineGroups</code>, that is not initialized. You can either try to join fetch all of that or sprinkle some <code>@JsonIgnore</code> annotations around but I doubt this will work for you as you will probably want to serialize the machine groups of a user for some other endpoints. So in the end, the only option you have (in my opinion) is that you introduce DTOs all the way and do not use any entities in your DTO models.</p>\n<p>I think this is a perfect use case for <a href=\"https://github.com/Blazebit/blaze-persistence#entity-view-usage\" rel=\"nofollow noreferrer\">Blaze-Persistence Entity Views</a>.</p>\n<p>I created the library to allow easy mapping between JPA models and custom interface or abstract class defined models, something like Spring Data Projections on steroids. The idea is that you define your target structure(domain model) the way you like and map attributes(getters) via JPQL expressions to the entity model.</p>\n<p>A DTO model for your use case could look like the following with Blaze-Persistence Entity-Views:</p>\n<pre><code>@EntityView(MachineGroupToVersion.class)\npublic interface MachineGroupToVersionDto {\n    @IdMapping\n    Long getId();\n    String getState();\n    Date getCreationTime();\n    Date getTestedTime();\n    VersionDto getVersion();\n    MachineGroupDto getMachineGroup();\n\n    @EntityView(Version.class)\n    interface VersionDto {\n        @IdMapping\n        Long getId();\n        String getName();\n    }\n    @EntityView(MachineGroup.class)\n    interface MachineGroupDto {\n        @IdMapping\n        Long getId();\n        String getName();\n        Date getCreationTime();\n        Set&lt;UserDto&gt; getUsers();\n    }\n    @EntityView(User.class)\n    interface UserDto {\n        @IdMapping\n        Long getId();\n        String getUsername();\n    }\n}\n</code></pre>\n<p>Querying is a matter of applying the entity view to a query, the simplest being just a query by id.</p>\n<p><code>MachineGroupToVersionDto a = entityViewManager.find(entityManager, MachineGroupToVersionDto.class, id);</code></p>\n<p>The Spring Data integration allows you to use it almost like Spring Data Projections: <a href=\"https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features\" rel=\"nofollow noreferrer\">https://persistence.blazebit.com/documentation/entity-view/manual/en_US/index.html#spring-data-features</a></p>\n<pre><code>Page&lt;MachineGroupToVersionDto&gt; findAll(Pageable pageable);\n</code></pre>\n<p>The best part is, it will only fetch the state that is actually necessary!</p>\n','2021-08-26 09:04:01',_binary '\0','2021-08-26 09:04:01',0,68758636),(68784404,'<p>You are unwittingly or consciously trying to create another <code>user_type</code> field while being used for <code>@DiscriminatorValue</code>.</p>\n<p><strong>You change <code>user_type</code> column to read-only mode (i.e. <code>insertable = false, updatable = false</code>)</strong>, hibernate knows what values should it use for insert/update as there is only single source of truth.</p>\n<pre class=\"lang-java prettyprint-override\"><code>@Column(name=&quot;user_type&quot;, insertable = false, updatable = false)\nprivate Integer userType;\n</code></pre>\n','2021-08-14 14:53:49',_binary '\0','2021-08-14 14:53:49',0,68783543),(68785403,'<p>You should add <code>Hibernate Dialect</code> to your <em><strong>application.properties</strong></em> like so</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect\nspring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Or create a <em>Bean</em> for Oracle datasource. Follow this guide for further information\n<a href=\"https://springframework.guru/configuring-spring-boot-for-oracle/\" rel=\"nofollow noreferrer\">Configuring Spring Boot for Oracle</a></p>\n','2021-08-14 17:03:09',_binary '','2021-08-14 17:03:09',0,68785056),(68936108,'<p>Obviously <code>where :customerAccNo</code> is not a valid predicate. You have to compare that parameter to some column/field with an operator e.g. <code>=</code> the equal operator, for this to become a proper predicate. Use this:</p>\n<pre><code>@NamedQueries   ({  \n    @NamedQuery(name=&quot;customers.amountWithdraw&quot;, query=&quot;update customers set customerBalance = customerBalance - :amount where customerAccNo = :customerAccNo&quot;),\n    @NamedQuery(name=&quot;customers.amountDeposit&quot;, query=&quot;update customers set customerBalance = customerBalance + :amount where customerAccNo = :customerAccNo&quot; )})  \n\n</code></pre>\n','2021-08-26 09:37:49',_binary '\0','2021-08-26 09:37:49',0,68797021),(68811830,'<p>I was adding admin record by directly hard coding it causing this issue(I haven\'t update the new params there)</p>\n','2021-08-17 04:47:42',_binary '\0','2021-08-17 06:29:41',0,68806077),(68807673,'<p>In your Doctor class, your json is expecting a field called <code>doctor_id</code> while your class field is called <code>doctorid</code></p>\n','2021-08-16 18:31:15',_binary '','2021-08-16 18:31:15',1,68807479),(68831422,'<p>I was able to solve the problem. The error occurred because I was trying to send the int request to my api.</p>\n<pre><code>{\n&quot;date&quot;:&quot;12/12/2021&quot;,\n &quot;time&quot;:&quot;4:05&quot;,\n &quot;doctor_id&quot;:{&quot;doctor_id&quot;:4},\n &quot;user_id&quot;:{&quot;user_id&quot;:14}\n }\n</code></pre>\n<p>By sending the post request like this i was able to get the response back.</p>\n','2021-08-18 11:24:14',_binary '\0','2021-08-18 11:24:14',0,68807479),(68809944,'<p><code>Hibernate.isInitialized(job.getSteps())</code> shouldn\'t throw <code>LazyInitializationException</code> (LIE).</p>\n<p><code>job.getSteps()</code> returns a proxy, to have LIE you need to call a method of a proxy, for example <code>job.getSteps().size()</code>.</p>\n<p><code>job.getSteps()</code> can throw LIE, if <code>job</code> is a proxy itself.</p>\n<p>Anyway using entities as a response of REST API is a very bad idea. You will have a lot of issues with that.</p>\n<p>Better to use <code>JobEntity</code> for an entity and <code>Job</code> for DTO. Just convert from <code>JobEntity</code> to <code>Job</code> on the service level. You can call <code>Hibernate.isInitialized(jobEntity.getSteps())</code> on the service level and set an empty collection for the steps to the <code>Job</code>.</p>\n<p><strong>To unproxy entity</strong></p>\n<p><code>Hibernate.unproxy()</code> returns a different object (not the same proxy). Also keep in mind that &quot;If the proxy is uninitialized, it automatically triggers an initialization&quot;.</p>\n<pre class=\"lang-java prettyprint-override\"><code>public Job getJob(Long id) {\n    Job job = jobRepo.findById(id).get();\n    return Hibernate.unproxy(job, Job.class);\n}\n</code></pre>\n','2021-08-16 22:46:59',_binary '\0','2021-08-19 16:31:52',0,68809189),(68831234,'<p>The problem here was, that I was missing a</p>\n<blockquote>\n<p>@Enumerated(EnumType.STRING)</p>\n</blockquote>\n<p>annotation on my entity\'s attribute.  I assume this has caused hibernate to interpret the enumeration as an intege rather than a string.</p>\n<pre><code>@Table\npublic class OrderMetaData extends AbstractPersistentObject {\n\n    @Column(nullable = false)\n    @Enumerated(EnumType.STRING)\n    private OrderMetaDataAttribute attribute;\n}\n</code></pre>\n','2021-08-18 11:08:16',_binary '\0','2021-08-18 11:08:16',1,68831233),(68855144,'<p>Try adding a no-parameter constructor to your entity.</p>\n','2021-08-19 22:35:23',_binary '\0','2021-08-19 22:35:23',0,68832316),(68936654,'<p>Did you try debugging to the point where the exception is initially thrown and inspect what is happening exactly? Maybe some underlying exception is swallowed. Are you sure you updated Hibernate to the latest version 5.4.34/5.5.7? If so, and you still have the problem, please create an issue in the issue tracker(<a href=\"https://hibernate.atlassian.net\" rel=\"nofollow noreferrer\">https://hibernate.atlassian.net</a>) with a test case(<a href=\"https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java\" rel=\"nofollow noreferrer\">https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java</a>) that reproduces the issue.</p>\n','2021-08-26 10:14:47',_binary '\0','2021-08-26 10:14:47',0,68832316),(68937595,'<p>If you use <code>cascade = PERSIST</code> on the <code>@OneToMany</code> you should see the same error. The difference is just that Hibernate does not try to &quot;manage&quot; *-to-many associations on the inverse side i.e. where the <code>mappedBy</code> is present.</p>\n','2021-08-26 11:20:23',_binary '','2021-08-26 11:20:23',0,68833288),(68846368,'<p><strong>Employee.java</strong></p>\n<pre><code>@Column(name = &quot;first_name&quot;, nullable = false)\nprivate String firstName;\n</code></pre>\n<p><code>firstName</code> property cannot be null -&gt; <code>nullable = false</code> above. So this is the error you are getting, your <code>Employee</code> object that you want to save via <code>saveEmployee</code> method has this property <code>null</code>. Try to set a value to it or make sure it has value (debug your application) prior calling <code>saveEmployee</code></p>\n','2021-08-19 10:44:38',_binary '\0','2021-08-19 10:44:38',1,68844688),(68850205,'<p><strong>Don\'t use Lombok <code>@Data</code> annotation on Entities!</strong></p>\n<p>Especially when you have a bi-directional relationship.</p>\n<p>The generate <code>equals</code>, <code>hashCode</code> and <code>toString</code> methods will produce a <code>StackOverflowError</code></p>\n<p>You better only use <code>@Getter</code> and <code>@Setter</code> with Entities.</p>\n<p>For the mapper problem you should consider only using an unidirectional relationship. This will break the loop as well.</p>\n','2021-08-19 14:58:33',_binary '','2021-08-24 14:44:15',0,68849692),(69075252,'<p>There is not much you can do except for querying the entity before trying to save it and set the primary key on the instance you want to &quot;merge&quot; or overwrite  before calling save.</p>\n','2021-09-06 13:18:31',_binary '','2021-09-06 13:18:31',0,68854739),(68898216,'<p>I seem to have found the solution.<br>\nAccording to <a href=\"https://hibernate.atlassian.net/browse/HHH-8924?focusedCommentId=58128\" rel=\"nofollow noreferrer\">this</a>, two classes (in this case <code>Album</code> and <code>Track</code>) should not be using the same join column (Although I think there should be such a capability).\nSo by creating a <code>album_artist_id</code> and <code>track_artist_id</code> the problem is solved.</p>\n<p><b>Edit:</b><br>\nI have found a better solution.\nI\'ve added another abstract class named <code>Artwork</code> which contains the reference to class <code>Artist</code>.<br>\nBoth <code>Album</code> and <code>Track</code> are derived from <code>Artwork</code>.<br>\nAlso <code>Artwork</code> is marked with <code>@MappedSuperclass</code> annotation.<br>\nAnd <code>Album</code> and <code>Track</code> have been changed to:<br></p>\n<pre><code>@Entity\n@DiscriminatorValue(&quot;A&quot;)\n@AssociationOverride(name=&quot;artist&quot;, \n    joinColumns=@JoinColumn(name=&quot;album_artist_id&quot;))\npublic class Album extends Artwork {\n    ...\n}\n\n@Entity\n@DiscriminatorValue(&quot;T&quot;)\n@AssociationOverride(name=&quot;artist&quot;, \n    joinColumns=@JoinColumn(name=&quot;track_artist_id&quot;))\npublic class Track extends Artwork {\n    ...\n}\n</code></pre>\n<p>At the end we still do have two foreign keys but from the OOP perspective, it is fixed.<br>\nLet me know your opinion.</p>\n','2021-08-23 19:42:23',_binary '\0','2021-09-15 19:43:45',0,68861313),(69071352,'<p>This should work when you use <code>@DiscriminatorOptions(force = true)</code> on <code>Album</code> and <code>Track</code> to force the type discriminator constraint to be added for the association joins.</p>\n','2021-09-06 08:17:08',_binary '\0','2021-09-06 08:17:08',0,68861313),(68865709,'<blockquote>\n<p>1- As you can see, in the Person class parameterized constructor, I\nhave commented out the line : this.address.setPerson(this);. If I keep\nthis line commented out, I get the exception : &quot;attempted to assign id\nfrom null one-to-one property</p>\n</blockquote>\n<p>Hibernate will not set it explicitly because it does not know to which person this address belongs to you need to specify that explicitly.</p>\n<p>The purpose of @OneToOne is to tell hibernate where to get the rest of the data when it is already mapped.</p>\n<blockquote>\n<p>2.If I enable the Person getPerson() method in the Address class, it recursively goes on, until the stack explodes: &quot;Cannot render error\npage for request [/getAll] and exception [Could not write JSON:\nInfinite recursion (StackOverflowError); nested exception is\ncom.fasterxml.jackson.databind.JsonMappingException&quot;. Why cant\nHibernate itself determine that it needs to stop at that boundary\nitself, instead of fetching the Parent Object again?</p>\n</blockquote>\n<p>The exception is caused by Jackson serializer and not from hibernate.\nyou can look at the examples here to see how it is fixed <a href=\"https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion\" rel=\"nofollow noreferrer\">https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion</a>.</p>\n','2021-08-20 16:59:31',_binary '\0','2021-08-20 16:59:31',0,68865141),(68877376,'<p>This will work for you.</p>\n<pre><code>@Column(nullable = false, columnDefinition = &quot;varchar(16)&quot;)\n private String role = &quot;USER&quot;;\n</code></pre>\n','2021-08-21 23:12:27',_binary '\0','2021-08-21 23:12:27',0,68877339),(68880714,'<p>If I am not mistaken <code>columnDefinition = &quot;varchar(16) default \'USER\'&quot;</code> already guarantees that you will never have a <code>null</code> role in the database because it affects SQL table definition.</p>\n<p>Having said that I would suggest removing <code>nullable = false</code> from the <code>@Column</code> annotation in the field.</p>\n','2021-08-22 11:07:54',_binary '\0','2021-08-22 11:07:54',0,68877339),(68898755,'<p>I figured this out.   I knew there were two ways to create a composite key, and it was with @Embeddable w/ @EmbeddedId, but I think that was broken.   The new code looks as follows:</p>\n<pre><code>public class UserRolePK implements Serializable  {\n    @ManyToOne(fetch = FetchType.LAZY, optional=false)\n    @JoinColumn(name = &quot;userId&quot;,  referencedColumnName = &quot;id&quot;, insertable=false, updatable=false)\n    private User user;\n\n    @Column(name = &quot;elt&quot;,  insertable=false, updatable=false)\n    @Enumerated(EnumType.STRING)\n    private Role role;\n\n    // getters/setters/hashcode/equals/toString\n}\n</code></pre>\n<p>Now the actual class which uses the composite key is setup as follows:</p>\n<pre><code>@Entity\n@Table(name=&quot;roles&quot;)\n@IdClass(UserRolePK.class)\npublic class UserRole implements Serializable\n{\n    @Id\n    @ManyToOne(fetch = FetchType.LAZY, optional=false)\n    @JoinColumn(name = &quot;userId&quot;,  referencedColumnName = &quot;id&quot;, insertable=false, updatable=false)\n    private User user;\n\n    @Id\n    @Column(name = &quot;elt&quot;,  insertable=false, updatable=false)\n    @Enumerated(EnumType.STRING)\n    private Role role;\n\n    // getters/setters/hashcode/equals/toString\n}\n</code></pre>\n<p>Once I used both @Id annotations with the @IdClass, whatever problems I had now went away.   I created a simple DAO Class to get one or all records from this table \'roles\' and it worked.  This issue is now resolved.</p>\n','2021-08-23 20:37:54',_binary '\0','2021-08-23 20:37:54',0,68884176),(69079165,'<p>I believe that this issue is due to hbm.xml being considered as &quot;complete&quot; so it\'s imported and validate first I think. Try getting rid of the hbm.xml and this should go away.</p>\n','2021-09-06 18:54:47',_binary '\0','2021-09-06 18:54:47',0,68897547),(68918906,'<blockquote>\n<p>… <code>FROM profileEntity p JOIN p.registrationEntity p</code> …</p>\n</blockquote>\n<p>You are using the same alias (<code>p</code>) twice here. Try with <code>FROM profileEntity p JOIN p.registrationEntity r</code>.</p>\n','2021-08-25 07:52:12',_binary '\0','2021-08-25 07:52:12',1,68918820),(68921103,'<p>i got my answer i change my jpql query to sql query and convert my profileJoinDto Class to interface...</p>\n<p><strong>Changes in code:</strong></p>\n<p>profileJoinDto:</p>\n<pre><code>package com.meetzen.Dto;\n\npublic interface profileJoinDto {\n    public Integer getU_id();\n    public Integer getP_id();\n    public String getEmail();\n    public String getUsername();\n    public String getPassword();\n    public String getContact();\n    public String getDate();\n    public String getWebsite();\n    public String getBio();\n    public String getGender();\n}\n\n</code></pre>\n<blockquote>\n<p>change jpql query to sql query below</p>\n</blockquote>\n<p>profileRepo:</p>\n<pre><code>package com.meetzen.Repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\n\nimport com.meetzen.Dto.profileJoinDto;\nimport com.meetzen.Entity.profileEntity;\n\npublic interface profileRepo extends JpaRepository&lt;profileEntity, Integer&gt;{\n    //JPQL QUERY\n    //@Query(&quot;SELECT new com.meetzen.Dto.profileJoinDto(r.username, r.email, r.contact, p.bio, p.website, p.gender) FROM profileEntity p JOIN p.registrationEntity r WHERE r.u_id = ?1&quot;)\n\n    // SQL QUERY\n    @Query(nativeQuery = true, value = &quot;SELECT * FROM registration_master rm INNER JOIN profile_master pm ON rm.u_id = pm.user_id WHERE rm.u_id = ?&quot;)\n    profileJoinDto findById(int id);\n}\n\n</code></pre>\n','2021-08-25 10:23:53',_binary '','2021-08-25 10:23:53',0,68918820),(68948715,'<p>You have to use the name of the column not the attribute name:</p>\n<pre><code> @Formula(&quot;(SELECT COUNT(*) FROM b WHERE b.a_id = a_id)&quot;)\n</code></pre>\n','2021-08-27 06:05:28',_binary '\0','2021-08-27 06:05:28',1,68946192),(68959228,'<p>As Simon mentioned you need to use the name of the column, not the attribute name. In your example above this would be:\n<code>@Formula(&quot;(SELECT COUNT(*) FROM b WHERE b.a_id = id)&quot;)</code></p>\n','2021-08-27 20:49:51',_binary '','2021-08-27 20:49:51',1,68946192),(68955275,'<p>You need to change your <code>mappedBy</code> to <code>merchant</code></p>\n<p><strong>Foo</strong></p>\n<pre><code>@Entity\n@Table(name = &quot;skl_transactions&quot;)\npublic class Foo implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Basic(optional = false)\n    protected Long id;\n\n    @Column(name = &quot;column_a&quot;)\n    private String senderAddress;\n\n    -----\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name=&quot;column_b&quot;, referencedColumnName = &quot;column_a&quot;, insertable=false, updatable=false)\n    private Bar merchant;\n\n    // getters and setters\n}\n</code></pre>\n<p><strong>Bar</strong></p>\n<pre><code>@Entity\n@Table(name = &quot;merchant_config&quot;)\npublic class Bar implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Basic(optional = false)\n    protected Long id;\n\n    @Column(name = &quot;column_b&quot;)\n    private String merchantAddress;\n\n    -----\n\n    @OneToMany(mappedBy = &quot;merchant&quot;, fetch = FetchType.LAZY)\n    private List&lt;Foo&gt; transactions = new ArrayList&lt;&gt;();\n\n    // getters and setters\n}\n</code></pre>\n<p>If above have any issue try changing <code>name</code> and <code>referencedColumnName</code> the other way round</p>\n<pre><code>in Foo\n@ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name=&quot;column_a&quot;, referencedColumnName = &quot;column_b&quot;, insertable=false, updatable=false)\n    private Bar merchant;\n\nin Bar\n@OneToMany(mappedBy = &quot;merchant&quot;, fetch = FetchType.LAZY)\n    private List&lt;Foo&gt; transactions = new ArrayList&lt;&gt;();\n</code></pre>\n','2021-08-27 14:39:01',_binary '','2021-08-27 15:45:17',1,68954004),(68965140,'<p>Ok, I just changed/simplified the annotations in DrivingStudent\'s drivingInstructor JoinColumn field from this:</p>\n<pre><code>@ManyToOne(cascade = CascadeType.ALL, targetEntity = DrivingInstructor.class)\n@JoinColumn(name = &quot;driving_instructor_id&quot;, referencedColumnName = &quot;driving_instructor_name&quot;, insertable = false, updatable = false)\nprivate DrivingInstructor drivingInstructor;\n</code></pre>\n<p>to this:</p>\n<pre><code>@ManyToOne\n@JoinColumn(name = &quot;driving_instructor_id&quot;)\nprivate DrivingInstructor drivingInstructor;\n</code></pre>\n<p>and it somehow worked... I have no idea why though.</p>\n','2021-08-28 14:12:04',_binary '','2021-08-28 14:12:04',0,68954597);
/*!40000 ALTER TABLE `answer` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-06-20 17:43:58
